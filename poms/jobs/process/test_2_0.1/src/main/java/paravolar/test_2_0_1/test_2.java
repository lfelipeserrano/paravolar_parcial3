// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package paravolar.test_2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: test_2 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class test_2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test_2";
	private final String projectName = "PARAVOLAR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test_2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test_2.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class factStruct implements routines.system.IPersistableRow<factStruct> {
		final static byte[] commonByteArrayLock_PARAVOLAR_test_2 = new byte[0];
		static byte[] commonByteArray_PARAVOLAR_test_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer FlightId;

		public Integer getFlightId() {
			return this.FlightId;
		}

		public Integer AirlineId;

		public Integer getAirlineId() {
			return this.AirlineId;
		}

		public String DepDelay;

		public String getDepDelay() {
			return this.DepDelay;
		}

		public String ArrDelay;

		public String getArrDelay() {
			return this.ArrDelay;
		}

		public Float CarrierDelay;

		public Float getCarrierDelay() {
			return this.CarrierDelay;
		}

		public Integer WeatherDelay;

		public Integer getWeatherDelay() {
			return this.WeatherDelay;
		}

		public String NASDelay;

		public String getNASDelay() {
			return this.NASDelay;
		}

		public String SecurityDelay;

		public String getSecurityDelay() {
			return this.SecurityDelay;
		}

		public String LateAircraftDelay;

		public String getLateAircraftDelay() {
			return this.LateAircraftDelay;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FlightId == null) ? 0 : this.FlightId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final factStruct other = (factStruct) obj;

			if (this.FlightId == null) {
				if (other.FlightId != null)
					return false;

			} else if (!this.FlightId.equals(other.FlightId))

				return false;

			return true;
		}

		public void copyDataTo(factStruct other) {

			other.FlightId = this.FlightId;
			other.AirlineId = this.AirlineId;
			other.DepDelay = this.DepDelay;
			other.ArrDelay = this.ArrDelay;
			other.CarrierDelay = this.CarrierDelay;
			other.WeatherDelay = this.WeatherDelay;
			other.NASDelay = this.NASDelay;
			other.SecurityDelay = this.SecurityDelay;
			other.LateAircraftDelay = this.LateAircraftDelay;

		}

		public void copyKeysDataTo(factStruct other) {

			other.FlightId = this.FlightId;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this.FlightId = readInteger(dis);

					this.AirlineId = readInteger(dis);

					this.DepDelay = readString(dis);

					this.ArrDelay = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CarrierDelay = null;
					} else {
						this.CarrierDelay = dis.readFloat();
					}

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this.FlightId = readInteger(dis);

					this.AirlineId = readInteger(dis);

					this.DepDelay = readString(dis);

					this.ArrDelay = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CarrierDelay = null;
					} else {
						this.CarrierDelay = dis.readFloat();
					}

					this.WeatherDelay = readInteger(dis);

					this.NASDelay = readString(dis);

					this.SecurityDelay = readString(dis);

					this.LateAircraftDelay = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.FlightId, dos);

				// Integer

				writeInteger(this.AirlineId, dos);

				// String

				writeString(this.DepDelay, dos);

				// String

				writeString(this.ArrDelay, dos);

				// Float

				if (this.CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CarrierDelay);
				}

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.FlightId, dos);

				// Integer

				writeInteger(this.AirlineId, dos);

				// String

				writeString(this.DepDelay, dos);

				// String

				writeString(this.ArrDelay, dos);

				// Float

				if (this.CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CarrierDelay);
				}

				// Integer

				writeInteger(this.WeatherDelay, dos);

				// String

				writeString(this.NASDelay, dos);

				// String

				writeString(this.SecurityDelay, dos);

				// String

				writeString(this.LateAircraftDelay, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FlightId=" + String.valueOf(FlightId));
			sb.append(",AirlineId=" + String.valueOf(AirlineId));
			sb.append(",DepDelay=" + DepDelay);
			sb.append(",ArrDelay=" + ArrDelay);
			sb.append(",CarrierDelay=" + String.valueOf(CarrierDelay));
			sb.append(",WeatherDelay=" + String.valueOf(WeatherDelay));
			sb.append(",NASDelay=" + NASDelay);
			sb.append(",SecurityDelay=" + SecurityDelay);
			sb.append(",LateAircraftDelay=" + LateAircraftDelay);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FlightId, other.FlightId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PARAVOLAR_test_2 = new byte[0];
		static byte[] commonByteArray_PARAVOLAR_test_2 = new byte[0];

		public Integer _Year;

		public Integer get_Year() {
			return this._Year;
		}

		public Integer _Quarter;

		public Integer get_Quarter() {
			return this._Quarter;
		}

		public Integer _Month;

		public Integer get_Month() {
			return this._Month;
		}

		public Integer _DayofMonth;

		public Integer get_DayofMonth() {
			return this._DayofMonth;
		}

		public Integer _DayOfWeek;

		public Integer get_DayOfWeek() {
			return this._DayOfWeek;
		}

		public String _FlightDate;

		public String get_FlightDate() {
			return this._FlightDate;
		}

		public String _Marketing_Airline_Network;

		public String get_Marketing_Airline_Network() {
			return this._Marketing_Airline_Network;
		}

		public String _Operated_or_Branded_Code_Share_Partners;

		public String get_Operated_or_Branded_Code_Share_Partners() {
			return this._Operated_or_Branded_Code_Share_Partners;
		}

		public Integer _DOT_ID_Marketing_Airline;

		public Integer get_DOT_ID_Marketing_Airline() {
			return this._DOT_ID_Marketing_Airline;
		}

		public String _IATA_Code_Marketing_Airline;

		public String get_IATA_Code_Marketing_Airline() {
			return this._IATA_Code_Marketing_Airline;
		}

		public String _Flight_Number_Marketing_Airline;

		public String get_Flight_Number_Marketing_Airline() {
			return this._Flight_Number_Marketing_Airline;
		}

		public String _Originally_Scheduled_Code_Share_Airline;

		public String get_Originally_Scheduled_Code_Share_Airline() {
			return this._Originally_Scheduled_Code_Share_Airline;
		}

		public String _DOT_ID_Originally_Scheduled_Code_Share_Airline;

		public String get_DOT_ID_Originally_Scheduled_Code_Share_Airline() {
			return this._DOT_ID_Originally_Scheduled_Code_Share_Airline;
		}

		public String _IATA_Code_Originally_Scheduled_Code_Share_Airline;

		public String get_IATA_Code_Originally_Scheduled_Code_Share_Airline() {
			return this._IATA_Code_Originally_Scheduled_Code_Share_Airline;
		}

		public String _Flight_Num_Originally_Scheduled_Code_Share_Airline;

		public String get_Flight_Num_Originally_Scheduled_Code_Share_Airline() {
			return this._Flight_Num_Originally_Scheduled_Code_Share_Airline;
		}

		public String _Operating_Airline;

		public String get_Operating_Airline() {
			return this._Operating_Airline;
		}

		public Integer _DOT_ID_Operating_Airline;

		public Integer get_DOT_ID_Operating_Airline() {
			return this._DOT_ID_Operating_Airline;
		}

		public String _IATA_Code_Operating_Airline;

		public String get_IATA_Code_Operating_Airline() {
			return this._IATA_Code_Operating_Airline;
		}

		public String _Tail_Number;

		public String get_Tail_Number() {
			return this._Tail_Number;
		}

		public String _Flight_Number_Operating_Airline;

		public String get_Flight_Number_Operating_Airline() {
			return this._Flight_Number_Operating_Airline;
		}

		public Integer _OriginAirportID;

		public Integer get_OriginAirportID() {
			return this._OriginAirportID;
		}

		public Integer _OriginAirportSeqID;

		public Integer get_OriginAirportSeqID() {
			return this._OriginAirportSeqID;
		}

		public Integer _OriginCityMarketID;

		public Integer get_OriginCityMarketID() {
			return this._OriginCityMarketID;
		}

		public String _Origin;

		public String get_Origin() {
			return this._Origin;
		}

		public String _OriginCityName;

		public String get_OriginCityName() {
			return this._OriginCityName;
		}

		public String _OriginState;

		public String get_OriginState() {
			return this._OriginState;
		}

		public String _OriginStateFips;

		public String get_OriginStateFips() {
			return this._OriginStateFips;
		}

		public String _OriginStateName;

		public String get_OriginStateName() {
			return this._OriginStateName;
		}

		public String _OriginWac;

		public String get_OriginWac() {
			return this._OriginWac;
		}

		public Integer _DestAirportID;

		public Integer get_DestAirportID() {
			return this._DestAirportID;
		}

		public Integer _DestAirportSeqID;

		public Integer get_DestAirportSeqID() {
			return this._DestAirportSeqID;
		}

		public Integer _DestCityMarketID;

		public Integer get_DestCityMarketID() {
			return this._DestCityMarketID;
		}

		public Integer _Dest;

		public Integer get_Dest() {
			return this._Dest;
		}

		public String _DestCityName;

		public String get_DestCityName() {
			return this._DestCityName;
		}

		public String _DestState;

		public String get_DestState() {
			return this._DestState;
		}

		public String _DestStateFips;

		public String get_DestStateFips() {
			return this._DestStateFips;
		}

		public String _DestStateName;

		public String get_DestStateName() {
			return this._DestStateName;
		}

		public String _DestWac;

		public String get_DestWac() {
			return this._DestWac;
		}

		public String _CRSDepTime;

		public String get_CRSDepTime() {
			return this._CRSDepTime;
		}

		public Integer _DepTime;

		public Integer get_DepTime() {
			return this._DepTime;
		}

		public String _DepDelay;

		public String get_DepDelay() {
			return this._DepDelay;
		}

		public String _DepDelayMinutes;

		public String get_DepDelayMinutes() {
			return this._DepDelayMinutes;
		}

		public Double _DepDel15;

		public Double get_DepDel15() {
			return this._DepDel15;
		}

		public Float _DepartureDelayGroups;

		public Float get_DepartureDelayGroups() {
			return this._DepartureDelayGroups;
		}

		public Float _DepTimeBlk;

		public Float get_DepTimeBlk() {
			return this._DepTimeBlk;
		}

		public Integer _TaxiOut;

		public Integer get_TaxiOut() {
			return this._TaxiOut;
		}

		public String _WheelsOff;

		public String get_WheelsOff() {
			return this._WheelsOff;
		}

		public Float _WheelsOn;

		public Float get_WheelsOn() {
			return this._WheelsOn;
		}

		public String _TaxiIn;

		public String get_TaxiIn() {
			return this._TaxiIn;
		}

		public String _CRSArrTime;

		public String get_CRSArrTime() {
			return this._CRSArrTime;
		}

		public Float _ArrTime;

		public Float get_ArrTime() {
			return this._ArrTime;
		}

		public String _ArrDelay;

		public String get_ArrDelay() {
			return this._ArrDelay;
		}

		public String _ArrDelayMinutes;

		public String get_ArrDelayMinutes() {
			return this._ArrDelayMinutes;
		}

		public Double _ArrDel15;

		public Double get_ArrDel15() {
			return this._ArrDel15;
		}

		public Float _ArrivalDelayGroups;

		public Float get_ArrivalDelayGroups() {
			return this._ArrivalDelayGroups;
		}

		public Float _ArrTimeBlk;

		public Float get_ArrTimeBlk() {
			return this._ArrTimeBlk;
		}

		public Integer _Cancelled;

		public Integer get_Cancelled() {
			return this._Cancelled;
		}

		public String _CancellationCode;

		public String get_CancellationCode() {
			return this._CancellationCode;
		}

		public Float _Diverted;

		public Float get_Diverted() {
			return this._Diverted;
		}

		public String _CRSElapsedTime;

		public String get_CRSElapsedTime() {
			return this._CRSElapsedTime;
		}

		public Float _ActualElapsedTime;

		public Float get_ActualElapsedTime() {
			return this._ActualElapsedTime;
		}

		public Float _AirTime;

		public Float get_AirTime() {
			return this._AirTime;
		}

		public Float _Flights;

		public Float get_Flights() {
			return this._Flights;
		}

		public Float _Distance;

		public Float get_Distance() {
			return this._Distance;
		}

		public Float _DistanceGroup;

		public Float get_DistanceGroup() {
			return this._DistanceGroup;
		}

		public Float _CarrierDelay;

		public Float get_CarrierDelay() {
			return this._CarrierDelay;
		}

		public Integer _WeatherDelay;

		public Integer get_WeatherDelay() {
			return this._WeatherDelay;
		}

		public String _NASDelay;

		public String get_NASDelay() {
			return this._NASDelay;
		}

		public String _SecurityDelay;

		public String get_SecurityDelay() {
			return this._SecurityDelay;
		}

		public String _LateAircraftDelay;

		public String get_LateAircraftDelay() {
			return this._LateAircraftDelay;
		}

		public String _FirstDepTime;

		public String get_FirstDepTime() {
			return this._FirstDepTime;
		}

		public String _TotalAddGTime;

		public String get_TotalAddGTime() {
			return this._TotalAddGTime;
		}

		public String _LongestAddGTime;

		public String get_LongestAddGTime() {
			return this._LongestAddGTime;
		}

		public String _DivAirportLandings;

		public String get_DivAirportLandings() {
			return this._DivAirportLandings;
		}

		public String _DivReachedDest;

		public String get_DivReachedDest() {
			return this._DivReachedDest;
		}

		public Integer _DivActualElapsedTime;

		public Integer get_DivActualElapsedTime() {
			return this._DivActualElapsedTime;
		}

		public String _DivArrDelay;

		public String get_DivArrDelay() {
			return this._DivArrDelay;
		}

		public String _DivDistance;

		public String get_DivDistance() {
			return this._DivDistance;
		}

		public String _Div1Airport;

		public String get_Div1Airport() {
			return this._Div1Airport;
		}

		public String _Div1AirportID;

		public String get_Div1AirportID() {
			return this._Div1AirportID;
		}

		public String _Div1AirportSeqID;

		public String get_Div1AirportSeqID() {
			return this._Div1AirportSeqID;
		}

		public String _Div1WheelsOn;

		public String get_Div1WheelsOn() {
			return this._Div1WheelsOn;
		}

		public String _Div1TotalGTime;

		public String get_Div1TotalGTime() {
			return this._Div1TotalGTime;
		}

		public String _Div1LongestGTime;

		public String get_Div1LongestGTime() {
			return this._Div1LongestGTime;
		}

		public String _Div1WheelsOff;

		public String get_Div1WheelsOff() {
			return this._Div1WheelsOff;
		}

		public String _Div1TailNum;

		public String get_Div1TailNum() {
			return this._Div1TailNum;
		}

		public String _Div2Airport;

		public String get_Div2Airport() {
			return this._Div2Airport;
		}

		public String _Div2AirportID;

		public String get_Div2AirportID() {
			return this._Div2AirportID;
		}

		public String _Div2AirportSeqID;

		public String get_Div2AirportSeqID() {
			return this._Div2AirportSeqID;
		}

		public String _Div2WheelsOn;

		public String get_Div2WheelsOn() {
			return this._Div2WheelsOn;
		}

		public String _Div2TotalGTime;

		public String get_Div2TotalGTime() {
			return this._Div2TotalGTime;
		}

		public String _Div2LongestGTime;

		public String get_Div2LongestGTime() {
			return this._Div2LongestGTime;
		}

		public String _Div2WheelsOff;

		public String get_Div2WheelsOff() {
			return this._Div2WheelsOff;
		}

		public String _Div2TailNum;

		public String get_Div2TailNum() {
			return this._Div2TailNum;
		}

		public String _Div3Airport;

		public String get_Div3Airport() {
			return this._Div3Airport;
		}

		public String _Div3AirportID;

		public String get_Div3AirportID() {
			return this._Div3AirportID;
		}

		public String _Div3AirportSeqID;

		public String get_Div3AirportSeqID() {
			return this._Div3AirportSeqID;
		}

		public String _Div3WheelsOn;

		public String get_Div3WheelsOn() {
			return this._Div3WheelsOn;
		}

		public String _Div3TotalGTime;

		public String get_Div3TotalGTime() {
			return this._Div3TotalGTime;
		}

		public String _Div3LongestGTime;

		public String get_Div3LongestGTime() {
			return this._Div3LongestGTime;
		}

		public String _Div3WheelsOff;

		public String get_Div3WheelsOff() {
			return this._Div3WheelsOff;
		}

		public String _Div3TailNum;

		public String get_Div3TailNum() {
			return this._Div3TailNum;
		}

		public String _Div4Airport;

		public String get_Div4Airport() {
			return this._Div4Airport;
		}

		public String _Div4AirportID;

		public String get_Div4AirportID() {
			return this._Div4AirportID;
		}

		public String _Div4AirportSeqID;

		public String get_Div4AirportSeqID() {
			return this._Div4AirportSeqID;
		}

		public String _Div4WheelsOn;

		public String get_Div4WheelsOn() {
			return this._Div4WheelsOn;
		}

		public String _Div4TotalGTime;

		public String get_Div4TotalGTime() {
			return this._Div4TotalGTime;
		}

		public String _Div4LongestGTime;

		public String get_Div4LongestGTime() {
			return this._Div4LongestGTime;
		}

		public String _Div4WheelsOff;

		public String get_Div4WheelsOff() {
			return this._Div4WheelsOff;
		}

		public String _Div4TailNum;

		public String get_Div4TailNum() {
			return this._Div4TailNum;
		}

		public String _Div5Airport;

		public String get_Div5Airport() {
			return this._Div5Airport;
		}

		public String _Div5AirportID;

		public String get_Div5AirportID() {
			return this._Div5AirportID;
		}

		public String _Div5AirportSeqID;

		public String get_Div5AirportSeqID() {
			return this._Div5AirportSeqID;
		}

		public String _Div5WheelsOn;

		public String get_Div5WheelsOn() {
			return this._Div5WheelsOn;
		}

		public String _Div5TotalGTime;

		public String get_Div5TotalGTime() {
			return this._Div5TotalGTime;
		}

		public String _Div5LongestGTime;

		public String get_Div5LongestGTime() {
			return this._Div5LongestGTime;
		}

		public String _Div5WheelsOff;

		public String get_Div5WheelsOff() {
			return this._Div5WheelsOff;
		}

		public String _Div5TailNum;

		public String get_Div5TailNum() {
			return this._Div5TailNum;
		}

		public String _Duplicate;

		public String get_Duplicate() {
			return this._Duplicate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this._Year = readInteger(dis);

					this._Quarter = readInteger(dis);

					this._Month = readInteger(dis);

					this._DayofMonth = readInteger(dis);

					this._DayOfWeek = readInteger(dis);

					this._FlightDate = readString(dis);

					this._Marketing_Airline_Network = readString(dis);

					this._Operated_or_Branded_Code_Share_Partners = readString(dis);

					this._DOT_ID_Marketing_Airline = readInteger(dis);

					this._IATA_Code_Marketing_Airline = readString(dis);

					this._Flight_Number_Marketing_Airline = readString(dis);

					this._Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Operating_Airline = readString(dis);

					this._DOT_ID_Operating_Airline = readInteger(dis);

					this._IATA_Code_Operating_Airline = readString(dis);

					this._Tail_Number = readString(dis);

					this._Flight_Number_Operating_Airline = readString(dis);

					this._OriginAirportID = readInteger(dis);

					this._OriginAirportSeqID = readInteger(dis);

					this._OriginCityMarketID = readInteger(dis);

					this._Origin = readString(dis);

					this._OriginCityName = readString(dis);

					this._OriginState = readString(dis);

					this._OriginStateFips = readString(dis);

					this._OriginStateName = readString(dis);

					this._OriginWac = readString(dis);

					this._DestAirportID = readInteger(dis);

					this._DestAirportSeqID = readInteger(dis);

					this._DestCityMarketID = readInteger(dis);

					this._Dest = readInteger(dis);

					this._DestCityName = readString(dis);

					this._DestState = readString(dis);

					this._DestStateFips = readString(dis);

					this._DestStateName = readString(dis);

					this._DestWac = readString(dis);

					this._CRSDepTime = readString(dis);

					this._DepTime = readInteger(dis);

					this._DepDelay = readString(dis);

					this._DepDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._DepDel15 = null;
					} else {
						this._DepDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepartureDelayGroups = null;
					} else {
						this._DepartureDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepTimeBlk = null;
					} else {
						this._DepTimeBlk = dis.readFloat();
					}

					this._TaxiOut = readInteger(dis);

					this._WheelsOff = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._WheelsOn = null;
					} else {
						this._WheelsOn = dis.readFloat();
					}

					this._TaxiIn = readString(dis);

					this._CRSArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrTime = null;
					} else {
						this._ArrTime = dis.readFloat();
					}

					this._ArrDelay = readString(dis);

					this._ArrDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrDel15 = null;
					} else {
						this._ArrDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrivalDelayGroups = null;
					} else {
						this._ArrivalDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrTimeBlk = null;
					} else {
						this._ArrTimeBlk = dis.readFloat();
					}

					this._Cancelled = readInteger(dis);

					this._CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._Diverted = null;
					} else {
						this._Diverted = dis.readFloat();
					}

					this._CRSElapsedTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ActualElapsedTime = null;
					} else {
						this._ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._AirTime = null;
					} else {
						this._AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Flights = null;
					} else {
						this._Flights = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Distance = null;
					} else {
						this._Distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DistanceGroup = null;
					} else {
						this._DistanceGroup = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._CarrierDelay = null;
					} else {
						this._CarrierDelay = dis.readFloat();
					}

					this._WeatherDelay = readInteger(dis);

					this._NASDelay = readString(dis);

					this._SecurityDelay = readString(dis);

					this._LateAircraftDelay = readString(dis);

					this._FirstDepTime = readString(dis);

					this._TotalAddGTime = readString(dis);

					this._LongestAddGTime = readString(dis);

					this._DivAirportLandings = readString(dis);

					this._DivReachedDest = readString(dis);

					this._DivActualElapsedTime = readInteger(dis);

					this._DivArrDelay = readString(dis);

					this._DivDistance = readString(dis);

					this._Div1Airport = readString(dis);

					this._Div1AirportID = readString(dis);

					this._Div1AirportSeqID = readString(dis);

					this._Div1WheelsOn = readString(dis);

					this._Div1TotalGTime = readString(dis);

					this._Div1LongestGTime = readString(dis);

					this._Div1WheelsOff = readString(dis);

					this._Div1TailNum = readString(dis);

					this._Div2Airport = readString(dis);

					this._Div2AirportID = readString(dis);

					this._Div2AirportSeqID = readString(dis);

					this._Div2WheelsOn = readString(dis);

					this._Div2TotalGTime = readString(dis);

					this._Div2LongestGTime = readString(dis);

					this._Div2WheelsOff = readString(dis);

					this._Div2TailNum = readString(dis);

					this._Div3Airport = readString(dis);

					this._Div3AirportID = readString(dis);

					this._Div3AirportSeqID = readString(dis);

					this._Div3WheelsOn = readString(dis);

					this._Div3TotalGTime = readString(dis);

					this._Div3LongestGTime = readString(dis);

					this._Div3WheelsOff = readString(dis);

					this._Div3TailNum = readString(dis);

					this._Div4Airport = readString(dis);

					this._Div4AirportID = readString(dis);

					this._Div4AirportSeqID = readString(dis);

					this._Div4WheelsOn = readString(dis);

					this._Div4TotalGTime = readString(dis);

					this._Div4LongestGTime = readString(dis);

					this._Div4WheelsOff = readString(dis);

					this._Div4TailNum = readString(dis);

					this._Div5Airport = readString(dis);

					this._Div5AirportID = readString(dis);

					this._Div5AirportSeqID = readString(dis);

					this._Div5WheelsOn = readString(dis);

					this._Div5TotalGTime = readString(dis);

					this._Div5LongestGTime = readString(dis);

					this._Div5WheelsOff = readString(dis);

					this._Div5TailNum = readString(dis);

					this._Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this._Year = readInteger(dis);

					this._Quarter = readInteger(dis);

					this._Month = readInteger(dis);

					this._DayofMonth = readInteger(dis);

					this._DayOfWeek = readInteger(dis);

					this._FlightDate = readString(dis);

					this._Marketing_Airline_Network = readString(dis);

					this._Operated_or_Branded_Code_Share_Partners = readString(dis);

					this._DOT_ID_Marketing_Airline = readInteger(dis);

					this._IATA_Code_Marketing_Airline = readString(dis);

					this._Flight_Number_Marketing_Airline = readString(dis);

					this._Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Operating_Airline = readString(dis);

					this._DOT_ID_Operating_Airline = readInteger(dis);

					this._IATA_Code_Operating_Airline = readString(dis);

					this._Tail_Number = readString(dis);

					this._Flight_Number_Operating_Airline = readString(dis);

					this._OriginAirportID = readInteger(dis);

					this._OriginAirportSeqID = readInteger(dis);

					this._OriginCityMarketID = readInteger(dis);

					this._Origin = readString(dis);

					this._OriginCityName = readString(dis);

					this._OriginState = readString(dis);

					this._OriginStateFips = readString(dis);

					this._OriginStateName = readString(dis);

					this._OriginWac = readString(dis);

					this._DestAirportID = readInteger(dis);

					this._DestAirportSeqID = readInteger(dis);

					this._DestCityMarketID = readInteger(dis);

					this._Dest = readInteger(dis);

					this._DestCityName = readString(dis);

					this._DestState = readString(dis);

					this._DestStateFips = readString(dis);

					this._DestStateName = readString(dis);

					this._DestWac = readString(dis);

					this._CRSDepTime = readString(dis);

					this._DepTime = readInteger(dis);

					this._DepDelay = readString(dis);

					this._DepDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._DepDel15 = null;
					} else {
						this._DepDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepartureDelayGroups = null;
					} else {
						this._DepartureDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepTimeBlk = null;
					} else {
						this._DepTimeBlk = dis.readFloat();
					}

					this._TaxiOut = readInteger(dis);

					this._WheelsOff = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._WheelsOn = null;
					} else {
						this._WheelsOn = dis.readFloat();
					}

					this._TaxiIn = readString(dis);

					this._CRSArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrTime = null;
					} else {
						this._ArrTime = dis.readFloat();
					}

					this._ArrDelay = readString(dis);

					this._ArrDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrDel15 = null;
					} else {
						this._ArrDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrivalDelayGroups = null;
					} else {
						this._ArrivalDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrTimeBlk = null;
					} else {
						this._ArrTimeBlk = dis.readFloat();
					}

					this._Cancelled = readInteger(dis);

					this._CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._Diverted = null;
					} else {
						this._Diverted = dis.readFloat();
					}

					this._CRSElapsedTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ActualElapsedTime = null;
					} else {
						this._ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._AirTime = null;
					} else {
						this._AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Flights = null;
					} else {
						this._Flights = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Distance = null;
					} else {
						this._Distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DistanceGroup = null;
					} else {
						this._DistanceGroup = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._CarrierDelay = null;
					} else {
						this._CarrierDelay = dis.readFloat();
					}

					this._WeatherDelay = readInteger(dis);

					this._NASDelay = readString(dis);

					this._SecurityDelay = readString(dis);

					this._LateAircraftDelay = readString(dis);

					this._FirstDepTime = readString(dis);

					this._TotalAddGTime = readString(dis);

					this._LongestAddGTime = readString(dis);

					this._DivAirportLandings = readString(dis);

					this._DivReachedDest = readString(dis);

					this._DivActualElapsedTime = readInteger(dis);

					this._DivArrDelay = readString(dis);

					this._DivDistance = readString(dis);

					this._Div1Airport = readString(dis);

					this._Div1AirportID = readString(dis);

					this._Div1AirportSeqID = readString(dis);

					this._Div1WheelsOn = readString(dis);

					this._Div1TotalGTime = readString(dis);

					this._Div1LongestGTime = readString(dis);

					this._Div1WheelsOff = readString(dis);

					this._Div1TailNum = readString(dis);

					this._Div2Airport = readString(dis);

					this._Div2AirportID = readString(dis);

					this._Div2AirportSeqID = readString(dis);

					this._Div2WheelsOn = readString(dis);

					this._Div2TotalGTime = readString(dis);

					this._Div2LongestGTime = readString(dis);

					this._Div2WheelsOff = readString(dis);

					this._Div2TailNum = readString(dis);

					this._Div3Airport = readString(dis);

					this._Div3AirportID = readString(dis);

					this._Div3AirportSeqID = readString(dis);

					this._Div3WheelsOn = readString(dis);

					this._Div3TotalGTime = readString(dis);

					this._Div3LongestGTime = readString(dis);

					this._Div3WheelsOff = readString(dis);

					this._Div3TailNum = readString(dis);

					this._Div4Airport = readString(dis);

					this._Div4AirportID = readString(dis);

					this._Div4AirportSeqID = readString(dis);

					this._Div4WheelsOn = readString(dis);

					this._Div4TotalGTime = readString(dis);

					this._Div4LongestGTime = readString(dis);

					this._Div4WheelsOff = readString(dis);

					this._Div4TailNum = readString(dis);

					this._Div5Airport = readString(dis);

					this._Div5AirportID = readString(dis);

					this._Div5AirportSeqID = readString(dis);

					this._Div5WheelsOn = readString(dis);

					this._Div5TotalGTime = readString(dis);

					this._Div5LongestGTime = readString(dis);

					this._Div5WheelsOff = readString(dis);

					this._Div5TailNum = readString(dis);

					this._Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this._Year, dos);

				// Integer

				writeInteger(this._Quarter, dos);

				// Integer

				writeInteger(this._Month, dos);

				// Integer

				writeInteger(this._DayofMonth, dos);

				// Integer

				writeInteger(this._DayOfWeek, dos);

				// String

				writeString(this._FlightDate, dos);

				// String

				writeString(this._Marketing_Airline_Network, dos);

				// String

				writeString(this._Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this._DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this._IATA_Code_Marketing_Airline, dos);

				// String

				writeString(this._Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this._Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Operating_Airline, dos);

				// Integer

				writeInteger(this._DOT_ID_Operating_Airline, dos);

				// String

				writeString(this._IATA_Code_Operating_Airline, dos);

				// String

				writeString(this._Tail_Number, dos);

				// String

				writeString(this._Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this._OriginAirportID, dos);

				// Integer

				writeInteger(this._OriginAirportSeqID, dos);

				// Integer

				writeInteger(this._OriginCityMarketID, dos);

				// String

				writeString(this._Origin, dos);

				// String

				writeString(this._OriginCityName, dos);

				// String

				writeString(this._OriginState, dos);

				// String

				writeString(this._OriginStateFips, dos);

				// String

				writeString(this._OriginStateName, dos);

				// String

				writeString(this._OriginWac, dos);

				// Integer

				writeInteger(this._DestAirportID, dos);

				// Integer

				writeInteger(this._DestAirportSeqID, dos);

				// Integer

				writeInteger(this._DestCityMarketID, dos);

				// Integer

				writeInteger(this._Dest, dos);

				// String

				writeString(this._DestCityName, dos);

				// String

				writeString(this._DestState, dos);

				// String

				writeString(this._DestStateFips, dos);

				// String

				writeString(this._DestStateName, dos);

				// String

				writeString(this._DestWac, dos);

				// String

				writeString(this._CRSDepTime, dos);

				// Integer

				writeInteger(this._DepTime, dos);

				// String

				writeString(this._DepDelay, dos);

				// String

				writeString(this._DepDelayMinutes, dos);

				// Double

				if (this._DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._DepDel15);
				}

				// Float

				if (this._DepartureDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepartureDelayGroups);
				}

				// Float

				if (this._DepTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepTimeBlk);
				}

				// Integer

				writeInteger(this._TaxiOut, dos);

				// String

				writeString(this._WheelsOff, dos);

				// Float

				if (this._WheelsOn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._WheelsOn);
				}

				// String

				writeString(this._TaxiIn, dos);

				// String

				writeString(this._CRSArrTime, dos);

				// Float

				if (this._ArrTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTime);
				}

				// String

				writeString(this._ArrDelay, dos);

				// String

				writeString(this._ArrDelayMinutes, dos);

				// Double

				if (this._ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._ArrDel15);
				}

				// Float

				if (this._ArrivalDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrivalDelayGroups);
				}

				// Float

				if (this._ArrTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTimeBlk);
				}

				// Integer

				writeInteger(this._Cancelled, dos);

				// String

				writeString(this._CancellationCode, dos);

				// Float

				if (this._Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Diverted);
				}

				// String

				writeString(this._CRSElapsedTime, dos);

				// Float

				if (this._ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ActualElapsedTime);
				}

				// Float

				if (this._AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._AirTime);
				}

				// Float

				if (this._Flights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Flights);
				}

				// Float

				if (this._Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Distance);
				}

				// Float

				if (this._DistanceGroup == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DistanceGroup);
				}

				// Float

				if (this._CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._CarrierDelay);
				}

				// Integer

				writeInteger(this._WeatherDelay, dos);

				// String

				writeString(this._NASDelay, dos);

				// String

				writeString(this._SecurityDelay, dos);

				// String

				writeString(this._LateAircraftDelay, dos);

				// String

				writeString(this._FirstDepTime, dos);

				// String

				writeString(this._TotalAddGTime, dos);

				// String

				writeString(this._LongestAddGTime, dos);

				// String

				writeString(this._DivAirportLandings, dos);

				// String

				writeString(this._DivReachedDest, dos);

				// Integer

				writeInteger(this._DivActualElapsedTime, dos);

				// String

				writeString(this._DivArrDelay, dos);

				// String

				writeString(this._DivDistance, dos);

				// String

				writeString(this._Div1Airport, dos);

				// String

				writeString(this._Div1AirportID, dos);

				// String

				writeString(this._Div1AirportSeqID, dos);

				// String

				writeString(this._Div1WheelsOn, dos);

				// String

				writeString(this._Div1TotalGTime, dos);

				// String

				writeString(this._Div1LongestGTime, dos);

				// String

				writeString(this._Div1WheelsOff, dos);

				// String

				writeString(this._Div1TailNum, dos);

				// String

				writeString(this._Div2Airport, dos);

				// String

				writeString(this._Div2AirportID, dos);

				// String

				writeString(this._Div2AirportSeqID, dos);

				// String

				writeString(this._Div2WheelsOn, dos);

				// String

				writeString(this._Div2TotalGTime, dos);

				// String

				writeString(this._Div2LongestGTime, dos);

				// String

				writeString(this._Div2WheelsOff, dos);

				// String

				writeString(this._Div2TailNum, dos);

				// String

				writeString(this._Div3Airport, dos);

				// String

				writeString(this._Div3AirportID, dos);

				// String

				writeString(this._Div3AirportSeqID, dos);

				// String

				writeString(this._Div3WheelsOn, dos);

				// String

				writeString(this._Div3TotalGTime, dos);

				// String

				writeString(this._Div3LongestGTime, dos);

				// String

				writeString(this._Div3WheelsOff, dos);

				// String

				writeString(this._Div3TailNum, dos);

				// String

				writeString(this._Div4Airport, dos);

				// String

				writeString(this._Div4AirportID, dos);

				// String

				writeString(this._Div4AirportSeqID, dos);

				// String

				writeString(this._Div4WheelsOn, dos);

				// String

				writeString(this._Div4TotalGTime, dos);

				// String

				writeString(this._Div4LongestGTime, dos);

				// String

				writeString(this._Div4WheelsOff, dos);

				// String

				writeString(this._Div4TailNum, dos);

				// String

				writeString(this._Div5Airport, dos);

				// String

				writeString(this._Div5AirportID, dos);

				// String

				writeString(this._Div5AirportSeqID, dos);

				// String

				writeString(this._Div5WheelsOn, dos);

				// String

				writeString(this._Div5TotalGTime, dos);

				// String

				writeString(this._Div5LongestGTime, dos);

				// String

				writeString(this._Div5WheelsOff, dos);

				// String

				writeString(this._Div5TailNum, dos);

				// String

				writeString(this._Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this._Year, dos);

				// Integer

				writeInteger(this._Quarter, dos);

				// Integer

				writeInteger(this._Month, dos);

				// Integer

				writeInteger(this._DayofMonth, dos);

				// Integer

				writeInteger(this._DayOfWeek, dos);

				// String

				writeString(this._FlightDate, dos);

				// String

				writeString(this._Marketing_Airline_Network, dos);

				// String

				writeString(this._Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this._DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this._IATA_Code_Marketing_Airline, dos);

				// String

				writeString(this._Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this._Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Operating_Airline, dos);

				// Integer

				writeInteger(this._DOT_ID_Operating_Airline, dos);

				// String

				writeString(this._IATA_Code_Operating_Airline, dos);

				// String

				writeString(this._Tail_Number, dos);

				// String

				writeString(this._Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this._OriginAirportID, dos);

				// Integer

				writeInteger(this._OriginAirportSeqID, dos);

				// Integer

				writeInteger(this._OriginCityMarketID, dos);

				// String

				writeString(this._Origin, dos);

				// String

				writeString(this._OriginCityName, dos);

				// String

				writeString(this._OriginState, dos);

				// String

				writeString(this._OriginStateFips, dos);

				// String

				writeString(this._OriginStateName, dos);

				// String

				writeString(this._OriginWac, dos);

				// Integer

				writeInteger(this._DestAirportID, dos);

				// Integer

				writeInteger(this._DestAirportSeqID, dos);

				// Integer

				writeInteger(this._DestCityMarketID, dos);

				// Integer

				writeInteger(this._Dest, dos);

				// String

				writeString(this._DestCityName, dos);

				// String

				writeString(this._DestState, dos);

				// String

				writeString(this._DestStateFips, dos);

				// String

				writeString(this._DestStateName, dos);

				// String

				writeString(this._DestWac, dos);

				// String

				writeString(this._CRSDepTime, dos);

				// Integer

				writeInteger(this._DepTime, dos);

				// String

				writeString(this._DepDelay, dos);

				// String

				writeString(this._DepDelayMinutes, dos);

				// Double

				if (this._DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._DepDel15);
				}

				// Float

				if (this._DepartureDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepartureDelayGroups);
				}

				// Float

				if (this._DepTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepTimeBlk);
				}

				// Integer

				writeInteger(this._TaxiOut, dos);

				// String

				writeString(this._WheelsOff, dos);

				// Float

				if (this._WheelsOn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._WheelsOn);
				}

				// String

				writeString(this._TaxiIn, dos);

				// String

				writeString(this._CRSArrTime, dos);

				// Float

				if (this._ArrTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTime);
				}

				// String

				writeString(this._ArrDelay, dos);

				// String

				writeString(this._ArrDelayMinutes, dos);

				// Double

				if (this._ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._ArrDel15);
				}

				// Float

				if (this._ArrivalDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrivalDelayGroups);
				}

				// Float

				if (this._ArrTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTimeBlk);
				}

				// Integer

				writeInteger(this._Cancelled, dos);

				// String

				writeString(this._CancellationCode, dos);

				// Float

				if (this._Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Diverted);
				}

				// String

				writeString(this._CRSElapsedTime, dos);

				// Float

				if (this._ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ActualElapsedTime);
				}

				// Float

				if (this._AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._AirTime);
				}

				// Float

				if (this._Flights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Flights);
				}

				// Float

				if (this._Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Distance);
				}

				// Float

				if (this._DistanceGroup == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DistanceGroup);
				}

				// Float

				if (this._CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._CarrierDelay);
				}

				// Integer

				writeInteger(this._WeatherDelay, dos);

				// String

				writeString(this._NASDelay, dos);

				// String

				writeString(this._SecurityDelay, dos);

				// String

				writeString(this._LateAircraftDelay, dos);

				// String

				writeString(this._FirstDepTime, dos);

				// String

				writeString(this._TotalAddGTime, dos);

				// String

				writeString(this._LongestAddGTime, dos);

				// String

				writeString(this._DivAirportLandings, dos);

				// String

				writeString(this._DivReachedDest, dos);

				// Integer

				writeInteger(this._DivActualElapsedTime, dos);

				// String

				writeString(this._DivArrDelay, dos);

				// String

				writeString(this._DivDistance, dos);

				// String

				writeString(this._Div1Airport, dos);

				// String

				writeString(this._Div1AirportID, dos);

				// String

				writeString(this._Div1AirportSeqID, dos);

				// String

				writeString(this._Div1WheelsOn, dos);

				// String

				writeString(this._Div1TotalGTime, dos);

				// String

				writeString(this._Div1LongestGTime, dos);

				// String

				writeString(this._Div1WheelsOff, dos);

				// String

				writeString(this._Div1TailNum, dos);

				// String

				writeString(this._Div2Airport, dos);

				// String

				writeString(this._Div2AirportID, dos);

				// String

				writeString(this._Div2AirportSeqID, dos);

				// String

				writeString(this._Div2WheelsOn, dos);

				// String

				writeString(this._Div2TotalGTime, dos);

				// String

				writeString(this._Div2LongestGTime, dos);

				// String

				writeString(this._Div2WheelsOff, dos);

				// String

				writeString(this._Div2TailNum, dos);

				// String

				writeString(this._Div3Airport, dos);

				// String

				writeString(this._Div3AirportID, dos);

				// String

				writeString(this._Div3AirportSeqID, dos);

				// String

				writeString(this._Div3WheelsOn, dos);

				// String

				writeString(this._Div3TotalGTime, dos);

				// String

				writeString(this._Div3LongestGTime, dos);

				// String

				writeString(this._Div3WheelsOff, dos);

				// String

				writeString(this._Div3TailNum, dos);

				// String

				writeString(this._Div4Airport, dos);

				// String

				writeString(this._Div4AirportID, dos);

				// String

				writeString(this._Div4AirportSeqID, dos);

				// String

				writeString(this._Div4WheelsOn, dos);

				// String

				writeString(this._Div4TotalGTime, dos);

				// String

				writeString(this._Div4LongestGTime, dos);

				// String

				writeString(this._Div4WheelsOff, dos);

				// String

				writeString(this._Div4TailNum, dos);

				// String

				writeString(this._Div5Airport, dos);

				// String

				writeString(this._Div5AirportID, dos);

				// String

				writeString(this._Div5AirportSeqID, dos);

				// String

				writeString(this._Div5WheelsOn, dos);

				// String

				writeString(this._Div5TotalGTime, dos);

				// String

				writeString(this._Div5LongestGTime, dos);

				// String

				writeString(this._Div5WheelsOff, dos);

				// String

				writeString(this._Div5TailNum, dos);

				// String

				writeString(this._Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Year=" + String.valueOf(_Year));
			sb.append(",_Quarter=" + String.valueOf(_Quarter));
			sb.append(",_Month=" + String.valueOf(_Month));
			sb.append(",_DayofMonth=" + String.valueOf(_DayofMonth));
			sb.append(",_DayOfWeek=" + String.valueOf(_DayOfWeek));
			sb.append(",_FlightDate=" + _FlightDate);
			sb.append(",_Marketing_Airline_Network=" + _Marketing_Airline_Network);
			sb.append(",_Operated_or_Branded_Code_Share_Partners=" + _Operated_or_Branded_Code_Share_Partners);
			sb.append(",_DOT_ID_Marketing_Airline=" + String.valueOf(_DOT_ID_Marketing_Airline));
			sb.append(",_IATA_Code_Marketing_Airline=" + _IATA_Code_Marketing_Airline);
			sb.append(",_Flight_Number_Marketing_Airline=" + _Flight_Number_Marketing_Airline);
			sb.append(",_Originally_Scheduled_Code_Share_Airline=" + _Originally_Scheduled_Code_Share_Airline);
			sb.append(",_DOT_ID_Originally_Scheduled_Code_Share_Airline="
					+ _DOT_ID_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_IATA_Code_Originally_Scheduled_Code_Share_Airline="
					+ _IATA_Code_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_Flight_Num_Originally_Scheduled_Code_Share_Airline="
					+ _Flight_Num_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_Operating_Airline=" + _Operating_Airline);
			sb.append(",_DOT_ID_Operating_Airline=" + String.valueOf(_DOT_ID_Operating_Airline));
			sb.append(",_IATA_Code_Operating_Airline=" + _IATA_Code_Operating_Airline);
			sb.append(",_Tail_Number=" + _Tail_Number);
			sb.append(",_Flight_Number_Operating_Airline=" + _Flight_Number_Operating_Airline);
			sb.append(",_OriginAirportID=" + String.valueOf(_OriginAirportID));
			sb.append(",_OriginAirportSeqID=" + String.valueOf(_OriginAirportSeqID));
			sb.append(",_OriginCityMarketID=" + String.valueOf(_OriginCityMarketID));
			sb.append(",_Origin=" + _Origin);
			sb.append(",_OriginCityName=" + _OriginCityName);
			sb.append(",_OriginState=" + _OriginState);
			sb.append(",_OriginStateFips=" + _OriginStateFips);
			sb.append(",_OriginStateName=" + _OriginStateName);
			sb.append(",_OriginWac=" + _OriginWac);
			sb.append(",_DestAirportID=" + String.valueOf(_DestAirportID));
			sb.append(",_DestAirportSeqID=" + String.valueOf(_DestAirportSeqID));
			sb.append(",_DestCityMarketID=" + String.valueOf(_DestCityMarketID));
			sb.append(",_Dest=" + String.valueOf(_Dest));
			sb.append(",_DestCityName=" + _DestCityName);
			sb.append(",_DestState=" + _DestState);
			sb.append(",_DestStateFips=" + _DestStateFips);
			sb.append(",_DestStateName=" + _DestStateName);
			sb.append(",_DestWac=" + _DestWac);
			sb.append(",_CRSDepTime=" + _CRSDepTime);
			sb.append(",_DepTime=" + String.valueOf(_DepTime));
			sb.append(",_DepDelay=" + _DepDelay);
			sb.append(",_DepDelayMinutes=" + _DepDelayMinutes);
			sb.append(",_DepDel15=" + String.valueOf(_DepDel15));
			sb.append(",_DepartureDelayGroups=" + String.valueOf(_DepartureDelayGroups));
			sb.append(",_DepTimeBlk=" + String.valueOf(_DepTimeBlk));
			sb.append(",_TaxiOut=" + String.valueOf(_TaxiOut));
			sb.append(",_WheelsOff=" + _WheelsOff);
			sb.append(",_WheelsOn=" + String.valueOf(_WheelsOn));
			sb.append(",_TaxiIn=" + _TaxiIn);
			sb.append(",_CRSArrTime=" + _CRSArrTime);
			sb.append(",_ArrTime=" + String.valueOf(_ArrTime));
			sb.append(",_ArrDelay=" + _ArrDelay);
			sb.append(",_ArrDelayMinutes=" + _ArrDelayMinutes);
			sb.append(",_ArrDel15=" + String.valueOf(_ArrDel15));
			sb.append(",_ArrivalDelayGroups=" + String.valueOf(_ArrivalDelayGroups));
			sb.append(",_ArrTimeBlk=" + String.valueOf(_ArrTimeBlk));
			sb.append(",_Cancelled=" + String.valueOf(_Cancelled));
			sb.append(",_CancellationCode=" + _CancellationCode);
			sb.append(",_Diverted=" + String.valueOf(_Diverted));
			sb.append(",_CRSElapsedTime=" + _CRSElapsedTime);
			sb.append(",_ActualElapsedTime=" + String.valueOf(_ActualElapsedTime));
			sb.append(",_AirTime=" + String.valueOf(_AirTime));
			sb.append(",_Flights=" + String.valueOf(_Flights));
			sb.append(",_Distance=" + String.valueOf(_Distance));
			sb.append(",_DistanceGroup=" + String.valueOf(_DistanceGroup));
			sb.append(",_CarrierDelay=" + String.valueOf(_CarrierDelay));
			sb.append(",_WeatherDelay=" + String.valueOf(_WeatherDelay));
			sb.append(",_NASDelay=" + _NASDelay);
			sb.append(",_SecurityDelay=" + _SecurityDelay);
			sb.append(",_LateAircraftDelay=" + _LateAircraftDelay);
			sb.append(",_FirstDepTime=" + _FirstDepTime);
			sb.append(",_TotalAddGTime=" + _TotalAddGTime);
			sb.append(",_LongestAddGTime=" + _LongestAddGTime);
			sb.append(",_DivAirportLandings=" + _DivAirportLandings);
			sb.append(",_DivReachedDest=" + _DivReachedDest);
			sb.append(",_DivActualElapsedTime=" + String.valueOf(_DivActualElapsedTime));
			sb.append(",_DivArrDelay=" + _DivArrDelay);
			sb.append(",_DivDistance=" + _DivDistance);
			sb.append(",_Div1Airport=" + _Div1Airport);
			sb.append(",_Div1AirportID=" + _Div1AirportID);
			sb.append(",_Div1AirportSeqID=" + _Div1AirportSeqID);
			sb.append(",_Div1WheelsOn=" + _Div1WheelsOn);
			sb.append(",_Div1TotalGTime=" + _Div1TotalGTime);
			sb.append(",_Div1LongestGTime=" + _Div1LongestGTime);
			sb.append(",_Div1WheelsOff=" + _Div1WheelsOff);
			sb.append(",_Div1TailNum=" + _Div1TailNum);
			sb.append(",_Div2Airport=" + _Div2Airport);
			sb.append(",_Div2AirportID=" + _Div2AirportID);
			sb.append(",_Div2AirportSeqID=" + _Div2AirportSeqID);
			sb.append(",_Div2WheelsOn=" + _Div2WheelsOn);
			sb.append(",_Div2TotalGTime=" + _Div2TotalGTime);
			sb.append(",_Div2LongestGTime=" + _Div2LongestGTime);
			sb.append(",_Div2WheelsOff=" + _Div2WheelsOff);
			sb.append(",_Div2TailNum=" + _Div2TailNum);
			sb.append(",_Div3Airport=" + _Div3Airport);
			sb.append(",_Div3AirportID=" + _Div3AirportID);
			sb.append(",_Div3AirportSeqID=" + _Div3AirportSeqID);
			sb.append(",_Div3WheelsOn=" + _Div3WheelsOn);
			sb.append(",_Div3TotalGTime=" + _Div3TotalGTime);
			sb.append(",_Div3LongestGTime=" + _Div3LongestGTime);
			sb.append(",_Div3WheelsOff=" + _Div3WheelsOff);
			sb.append(",_Div3TailNum=" + _Div3TailNum);
			sb.append(",_Div4Airport=" + _Div4Airport);
			sb.append(",_Div4AirportID=" + _Div4AirportID);
			sb.append(",_Div4AirportSeqID=" + _Div4AirportSeqID);
			sb.append(",_Div4WheelsOn=" + _Div4WheelsOn);
			sb.append(",_Div4TotalGTime=" + _Div4TotalGTime);
			sb.append(",_Div4LongestGTime=" + _Div4LongestGTime);
			sb.append(",_Div4WheelsOff=" + _Div4WheelsOff);
			sb.append(",_Div4TailNum=" + _Div4TailNum);
			sb.append(",_Div5Airport=" + _Div5Airport);
			sb.append(",_Div5AirportID=" + _Div5AirportID);
			sb.append(",_Div5AirportSeqID=" + _Div5AirportSeqID);
			sb.append(",_Div5WheelsOn=" + _Div5WheelsOn);
			sb.append(",_Div5TotalGTime=" + _Div5TotalGTime);
			sb.append(",_Div5LongestGTime=" + _Div5LongestGTime);
			sb.append(",_Div5WheelsOff=" + _Div5WheelsOff);
			sb.append(",_Div5TailNum=" + _Div5TailNum);
			sb.append(",_Duplicate=" + _Duplicate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_PARAVOLAR_test_2 = new byte[0];
		static byte[] commonByteArray_PARAVOLAR_test_2 = new byte[0];

		public Integer _Year;

		public Integer get_Year() {
			return this._Year;
		}

		public Integer _Quarter;

		public Integer get_Quarter() {
			return this._Quarter;
		}

		public Integer _Month;

		public Integer get_Month() {
			return this._Month;
		}

		public Integer _DayofMonth;

		public Integer get_DayofMonth() {
			return this._DayofMonth;
		}

		public Integer _DayOfWeek;

		public Integer get_DayOfWeek() {
			return this._DayOfWeek;
		}

		public String _FlightDate;

		public String get_FlightDate() {
			return this._FlightDate;
		}

		public String _Marketing_Airline_Network;

		public String get_Marketing_Airline_Network() {
			return this._Marketing_Airline_Network;
		}

		public String _Operated_or_Branded_Code_Share_Partners;

		public String get_Operated_or_Branded_Code_Share_Partners() {
			return this._Operated_or_Branded_Code_Share_Partners;
		}

		public Integer _DOT_ID_Marketing_Airline;

		public Integer get_DOT_ID_Marketing_Airline() {
			return this._DOT_ID_Marketing_Airline;
		}

		public String _IATA_Code_Marketing_Airline;

		public String get_IATA_Code_Marketing_Airline() {
			return this._IATA_Code_Marketing_Airline;
		}

		public String _Flight_Number_Marketing_Airline;

		public String get_Flight_Number_Marketing_Airline() {
			return this._Flight_Number_Marketing_Airline;
		}

		public String _Originally_Scheduled_Code_Share_Airline;

		public String get_Originally_Scheduled_Code_Share_Airline() {
			return this._Originally_Scheduled_Code_Share_Airline;
		}

		public String _DOT_ID_Originally_Scheduled_Code_Share_Airline;

		public String get_DOT_ID_Originally_Scheduled_Code_Share_Airline() {
			return this._DOT_ID_Originally_Scheduled_Code_Share_Airline;
		}

		public String _IATA_Code_Originally_Scheduled_Code_Share_Airline;

		public String get_IATA_Code_Originally_Scheduled_Code_Share_Airline() {
			return this._IATA_Code_Originally_Scheduled_Code_Share_Airline;
		}

		public String _Flight_Num_Originally_Scheduled_Code_Share_Airline;

		public String get_Flight_Num_Originally_Scheduled_Code_Share_Airline() {
			return this._Flight_Num_Originally_Scheduled_Code_Share_Airline;
		}

		public String _Operating_Airline;

		public String get_Operating_Airline() {
			return this._Operating_Airline;
		}

		public Integer _DOT_ID_Operating_Airline;

		public Integer get_DOT_ID_Operating_Airline() {
			return this._DOT_ID_Operating_Airline;
		}

		public String _IATA_Code_Operating_Airline;

		public String get_IATA_Code_Operating_Airline() {
			return this._IATA_Code_Operating_Airline;
		}

		public String _Tail_Number;

		public String get_Tail_Number() {
			return this._Tail_Number;
		}

		public String _Flight_Number_Operating_Airline;

		public String get_Flight_Number_Operating_Airline() {
			return this._Flight_Number_Operating_Airline;
		}

		public Integer _OriginAirportID;

		public Integer get_OriginAirportID() {
			return this._OriginAirportID;
		}

		public Integer _OriginAirportSeqID;

		public Integer get_OriginAirportSeqID() {
			return this._OriginAirportSeqID;
		}

		public Integer _OriginCityMarketID;

		public Integer get_OriginCityMarketID() {
			return this._OriginCityMarketID;
		}

		public String _Origin;

		public String get_Origin() {
			return this._Origin;
		}

		public String _OriginCityName;

		public String get_OriginCityName() {
			return this._OriginCityName;
		}

		public String _OriginState;

		public String get_OriginState() {
			return this._OriginState;
		}

		public String _OriginStateFips;

		public String get_OriginStateFips() {
			return this._OriginStateFips;
		}

		public String _OriginStateName;

		public String get_OriginStateName() {
			return this._OriginStateName;
		}

		public String _OriginWac;

		public String get_OriginWac() {
			return this._OriginWac;
		}

		public Integer _DestAirportID;

		public Integer get_DestAirportID() {
			return this._DestAirportID;
		}

		public Integer _DestAirportSeqID;

		public Integer get_DestAirportSeqID() {
			return this._DestAirportSeqID;
		}

		public Integer _DestCityMarketID;

		public Integer get_DestCityMarketID() {
			return this._DestCityMarketID;
		}

		public Integer _Dest;

		public Integer get_Dest() {
			return this._Dest;
		}

		public String _DestCityName;

		public String get_DestCityName() {
			return this._DestCityName;
		}

		public String _DestState;

		public String get_DestState() {
			return this._DestState;
		}

		public String _DestStateFips;

		public String get_DestStateFips() {
			return this._DestStateFips;
		}

		public String _DestStateName;

		public String get_DestStateName() {
			return this._DestStateName;
		}

		public String _DestWac;

		public String get_DestWac() {
			return this._DestWac;
		}

		public String _CRSDepTime;

		public String get_CRSDepTime() {
			return this._CRSDepTime;
		}

		public Integer _DepTime;

		public Integer get_DepTime() {
			return this._DepTime;
		}

		public String _DepDelay;

		public String get_DepDelay() {
			return this._DepDelay;
		}

		public String _DepDelayMinutes;

		public String get_DepDelayMinutes() {
			return this._DepDelayMinutes;
		}

		public Double _DepDel15;

		public Double get_DepDel15() {
			return this._DepDel15;
		}

		public Float _DepartureDelayGroups;

		public Float get_DepartureDelayGroups() {
			return this._DepartureDelayGroups;
		}

		public Float _DepTimeBlk;

		public Float get_DepTimeBlk() {
			return this._DepTimeBlk;
		}

		public Integer _TaxiOut;

		public Integer get_TaxiOut() {
			return this._TaxiOut;
		}

		public String _WheelsOff;

		public String get_WheelsOff() {
			return this._WheelsOff;
		}

		public Float _WheelsOn;

		public Float get_WheelsOn() {
			return this._WheelsOn;
		}

		public String _TaxiIn;

		public String get_TaxiIn() {
			return this._TaxiIn;
		}

		public String _CRSArrTime;

		public String get_CRSArrTime() {
			return this._CRSArrTime;
		}

		public Float _ArrTime;

		public Float get_ArrTime() {
			return this._ArrTime;
		}

		public String _ArrDelay;

		public String get_ArrDelay() {
			return this._ArrDelay;
		}

		public String _ArrDelayMinutes;

		public String get_ArrDelayMinutes() {
			return this._ArrDelayMinutes;
		}

		public Double _ArrDel15;

		public Double get_ArrDel15() {
			return this._ArrDel15;
		}

		public Float _ArrivalDelayGroups;

		public Float get_ArrivalDelayGroups() {
			return this._ArrivalDelayGroups;
		}

		public Float _ArrTimeBlk;

		public Float get_ArrTimeBlk() {
			return this._ArrTimeBlk;
		}

		public Integer _Cancelled;

		public Integer get_Cancelled() {
			return this._Cancelled;
		}

		public String _CancellationCode;

		public String get_CancellationCode() {
			return this._CancellationCode;
		}

		public Float _Diverted;

		public Float get_Diverted() {
			return this._Diverted;
		}

		public String _CRSElapsedTime;

		public String get_CRSElapsedTime() {
			return this._CRSElapsedTime;
		}

		public Float _ActualElapsedTime;

		public Float get_ActualElapsedTime() {
			return this._ActualElapsedTime;
		}

		public Float _AirTime;

		public Float get_AirTime() {
			return this._AirTime;
		}

		public Float _Flights;

		public Float get_Flights() {
			return this._Flights;
		}

		public Float _Distance;

		public Float get_Distance() {
			return this._Distance;
		}

		public Float _DistanceGroup;

		public Float get_DistanceGroup() {
			return this._DistanceGroup;
		}

		public Float _CarrierDelay;

		public Float get_CarrierDelay() {
			return this._CarrierDelay;
		}

		public Integer _WeatherDelay;

		public Integer get_WeatherDelay() {
			return this._WeatherDelay;
		}

		public String _NASDelay;

		public String get_NASDelay() {
			return this._NASDelay;
		}

		public String _SecurityDelay;

		public String get_SecurityDelay() {
			return this._SecurityDelay;
		}

		public String _LateAircraftDelay;

		public String get_LateAircraftDelay() {
			return this._LateAircraftDelay;
		}

		public String _FirstDepTime;

		public String get_FirstDepTime() {
			return this._FirstDepTime;
		}

		public String _TotalAddGTime;

		public String get_TotalAddGTime() {
			return this._TotalAddGTime;
		}

		public String _LongestAddGTime;

		public String get_LongestAddGTime() {
			return this._LongestAddGTime;
		}

		public String _DivAirportLandings;

		public String get_DivAirportLandings() {
			return this._DivAirportLandings;
		}

		public String _DivReachedDest;

		public String get_DivReachedDest() {
			return this._DivReachedDest;
		}

		public Integer _DivActualElapsedTime;

		public Integer get_DivActualElapsedTime() {
			return this._DivActualElapsedTime;
		}

		public String _DivArrDelay;

		public String get_DivArrDelay() {
			return this._DivArrDelay;
		}

		public String _DivDistance;

		public String get_DivDistance() {
			return this._DivDistance;
		}

		public String _Div1Airport;

		public String get_Div1Airport() {
			return this._Div1Airport;
		}

		public String _Div1AirportID;

		public String get_Div1AirportID() {
			return this._Div1AirportID;
		}

		public String _Div1AirportSeqID;

		public String get_Div1AirportSeqID() {
			return this._Div1AirportSeqID;
		}

		public String _Div1WheelsOn;

		public String get_Div1WheelsOn() {
			return this._Div1WheelsOn;
		}

		public String _Div1TotalGTime;

		public String get_Div1TotalGTime() {
			return this._Div1TotalGTime;
		}

		public String _Div1LongestGTime;

		public String get_Div1LongestGTime() {
			return this._Div1LongestGTime;
		}

		public String _Div1WheelsOff;

		public String get_Div1WheelsOff() {
			return this._Div1WheelsOff;
		}

		public String _Div1TailNum;

		public String get_Div1TailNum() {
			return this._Div1TailNum;
		}

		public String _Div2Airport;

		public String get_Div2Airport() {
			return this._Div2Airport;
		}

		public String _Div2AirportID;

		public String get_Div2AirportID() {
			return this._Div2AirportID;
		}

		public String _Div2AirportSeqID;

		public String get_Div2AirportSeqID() {
			return this._Div2AirportSeqID;
		}

		public String _Div2WheelsOn;

		public String get_Div2WheelsOn() {
			return this._Div2WheelsOn;
		}

		public String _Div2TotalGTime;

		public String get_Div2TotalGTime() {
			return this._Div2TotalGTime;
		}

		public String _Div2LongestGTime;

		public String get_Div2LongestGTime() {
			return this._Div2LongestGTime;
		}

		public String _Div2WheelsOff;

		public String get_Div2WheelsOff() {
			return this._Div2WheelsOff;
		}

		public String _Div2TailNum;

		public String get_Div2TailNum() {
			return this._Div2TailNum;
		}

		public String _Div3Airport;

		public String get_Div3Airport() {
			return this._Div3Airport;
		}

		public String _Div3AirportID;

		public String get_Div3AirportID() {
			return this._Div3AirportID;
		}

		public String _Div3AirportSeqID;

		public String get_Div3AirportSeqID() {
			return this._Div3AirportSeqID;
		}

		public String _Div3WheelsOn;

		public String get_Div3WheelsOn() {
			return this._Div3WheelsOn;
		}

		public String _Div3TotalGTime;

		public String get_Div3TotalGTime() {
			return this._Div3TotalGTime;
		}

		public String _Div3LongestGTime;

		public String get_Div3LongestGTime() {
			return this._Div3LongestGTime;
		}

		public String _Div3WheelsOff;

		public String get_Div3WheelsOff() {
			return this._Div3WheelsOff;
		}

		public String _Div3TailNum;

		public String get_Div3TailNum() {
			return this._Div3TailNum;
		}

		public String _Div4Airport;

		public String get_Div4Airport() {
			return this._Div4Airport;
		}

		public String _Div4AirportID;

		public String get_Div4AirportID() {
			return this._Div4AirportID;
		}

		public String _Div4AirportSeqID;

		public String get_Div4AirportSeqID() {
			return this._Div4AirportSeqID;
		}

		public String _Div4WheelsOn;

		public String get_Div4WheelsOn() {
			return this._Div4WheelsOn;
		}

		public String _Div4TotalGTime;

		public String get_Div4TotalGTime() {
			return this._Div4TotalGTime;
		}

		public String _Div4LongestGTime;

		public String get_Div4LongestGTime() {
			return this._Div4LongestGTime;
		}

		public String _Div4WheelsOff;

		public String get_Div4WheelsOff() {
			return this._Div4WheelsOff;
		}

		public String _Div4TailNum;

		public String get_Div4TailNum() {
			return this._Div4TailNum;
		}

		public String _Div5Airport;

		public String get_Div5Airport() {
			return this._Div5Airport;
		}

		public String _Div5AirportID;

		public String get_Div5AirportID() {
			return this._Div5AirportID;
		}

		public String _Div5AirportSeqID;

		public String get_Div5AirportSeqID() {
			return this._Div5AirportSeqID;
		}

		public String _Div5WheelsOn;

		public String get_Div5WheelsOn() {
			return this._Div5WheelsOn;
		}

		public String _Div5TotalGTime;

		public String get_Div5TotalGTime() {
			return this._Div5TotalGTime;
		}

		public String _Div5LongestGTime;

		public String get_Div5LongestGTime() {
			return this._Div5LongestGTime;
		}

		public String _Div5WheelsOff;

		public String get_Div5WheelsOff() {
			return this._Div5WheelsOff;
		}

		public String _Div5TailNum;

		public String get_Div5TailNum() {
			return this._Div5TailNum;
		}

		public String _Duplicate;

		public String get_Duplicate() {
			return this._Duplicate;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this._Year = readInteger(dis);

					this._Quarter = readInteger(dis);

					this._Month = readInteger(dis);

					this._DayofMonth = readInteger(dis);

					this._DayOfWeek = readInteger(dis);

					this._FlightDate = readString(dis);

					this._Marketing_Airline_Network = readString(dis);

					this._Operated_or_Branded_Code_Share_Partners = readString(dis);

					this._DOT_ID_Marketing_Airline = readInteger(dis);

					this._IATA_Code_Marketing_Airline = readString(dis);

					this._Flight_Number_Marketing_Airline = readString(dis);

					this._Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Operating_Airline = readString(dis);

					this._DOT_ID_Operating_Airline = readInteger(dis);

					this._IATA_Code_Operating_Airline = readString(dis);

					this._Tail_Number = readString(dis);

					this._Flight_Number_Operating_Airline = readString(dis);

					this._OriginAirportID = readInteger(dis);

					this._OriginAirportSeqID = readInteger(dis);

					this._OriginCityMarketID = readInteger(dis);

					this._Origin = readString(dis);

					this._OriginCityName = readString(dis);

					this._OriginState = readString(dis);

					this._OriginStateFips = readString(dis);

					this._OriginStateName = readString(dis);

					this._OriginWac = readString(dis);

					this._DestAirportID = readInteger(dis);

					this._DestAirportSeqID = readInteger(dis);

					this._DestCityMarketID = readInteger(dis);

					this._Dest = readInteger(dis);

					this._DestCityName = readString(dis);

					this._DestState = readString(dis);

					this._DestStateFips = readString(dis);

					this._DestStateName = readString(dis);

					this._DestWac = readString(dis);

					this._CRSDepTime = readString(dis);

					this._DepTime = readInteger(dis);

					this._DepDelay = readString(dis);

					this._DepDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._DepDel15 = null;
					} else {
						this._DepDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepartureDelayGroups = null;
					} else {
						this._DepartureDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepTimeBlk = null;
					} else {
						this._DepTimeBlk = dis.readFloat();
					}

					this._TaxiOut = readInteger(dis);

					this._WheelsOff = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._WheelsOn = null;
					} else {
						this._WheelsOn = dis.readFloat();
					}

					this._TaxiIn = readString(dis);

					this._CRSArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrTime = null;
					} else {
						this._ArrTime = dis.readFloat();
					}

					this._ArrDelay = readString(dis);

					this._ArrDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrDel15 = null;
					} else {
						this._ArrDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrivalDelayGroups = null;
					} else {
						this._ArrivalDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrTimeBlk = null;
					} else {
						this._ArrTimeBlk = dis.readFloat();
					}

					this._Cancelled = readInteger(dis);

					this._CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._Diverted = null;
					} else {
						this._Diverted = dis.readFloat();
					}

					this._CRSElapsedTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ActualElapsedTime = null;
					} else {
						this._ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._AirTime = null;
					} else {
						this._AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Flights = null;
					} else {
						this._Flights = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Distance = null;
					} else {
						this._Distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DistanceGroup = null;
					} else {
						this._DistanceGroup = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._CarrierDelay = null;
					} else {
						this._CarrierDelay = dis.readFloat();
					}

					this._WeatherDelay = readInteger(dis);

					this._NASDelay = readString(dis);

					this._SecurityDelay = readString(dis);

					this._LateAircraftDelay = readString(dis);

					this._FirstDepTime = readString(dis);

					this._TotalAddGTime = readString(dis);

					this._LongestAddGTime = readString(dis);

					this._DivAirportLandings = readString(dis);

					this._DivReachedDest = readString(dis);

					this._DivActualElapsedTime = readInteger(dis);

					this._DivArrDelay = readString(dis);

					this._DivDistance = readString(dis);

					this._Div1Airport = readString(dis);

					this._Div1AirportID = readString(dis);

					this._Div1AirportSeqID = readString(dis);

					this._Div1WheelsOn = readString(dis);

					this._Div1TotalGTime = readString(dis);

					this._Div1LongestGTime = readString(dis);

					this._Div1WheelsOff = readString(dis);

					this._Div1TailNum = readString(dis);

					this._Div2Airport = readString(dis);

					this._Div2AirportID = readString(dis);

					this._Div2AirportSeqID = readString(dis);

					this._Div2WheelsOn = readString(dis);

					this._Div2TotalGTime = readString(dis);

					this._Div2LongestGTime = readString(dis);

					this._Div2WheelsOff = readString(dis);

					this._Div2TailNum = readString(dis);

					this._Div3Airport = readString(dis);

					this._Div3AirportID = readString(dis);

					this._Div3AirportSeqID = readString(dis);

					this._Div3WheelsOn = readString(dis);

					this._Div3TotalGTime = readString(dis);

					this._Div3LongestGTime = readString(dis);

					this._Div3WheelsOff = readString(dis);

					this._Div3TailNum = readString(dis);

					this._Div4Airport = readString(dis);

					this._Div4AirportID = readString(dis);

					this._Div4AirportSeqID = readString(dis);

					this._Div4WheelsOn = readString(dis);

					this._Div4TotalGTime = readString(dis);

					this._Div4LongestGTime = readString(dis);

					this._Div4WheelsOff = readString(dis);

					this._Div4TailNum = readString(dis);

					this._Div5Airport = readString(dis);

					this._Div5AirportID = readString(dis);

					this._Div5AirportSeqID = readString(dis);

					this._Div5WheelsOn = readString(dis);

					this._Div5TotalGTime = readString(dis);

					this._Div5LongestGTime = readString(dis);

					this._Div5WheelsOff = readString(dis);

					this._Div5TailNum = readString(dis);

					this._Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this._Year = readInteger(dis);

					this._Quarter = readInteger(dis);

					this._Month = readInteger(dis);

					this._DayofMonth = readInteger(dis);

					this._DayOfWeek = readInteger(dis);

					this._FlightDate = readString(dis);

					this._Marketing_Airline_Network = readString(dis);

					this._Operated_or_Branded_Code_Share_Partners = readString(dis);

					this._DOT_ID_Marketing_Airline = readInteger(dis);

					this._IATA_Code_Marketing_Airline = readString(dis);

					this._Flight_Number_Marketing_Airline = readString(dis);

					this._Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);

					this._Operating_Airline = readString(dis);

					this._DOT_ID_Operating_Airline = readInteger(dis);

					this._IATA_Code_Operating_Airline = readString(dis);

					this._Tail_Number = readString(dis);

					this._Flight_Number_Operating_Airline = readString(dis);

					this._OriginAirportID = readInteger(dis);

					this._OriginAirportSeqID = readInteger(dis);

					this._OriginCityMarketID = readInteger(dis);

					this._Origin = readString(dis);

					this._OriginCityName = readString(dis);

					this._OriginState = readString(dis);

					this._OriginStateFips = readString(dis);

					this._OriginStateName = readString(dis);

					this._OriginWac = readString(dis);

					this._DestAirportID = readInteger(dis);

					this._DestAirportSeqID = readInteger(dis);

					this._DestCityMarketID = readInteger(dis);

					this._Dest = readInteger(dis);

					this._DestCityName = readString(dis);

					this._DestState = readString(dis);

					this._DestStateFips = readString(dis);

					this._DestStateName = readString(dis);

					this._DestWac = readString(dis);

					this._CRSDepTime = readString(dis);

					this._DepTime = readInteger(dis);

					this._DepDelay = readString(dis);

					this._DepDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._DepDel15 = null;
					} else {
						this._DepDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepartureDelayGroups = null;
					} else {
						this._DepartureDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DepTimeBlk = null;
					} else {
						this._DepTimeBlk = dis.readFloat();
					}

					this._TaxiOut = readInteger(dis);

					this._WheelsOff = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._WheelsOn = null;
					} else {
						this._WheelsOn = dis.readFloat();
					}

					this._TaxiIn = readString(dis);

					this._CRSArrTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrTime = null;
					} else {
						this._ArrTime = dis.readFloat();
					}

					this._ArrDelay = readString(dis);

					this._ArrDelayMinutes = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ArrDel15 = null;
					} else {
						this._ArrDel15 = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrivalDelayGroups = null;
					} else {
						this._ArrivalDelayGroups = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._ArrTimeBlk = null;
					} else {
						this._ArrTimeBlk = dis.readFloat();
					}

					this._Cancelled = readInteger(dis);

					this._CancellationCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._Diverted = null;
					} else {
						this._Diverted = dis.readFloat();
					}

					this._CRSElapsedTime = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this._ActualElapsedTime = null;
					} else {
						this._ActualElapsedTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._AirTime = null;
					} else {
						this._AirTime = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Flights = null;
					} else {
						this._Flights = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._Distance = null;
					} else {
						this._Distance = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._DistanceGroup = null;
					} else {
						this._DistanceGroup = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this._CarrierDelay = null;
					} else {
						this._CarrierDelay = dis.readFloat();
					}

					this._WeatherDelay = readInteger(dis);

					this._NASDelay = readString(dis);

					this._SecurityDelay = readString(dis);

					this._LateAircraftDelay = readString(dis);

					this._FirstDepTime = readString(dis);

					this._TotalAddGTime = readString(dis);

					this._LongestAddGTime = readString(dis);

					this._DivAirportLandings = readString(dis);

					this._DivReachedDest = readString(dis);

					this._DivActualElapsedTime = readInteger(dis);

					this._DivArrDelay = readString(dis);

					this._DivDistance = readString(dis);

					this._Div1Airport = readString(dis);

					this._Div1AirportID = readString(dis);

					this._Div1AirportSeqID = readString(dis);

					this._Div1WheelsOn = readString(dis);

					this._Div1TotalGTime = readString(dis);

					this._Div1LongestGTime = readString(dis);

					this._Div1WheelsOff = readString(dis);

					this._Div1TailNum = readString(dis);

					this._Div2Airport = readString(dis);

					this._Div2AirportID = readString(dis);

					this._Div2AirportSeqID = readString(dis);

					this._Div2WheelsOn = readString(dis);

					this._Div2TotalGTime = readString(dis);

					this._Div2LongestGTime = readString(dis);

					this._Div2WheelsOff = readString(dis);

					this._Div2TailNum = readString(dis);

					this._Div3Airport = readString(dis);

					this._Div3AirportID = readString(dis);

					this._Div3AirportSeqID = readString(dis);

					this._Div3WheelsOn = readString(dis);

					this._Div3TotalGTime = readString(dis);

					this._Div3LongestGTime = readString(dis);

					this._Div3WheelsOff = readString(dis);

					this._Div3TailNum = readString(dis);

					this._Div4Airport = readString(dis);

					this._Div4AirportID = readString(dis);

					this._Div4AirportSeqID = readString(dis);

					this._Div4WheelsOn = readString(dis);

					this._Div4TotalGTime = readString(dis);

					this._Div4LongestGTime = readString(dis);

					this._Div4WheelsOff = readString(dis);

					this._Div4TailNum = readString(dis);

					this._Div5Airport = readString(dis);

					this._Div5AirportID = readString(dis);

					this._Div5AirportSeqID = readString(dis);

					this._Div5WheelsOn = readString(dis);

					this._Div5TotalGTime = readString(dis);

					this._Div5LongestGTime = readString(dis);

					this._Div5WheelsOff = readString(dis);

					this._Div5TailNum = readString(dis);

					this._Duplicate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this._Year, dos);

				// Integer

				writeInteger(this._Quarter, dos);

				// Integer

				writeInteger(this._Month, dos);

				// Integer

				writeInteger(this._DayofMonth, dos);

				// Integer

				writeInteger(this._DayOfWeek, dos);

				// String

				writeString(this._FlightDate, dos);

				// String

				writeString(this._Marketing_Airline_Network, dos);

				// String

				writeString(this._Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this._DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this._IATA_Code_Marketing_Airline, dos);

				// String

				writeString(this._Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this._Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Operating_Airline, dos);

				// Integer

				writeInteger(this._DOT_ID_Operating_Airline, dos);

				// String

				writeString(this._IATA_Code_Operating_Airline, dos);

				// String

				writeString(this._Tail_Number, dos);

				// String

				writeString(this._Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this._OriginAirportID, dos);

				// Integer

				writeInteger(this._OriginAirportSeqID, dos);

				// Integer

				writeInteger(this._OriginCityMarketID, dos);

				// String

				writeString(this._Origin, dos);

				// String

				writeString(this._OriginCityName, dos);

				// String

				writeString(this._OriginState, dos);

				// String

				writeString(this._OriginStateFips, dos);

				// String

				writeString(this._OriginStateName, dos);

				// String

				writeString(this._OriginWac, dos);

				// Integer

				writeInteger(this._DestAirportID, dos);

				// Integer

				writeInteger(this._DestAirportSeqID, dos);

				// Integer

				writeInteger(this._DestCityMarketID, dos);

				// Integer

				writeInteger(this._Dest, dos);

				// String

				writeString(this._DestCityName, dos);

				// String

				writeString(this._DestState, dos);

				// String

				writeString(this._DestStateFips, dos);

				// String

				writeString(this._DestStateName, dos);

				// String

				writeString(this._DestWac, dos);

				// String

				writeString(this._CRSDepTime, dos);

				// Integer

				writeInteger(this._DepTime, dos);

				// String

				writeString(this._DepDelay, dos);

				// String

				writeString(this._DepDelayMinutes, dos);

				// Double

				if (this._DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._DepDel15);
				}

				// Float

				if (this._DepartureDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepartureDelayGroups);
				}

				// Float

				if (this._DepTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepTimeBlk);
				}

				// Integer

				writeInteger(this._TaxiOut, dos);

				// String

				writeString(this._WheelsOff, dos);

				// Float

				if (this._WheelsOn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._WheelsOn);
				}

				// String

				writeString(this._TaxiIn, dos);

				// String

				writeString(this._CRSArrTime, dos);

				// Float

				if (this._ArrTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTime);
				}

				// String

				writeString(this._ArrDelay, dos);

				// String

				writeString(this._ArrDelayMinutes, dos);

				// Double

				if (this._ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._ArrDel15);
				}

				// Float

				if (this._ArrivalDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrivalDelayGroups);
				}

				// Float

				if (this._ArrTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTimeBlk);
				}

				// Integer

				writeInteger(this._Cancelled, dos);

				// String

				writeString(this._CancellationCode, dos);

				// Float

				if (this._Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Diverted);
				}

				// String

				writeString(this._CRSElapsedTime, dos);

				// Float

				if (this._ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ActualElapsedTime);
				}

				// Float

				if (this._AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._AirTime);
				}

				// Float

				if (this._Flights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Flights);
				}

				// Float

				if (this._Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Distance);
				}

				// Float

				if (this._DistanceGroup == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DistanceGroup);
				}

				// Float

				if (this._CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._CarrierDelay);
				}

				// Integer

				writeInteger(this._WeatherDelay, dos);

				// String

				writeString(this._NASDelay, dos);

				// String

				writeString(this._SecurityDelay, dos);

				// String

				writeString(this._LateAircraftDelay, dos);

				// String

				writeString(this._FirstDepTime, dos);

				// String

				writeString(this._TotalAddGTime, dos);

				// String

				writeString(this._LongestAddGTime, dos);

				// String

				writeString(this._DivAirportLandings, dos);

				// String

				writeString(this._DivReachedDest, dos);

				// Integer

				writeInteger(this._DivActualElapsedTime, dos);

				// String

				writeString(this._DivArrDelay, dos);

				// String

				writeString(this._DivDistance, dos);

				// String

				writeString(this._Div1Airport, dos);

				// String

				writeString(this._Div1AirportID, dos);

				// String

				writeString(this._Div1AirportSeqID, dos);

				// String

				writeString(this._Div1WheelsOn, dos);

				// String

				writeString(this._Div1TotalGTime, dos);

				// String

				writeString(this._Div1LongestGTime, dos);

				// String

				writeString(this._Div1WheelsOff, dos);

				// String

				writeString(this._Div1TailNum, dos);

				// String

				writeString(this._Div2Airport, dos);

				// String

				writeString(this._Div2AirportID, dos);

				// String

				writeString(this._Div2AirportSeqID, dos);

				// String

				writeString(this._Div2WheelsOn, dos);

				// String

				writeString(this._Div2TotalGTime, dos);

				// String

				writeString(this._Div2LongestGTime, dos);

				// String

				writeString(this._Div2WheelsOff, dos);

				// String

				writeString(this._Div2TailNum, dos);

				// String

				writeString(this._Div3Airport, dos);

				// String

				writeString(this._Div3AirportID, dos);

				// String

				writeString(this._Div3AirportSeqID, dos);

				// String

				writeString(this._Div3WheelsOn, dos);

				// String

				writeString(this._Div3TotalGTime, dos);

				// String

				writeString(this._Div3LongestGTime, dos);

				// String

				writeString(this._Div3WheelsOff, dos);

				// String

				writeString(this._Div3TailNum, dos);

				// String

				writeString(this._Div4Airport, dos);

				// String

				writeString(this._Div4AirportID, dos);

				// String

				writeString(this._Div4AirportSeqID, dos);

				// String

				writeString(this._Div4WheelsOn, dos);

				// String

				writeString(this._Div4TotalGTime, dos);

				// String

				writeString(this._Div4LongestGTime, dos);

				// String

				writeString(this._Div4WheelsOff, dos);

				// String

				writeString(this._Div4TailNum, dos);

				// String

				writeString(this._Div5Airport, dos);

				// String

				writeString(this._Div5AirportID, dos);

				// String

				writeString(this._Div5AirportSeqID, dos);

				// String

				writeString(this._Div5WheelsOn, dos);

				// String

				writeString(this._Div5TotalGTime, dos);

				// String

				writeString(this._Div5LongestGTime, dos);

				// String

				writeString(this._Div5WheelsOff, dos);

				// String

				writeString(this._Div5TailNum, dos);

				// String

				writeString(this._Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this._Year, dos);

				// Integer

				writeInteger(this._Quarter, dos);

				// Integer

				writeInteger(this._Month, dos);

				// Integer

				writeInteger(this._DayofMonth, dos);

				// Integer

				writeInteger(this._DayOfWeek, dos);

				// String

				writeString(this._FlightDate, dos);

				// String

				writeString(this._Marketing_Airline_Network, dos);

				// String

				writeString(this._Operated_or_Branded_Code_Share_Partners, dos);

				// Integer

				writeInteger(this._DOT_ID_Marketing_Airline, dos);

				// String

				writeString(this._IATA_Code_Marketing_Airline, dos);

				// String

				writeString(this._Flight_Number_Marketing_Airline, dos);

				// String

				writeString(this._Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline, dos);

				// String

				writeString(this._Operating_Airline, dos);

				// Integer

				writeInteger(this._DOT_ID_Operating_Airline, dos);

				// String

				writeString(this._IATA_Code_Operating_Airline, dos);

				// String

				writeString(this._Tail_Number, dos);

				// String

				writeString(this._Flight_Number_Operating_Airline, dos);

				// Integer

				writeInteger(this._OriginAirportID, dos);

				// Integer

				writeInteger(this._OriginAirportSeqID, dos);

				// Integer

				writeInteger(this._OriginCityMarketID, dos);

				// String

				writeString(this._Origin, dos);

				// String

				writeString(this._OriginCityName, dos);

				// String

				writeString(this._OriginState, dos);

				// String

				writeString(this._OriginStateFips, dos);

				// String

				writeString(this._OriginStateName, dos);

				// String

				writeString(this._OriginWac, dos);

				// Integer

				writeInteger(this._DestAirportID, dos);

				// Integer

				writeInteger(this._DestAirportSeqID, dos);

				// Integer

				writeInteger(this._DestCityMarketID, dos);

				// Integer

				writeInteger(this._Dest, dos);

				// String

				writeString(this._DestCityName, dos);

				// String

				writeString(this._DestState, dos);

				// String

				writeString(this._DestStateFips, dos);

				// String

				writeString(this._DestStateName, dos);

				// String

				writeString(this._DestWac, dos);

				// String

				writeString(this._CRSDepTime, dos);

				// Integer

				writeInteger(this._DepTime, dos);

				// String

				writeString(this._DepDelay, dos);

				// String

				writeString(this._DepDelayMinutes, dos);

				// Double

				if (this._DepDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._DepDel15);
				}

				// Float

				if (this._DepartureDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepartureDelayGroups);
				}

				// Float

				if (this._DepTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DepTimeBlk);
				}

				// Integer

				writeInteger(this._TaxiOut, dos);

				// String

				writeString(this._WheelsOff, dos);

				// Float

				if (this._WheelsOn == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._WheelsOn);
				}

				// String

				writeString(this._TaxiIn, dos);

				// String

				writeString(this._CRSArrTime, dos);

				// Float

				if (this._ArrTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTime);
				}

				// String

				writeString(this._ArrDelay, dos);

				// String

				writeString(this._ArrDelayMinutes, dos);

				// Double

				if (this._ArrDel15 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this._ArrDel15);
				}

				// Float

				if (this._ArrivalDelayGroups == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrivalDelayGroups);
				}

				// Float

				if (this._ArrTimeBlk == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ArrTimeBlk);
				}

				// Integer

				writeInteger(this._Cancelled, dos);

				// String

				writeString(this._CancellationCode, dos);

				// Float

				if (this._Diverted == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Diverted);
				}

				// String

				writeString(this._CRSElapsedTime, dos);

				// Float

				if (this._ActualElapsedTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._ActualElapsedTime);
				}

				// Float

				if (this._AirTime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._AirTime);
				}

				// Float

				if (this._Flights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Flights);
				}

				// Float

				if (this._Distance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._Distance);
				}

				// Float

				if (this._DistanceGroup == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._DistanceGroup);
				}

				// Float

				if (this._CarrierDelay == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this._CarrierDelay);
				}

				// Integer

				writeInteger(this._WeatherDelay, dos);

				// String

				writeString(this._NASDelay, dos);

				// String

				writeString(this._SecurityDelay, dos);

				// String

				writeString(this._LateAircraftDelay, dos);

				// String

				writeString(this._FirstDepTime, dos);

				// String

				writeString(this._TotalAddGTime, dos);

				// String

				writeString(this._LongestAddGTime, dos);

				// String

				writeString(this._DivAirportLandings, dos);

				// String

				writeString(this._DivReachedDest, dos);

				// Integer

				writeInteger(this._DivActualElapsedTime, dos);

				// String

				writeString(this._DivArrDelay, dos);

				// String

				writeString(this._DivDistance, dos);

				// String

				writeString(this._Div1Airport, dos);

				// String

				writeString(this._Div1AirportID, dos);

				// String

				writeString(this._Div1AirportSeqID, dos);

				// String

				writeString(this._Div1WheelsOn, dos);

				// String

				writeString(this._Div1TotalGTime, dos);

				// String

				writeString(this._Div1LongestGTime, dos);

				// String

				writeString(this._Div1WheelsOff, dos);

				// String

				writeString(this._Div1TailNum, dos);

				// String

				writeString(this._Div2Airport, dos);

				// String

				writeString(this._Div2AirportID, dos);

				// String

				writeString(this._Div2AirportSeqID, dos);

				// String

				writeString(this._Div2WheelsOn, dos);

				// String

				writeString(this._Div2TotalGTime, dos);

				// String

				writeString(this._Div2LongestGTime, dos);

				// String

				writeString(this._Div2WheelsOff, dos);

				// String

				writeString(this._Div2TailNum, dos);

				// String

				writeString(this._Div3Airport, dos);

				// String

				writeString(this._Div3AirportID, dos);

				// String

				writeString(this._Div3AirportSeqID, dos);

				// String

				writeString(this._Div3WheelsOn, dos);

				// String

				writeString(this._Div3TotalGTime, dos);

				// String

				writeString(this._Div3LongestGTime, dos);

				// String

				writeString(this._Div3WheelsOff, dos);

				// String

				writeString(this._Div3TailNum, dos);

				// String

				writeString(this._Div4Airport, dos);

				// String

				writeString(this._Div4AirportID, dos);

				// String

				writeString(this._Div4AirportSeqID, dos);

				// String

				writeString(this._Div4WheelsOn, dos);

				// String

				writeString(this._Div4TotalGTime, dos);

				// String

				writeString(this._Div4LongestGTime, dos);

				// String

				writeString(this._Div4WheelsOff, dos);

				// String

				writeString(this._Div4TailNum, dos);

				// String

				writeString(this._Div5Airport, dos);

				// String

				writeString(this._Div5AirportID, dos);

				// String

				writeString(this._Div5AirportSeqID, dos);

				// String

				writeString(this._Div5WheelsOn, dos);

				// String

				writeString(this._Div5TotalGTime, dos);

				// String

				writeString(this._Div5LongestGTime, dos);

				// String

				writeString(this._Div5WheelsOff, dos);

				// String

				writeString(this._Div5TailNum, dos);

				// String

				writeString(this._Duplicate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Year=" + String.valueOf(_Year));
			sb.append(",_Quarter=" + String.valueOf(_Quarter));
			sb.append(",_Month=" + String.valueOf(_Month));
			sb.append(",_DayofMonth=" + String.valueOf(_DayofMonth));
			sb.append(",_DayOfWeek=" + String.valueOf(_DayOfWeek));
			sb.append(",_FlightDate=" + _FlightDate);
			sb.append(",_Marketing_Airline_Network=" + _Marketing_Airline_Network);
			sb.append(",_Operated_or_Branded_Code_Share_Partners=" + _Operated_or_Branded_Code_Share_Partners);
			sb.append(",_DOT_ID_Marketing_Airline=" + String.valueOf(_DOT_ID_Marketing_Airline));
			sb.append(",_IATA_Code_Marketing_Airline=" + _IATA_Code_Marketing_Airline);
			sb.append(",_Flight_Number_Marketing_Airline=" + _Flight_Number_Marketing_Airline);
			sb.append(",_Originally_Scheduled_Code_Share_Airline=" + _Originally_Scheduled_Code_Share_Airline);
			sb.append(",_DOT_ID_Originally_Scheduled_Code_Share_Airline="
					+ _DOT_ID_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_IATA_Code_Originally_Scheduled_Code_Share_Airline="
					+ _IATA_Code_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_Flight_Num_Originally_Scheduled_Code_Share_Airline="
					+ _Flight_Num_Originally_Scheduled_Code_Share_Airline);
			sb.append(",_Operating_Airline=" + _Operating_Airline);
			sb.append(",_DOT_ID_Operating_Airline=" + String.valueOf(_DOT_ID_Operating_Airline));
			sb.append(",_IATA_Code_Operating_Airline=" + _IATA_Code_Operating_Airline);
			sb.append(",_Tail_Number=" + _Tail_Number);
			sb.append(",_Flight_Number_Operating_Airline=" + _Flight_Number_Operating_Airline);
			sb.append(",_OriginAirportID=" + String.valueOf(_OriginAirportID));
			sb.append(",_OriginAirportSeqID=" + String.valueOf(_OriginAirportSeqID));
			sb.append(",_OriginCityMarketID=" + String.valueOf(_OriginCityMarketID));
			sb.append(",_Origin=" + _Origin);
			sb.append(",_OriginCityName=" + _OriginCityName);
			sb.append(",_OriginState=" + _OriginState);
			sb.append(",_OriginStateFips=" + _OriginStateFips);
			sb.append(",_OriginStateName=" + _OriginStateName);
			sb.append(",_OriginWac=" + _OriginWac);
			sb.append(",_DestAirportID=" + String.valueOf(_DestAirportID));
			sb.append(",_DestAirportSeqID=" + String.valueOf(_DestAirportSeqID));
			sb.append(",_DestCityMarketID=" + String.valueOf(_DestCityMarketID));
			sb.append(",_Dest=" + String.valueOf(_Dest));
			sb.append(",_DestCityName=" + _DestCityName);
			sb.append(",_DestState=" + _DestState);
			sb.append(",_DestStateFips=" + _DestStateFips);
			sb.append(",_DestStateName=" + _DestStateName);
			sb.append(",_DestWac=" + _DestWac);
			sb.append(",_CRSDepTime=" + _CRSDepTime);
			sb.append(",_DepTime=" + String.valueOf(_DepTime));
			sb.append(",_DepDelay=" + _DepDelay);
			sb.append(",_DepDelayMinutes=" + _DepDelayMinutes);
			sb.append(",_DepDel15=" + String.valueOf(_DepDel15));
			sb.append(",_DepartureDelayGroups=" + String.valueOf(_DepartureDelayGroups));
			sb.append(",_DepTimeBlk=" + String.valueOf(_DepTimeBlk));
			sb.append(",_TaxiOut=" + String.valueOf(_TaxiOut));
			sb.append(",_WheelsOff=" + _WheelsOff);
			sb.append(",_WheelsOn=" + String.valueOf(_WheelsOn));
			sb.append(",_TaxiIn=" + _TaxiIn);
			sb.append(",_CRSArrTime=" + _CRSArrTime);
			sb.append(",_ArrTime=" + String.valueOf(_ArrTime));
			sb.append(",_ArrDelay=" + _ArrDelay);
			sb.append(",_ArrDelayMinutes=" + _ArrDelayMinutes);
			sb.append(",_ArrDel15=" + String.valueOf(_ArrDel15));
			sb.append(",_ArrivalDelayGroups=" + String.valueOf(_ArrivalDelayGroups));
			sb.append(",_ArrTimeBlk=" + String.valueOf(_ArrTimeBlk));
			sb.append(",_Cancelled=" + String.valueOf(_Cancelled));
			sb.append(",_CancellationCode=" + _CancellationCode);
			sb.append(",_Diverted=" + String.valueOf(_Diverted));
			sb.append(",_CRSElapsedTime=" + _CRSElapsedTime);
			sb.append(",_ActualElapsedTime=" + String.valueOf(_ActualElapsedTime));
			sb.append(",_AirTime=" + String.valueOf(_AirTime));
			sb.append(",_Flights=" + String.valueOf(_Flights));
			sb.append(",_Distance=" + String.valueOf(_Distance));
			sb.append(",_DistanceGroup=" + String.valueOf(_DistanceGroup));
			sb.append(",_CarrierDelay=" + String.valueOf(_CarrierDelay));
			sb.append(",_WeatherDelay=" + String.valueOf(_WeatherDelay));
			sb.append(",_NASDelay=" + _NASDelay);
			sb.append(",_SecurityDelay=" + _SecurityDelay);
			sb.append(",_LateAircraftDelay=" + _LateAircraftDelay);
			sb.append(",_FirstDepTime=" + _FirstDepTime);
			sb.append(",_TotalAddGTime=" + _TotalAddGTime);
			sb.append(",_LongestAddGTime=" + _LongestAddGTime);
			sb.append(",_DivAirportLandings=" + _DivAirportLandings);
			sb.append(",_DivReachedDest=" + _DivReachedDest);
			sb.append(",_DivActualElapsedTime=" + String.valueOf(_DivActualElapsedTime));
			sb.append(",_DivArrDelay=" + _DivArrDelay);
			sb.append(",_DivDistance=" + _DivDistance);
			sb.append(",_Div1Airport=" + _Div1Airport);
			sb.append(",_Div1AirportID=" + _Div1AirportID);
			sb.append(",_Div1AirportSeqID=" + _Div1AirportSeqID);
			sb.append(",_Div1WheelsOn=" + _Div1WheelsOn);
			sb.append(",_Div1TotalGTime=" + _Div1TotalGTime);
			sb.append(",_Div1LongestGTime=" + _Div1LongestGTime);
			sb.append(",_Div1WheelsOff=" + _Div1WheelsOff);
			sb.append(",_Div1TailNum=" + _Div1TailNum);
			sb.append(",_Div2Airport=" + _Div2Airport);
			sb.append(",_Div2AirportID=" + _Div2AirportID);
			sb.append(",_Div2AirportSeqID=" + _Div2AirportSeqID);
			sb.append(",_Div2WheelsOn=" + _Div2WheelsOn);
			sb.append(",_Div2TotalGTime=" + _Div2TotalGTime);
			sb.append(",_Div2LongestGTime=" + _Div2LongestGTime);
			sb.append(",_Div2WheelsOff=" + _Div2WheelsOff);
			sb.append(",_Div2TailNum=" + _Div2TailNum);
			sb.append(",_Div3Airport=" + _Div3Airport);
			sb.append(",_Div3AirportID=" + _Div3AirportID);
			sb.append(",_Div3AirportSeqID=" + _Div3AirportSeqID);
			sb.append(",_Div3WheelsOn=" + _Div3WheelsOn);
			sb.append(",_Div3TotalGTime=" + _Div3TotalGTime);
			sb.append(",_Div3LongestGTime=" + _Div3LongestGTime);
			sb.append(",_Div3WheelsOff=" + _Div3WheelsOff);
			sb.append(",_Div3TailNum=" + _Div3TailNum);
			sb.append(",_Div4Airport=" + _Div4Airport);
			sb.append(",_Div4AirportID=" + _Div4AirportID);
			sb.append(",_Div4AirportSeqID=" + _Div4AirportSeqID);
			sb.append(",_Div4WheelsOn=" + _Div4WheelsOn);
			sb.append(",_Div4TotalGTime=" + _Div4TotalGTime);
			sb.append(",_Div4LongestGTime=" + _Div4LongestGTime);
			sb.append(",_Div4WheelsOff=" + _Div4WheelsOff);
			sb.append(",_Div4TailNum=" + _Div4TailNum);
			sb.append(",_Div5Airport=" + _Div5Airport);
			sb.append(",_Div5AirportID=" + _Div5AirportID);
			sb.append(",_Div5AirportSeqID=" + _Div5AirportSeqID);
			sb.append(",_Div5WheelsOn=" + _Div5WheelsOn);
			sb.append(",_Div5TotalGTime=" + _Div5TotalGTime);
			sb.append(",_Div5LongestGTime=" + _Div5LongestGTime);
			sb.append(",_Div5WheelsOff=" + _Div5WheelsOff);
			sb.append(",_Div5TailNum=" + _Div5TailNum);
			sb.append(",_Duplicate=" + _Duplicate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				factStruct fact = new factStruct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "fact");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/test_test_tesrt.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("FlightId");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("AirlineId");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DepDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ArrDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CarrierDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("WeatherDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NASDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("SecurityDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("LateAircraftDelay");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				factStruct fact_tmp = new factStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_1 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_1 = 0;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Year = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Year", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._Year = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 1;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Quarter = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Quarter", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._Quarter = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 2;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Month = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Month", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._Month = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 3;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DayofMonth = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DayofMonth", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DayofMonth = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 4;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DayOfWeek = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DayOfWeek", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DayOfWeek = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 5;

						row1._FlightDate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 6;

						row1._Marketing_Airline_Network = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 7;

						row1._Operated_or_Branded_Code_Share_Partners = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 8;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DOT_ID_Marketing_Airline", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DOT_ID_Marketing_Airline = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 9;

						row1._IATA_Code_Marketing_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 10;

						row1._Flight_Number_Marketing_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 11;

						row1._Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 12;

						row1._DOT_ID_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 13;

						row1._IATA_Code_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 14;

						row1._Flight_Num_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 15;

						row1._Operating_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 16;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DOT_ID_Operating_Airline", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DOT_ID_Operating_Airline = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 17;

						row1._IATA_Code_Operating_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 18;

						row1._Tail_Number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 19;

						row1._Flight_Number_Operating_Airline = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 20;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._OriginAirportID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginAirportID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._OriginAirportID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 21;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._OriginAirportSeqID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginAirportSeqID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._OriginAirportSeqID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 22;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._OriginCityMarketID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginCityMarketID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._OriginCityMarketID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 23;

						row1._Origin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 24;

						row1._OriginCityName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 25;

						row1._OriginState = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 26;

						row1._OriginStateFips = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 27;

						row1._OriginStateName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 28;

						row1._OriginWac = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 29;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DestAirportID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestAirportID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DestAirportID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 30;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DestAirportSeqID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestAirportSeqID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DestAirportSeqID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 31;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DestCityMarketID = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestCityMarketID", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DestCityMarketID = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 32;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Dest = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Dest", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._Dest = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 33;

						row1._DestCityName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 34;

						row1._DestState = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 35;

						row1._DestStateFips = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 36;

						row1._DestStateName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 37;

						row1._DestWac = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 38;

						row1._CRSDepTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 39;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DepTime = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DepTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._DepTime = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 40;

						row1._DepDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 41;

						row1._DepDelayMinutes = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 42;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DepDel15 = ParserUtils.parseTo_Double(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DepDel15", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DepDel15 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 43;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DepartureDelayGroups = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DepartureDelayGroups", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DepartureDelayGroups = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 44;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DepTimeBlk = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DepTimeBlk", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DepTimeBlk = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 45;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._TaxiOut = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_TaxiOut", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._TaxiOut = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 46;

						row1._WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 47;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._WheelsOn = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_WheelsOn", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._WheelsOn = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 48;

						row1._TaxiIn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 49;

						row1._CRSArrTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 50;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._ArrTime = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ArrTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._ArrTime = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 51;

						row1._ArrDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 52;

						row1._ArrDelayMinutes = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 53;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._ArrDel15 = ParserUtils.parseTo_Double(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ArrDel15", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._ArrDel15 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 54;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._ArrivalDelayGroups = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ArrivalDelayGroups", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._ArrivalDelayGroups = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 55;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._ArrTimeBlk = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ArrTimeBlk", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._ArrTimeBlk = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 56;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Cancelled = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Cancelled", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._Cancelled = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 57;

						row1._CancellationCode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 58;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Diverted = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Diverted", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._Diverted = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 59;

						row1._CRSElapsedTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 60;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._ActualElapsedTime = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ActualElapsedTime", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._ActualElapsedTime = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 61;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._AirTime = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_AirTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._AirTime = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 62;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Flights = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Flights", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
							}

						} else {

							row1._Flights = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 63;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._Distance = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Distance", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._Distance = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 64;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DistanceGroup = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DistanceGroup", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DistanceGroup = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 65;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._CarrierDelay = ParserUtils.parseTo_Float(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_CarrierDelay", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._CarrierDelay = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 66;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._WeatherDelay = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_WeatherDelay", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._WeatherDelay = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 67;

						row1._NASDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 68;

						row1._SecurityDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 69;

						row1._LateAircraftDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 70;

						row1._FirstDepTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 71;

						row1._TotalAddGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 72;

						row1._LongestAddGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 73;

						row1._DivAirportLandings = fid_tFileInputDelimited_1
								.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 74;

						row1._DivReachedDest = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 75;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1._DivActualElapsedTime = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
										ex_tFileInputDelimited_1.getMessage());
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DivActualElapsedTime", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1._DivActualElapsedTime = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 76;

						row1._DivArrDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 77;

						row1._DivDistance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 78;

						row1._Div1Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 79;

						row1._Div1AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 80;

						row1._Div1AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 81;

						row1._Div1WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 82;

						row1._Div1TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 83;

						row1._Div1LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 84;

						row1._Div1WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 85;

						row1._Div1TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 86;

						row1._Div2Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 87;

						row1._Div2AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 88;

						row1._Div2AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 89;

						row1._Div2WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 90;

						row1._Div2TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 91;

						row1._Div2LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 92;

						row1._Div2WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 93;

						row1._Div2TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 94;

						row1._Div3Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 95;

						row1._Div3AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 96;

						row1._Div3AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 97;

						row1._Div3WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 98;

						row1._Div3TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 99;

						row1._Div3LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_1 = 100;

						row1._Div3WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 101;

						row1._Div3TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 102;

						row1._Div4Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 103;

						row1._Div4AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 104;

						row1._Div4AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 105;

						row1._Div4WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 106;

						row1._Div4TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 107;

						row1._Div4LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 108;

						row1._Div4WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 109;

						row1._Div4TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 110;

						row1._Div5Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 111;

						row1._Div5AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 112;

						row1._Div5AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 113;

						row1._Div5WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 114;

						row1._Div5TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 115;

						row1._Div5LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 116;

						row1._Div5WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 117;

						row1._Div5TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 118;

						row1._Duplicate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_1, row1);

						valueToConn_1(fid_tFileInputDelimited_1, row1);

					}

				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/felip/Downloads/flights (2).csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/felip/Downloads/flights (2).csv", "ISO-8859-15", ",", "\n", true, 1, 0,
								limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.Code = row1._IATA_Code_Operating_Airline.replaceAll("\"", "");

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

								if (!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_1 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.Code = '" + row2HashKey.Code
								// + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								fact = null;

								if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'fact'
									fact_tmp.FlightId = Numeric.sequence("FactSeq", 1, 1);
									fact_tmp.AirlineId = row2.AirlineId;
									fact_tmp.DepDelay = row1._DepDelay;
									fact_tmp.ArrDelay = row1._ArrDelay;
									fact_tmp.CarrierDelay = row1._CarrierDelay;
									fact_tmp.WeatherDelay = row1._WeatherDelay;
									fact_tmp.NASDelay = row1._NASDelay;
									fact_tmp.SecurityDelay = row1._SecurityDelay;
									fact_tmp.LateAircraftDelay = row1._LateAircraftDelay;
									fact = fact_tmp;
								} // closing inner join bracket (2)
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "fact"
							if (fact != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "fact"

									);
								}

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (fact.FlightId != null) {
									sb_tFileOutputDelimited_1.append(fact.FlightId);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.AirlineId != null) {
									sb_tFileOutputDelimited_1.append(fact.AirlineId);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.DepDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.DepDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.ArrDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.ArrDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.CarrierDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.CarrierDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.WeatherDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.WeatherDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.NASDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.NASDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.SecurityDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.SecurityDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
								if (fact.LateAircraftDelay != null) {
									sb_tFileOutputDelimited_1.append(fact.LateAircraftDelay);
								}
								sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								/**
								 * [tFileOutputDelimited_1 process_data_end ] stop
								 */

							} // End of branch "fact"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/felip/Downloads/flights (2).csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "fact");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_PARAVOLAR_test_2 = new byte[0];
		static byte[] commonByteArray_PARAVOLAR_test_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer AirlineId;

		public Integer getAirlineId() {
			return this.AirlineId;
		}

		public String Code;

		public String getCode() {
			return this.Code;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Code == null) ? 0 : this.Code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.Code == null) {
				if (other.Code != null)
					return false;

			} else if (!this.Code.equals(other.Code))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.AirlineId = this.AirlineId;
			other.Code = this.Code;
			other.Description = this.Description;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.Code = this.Code;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PARAVOLAR_test_2.length) {
					if (length < 1024 && commonByteArray_PARAVOLAR_test_2.length == 0) {
						commonByteArray_PARAVOLAR_test_2 = new byte[1024];
					} else {
						commonByteArray_PARAVOLAR_test_2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_PARAVOLAR_test_2, 0, length);
				strReturn = new String(commonByteArray_PARAVOLAR_test_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this.Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_PARAVOLAR_test_2) {

				try {

					int length = 0;

					this.Code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AirlineId = readInteger(dis, ois);

				this.Description = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.AirlineId = readInteger(dis, objectIn);

				this.Description = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.AirlineId, dos, oos);

				writeString(this.Description, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.AirlineId, dos, objectOut);

				writeString(this.Description, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AirlineId=" + String.valueOf(AirlineId));
			sb.append(",Code=" + Code);
			sb.append(",Description=" + Description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Code, other.Code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/felip/Downloads/DimAirlines (5).csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/felip/Downloads/DimAirlines (5).csv", "ISO-8859-15", ";", "\n", true, 1, 0,
								limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.AirlineId = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",
											ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"AirlineId", "row2", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row2.AirlineId = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.Code = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.Description = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.AirlineId = row2.AirlineId;

							row2_HashRow.Code = row2.Code;

							row2_HashRow.Description = row2.Description;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/felip/Downloads/DimAirlines (5).csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final test_2 test_2Class = new test_2();

		int exitCode = test_2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = test_2.class.getClassLoader()
					.getResourceAsStream("paravolar/test_2_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = test_2.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : test_2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 263942 characters generated by Talend Open Studio for Data Integration on the
 * November 6, 2022 at 7:05:54 PM CST
 ************************************************************************************************/