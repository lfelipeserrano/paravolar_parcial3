// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package paravolar.dimtimeperiod_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DimTimePeriod Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class DimTimePeriod implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DimTimePeriod";
	private final String projectName = "PARAVOLAR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DimTimePeriod.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DimTimePeriod.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class dimensionStruct implements routines.system.IPersistableRow<dimensionStruct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimTimePeriod = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimTimePeriod = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer timePeriodId;

				public Integer getTimePeriodId () {
					return this.timePeriodId;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer quarter;

				public Integer getQuarter () {
					return this.quarter;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer dayOfMonth;

				public Integer getDayOfMonth () {
					return this.dayOfMonth;
				}
				
			    public Integer dayOfWeek;

				public Integer getDayOfWeek () {
					return this.dayOfWeek;
				}
				
			    public String flightDate;

				public String getFlightDate () {
					return this.flightDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.timePeriodId == null) ? 0 : this.timePeriodId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final dimensionStruct other = (dimensionStruct) obj;
		
						if (this.timePeriodId == null) {
							if (other.timePeriodId != null)
								return false;
						
						} else if (!this.timePeriodId.equals(other.timePeriodId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(dimensionStruct other) {

		other.timePeriodId = this.timePeriodId;
	            other.year = this.year;
	            other.quarter = this.quarter;
	            other.month = this.month;
	            other.dayOfMonth = this.dayOfMonth;
	            other.dayOfWeek = this.dayOfWeek;
	            other.flightDate = this.flightDate;
	            
	}

	public void copyKeysDataTo(dimensionStruct other) {

		other.timePeriodId = this.timePeriodId;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this.timePeriodId = readInteger(dis);
					
						this.year = readInteger(dis);
					
						this.quarter = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.dayOfMonth = readInteger(dis);
					
						this.dayOfWeek = readInteger(dis);
					
					this.flightDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this.timePeriodId = readInteger(dis);
					
						this.year = readInteger(dis);
					
						this.quarter = readInteger(dis);
					
						this.month = readInteger(dis);
					
						this.dayOfMonth = readInteger(dis);
					
						this.dayOfWeek = readInteger(dis);
					
					this.flightDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.timePeriodId,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.quarter,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.dayOfMonth,dos);
					
					// Integer
				
						writeInteger(this.dayOfWeek,dos);
					
					// String
				
						writeString(this.flightDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.timePeriodId,dos);
					
					// Integer
				
						writeInteger(this.year,dos);
					
					// Integer
				
						writeInteger(this.quarter,dos);
					
					// Integer
				
						writeInteger(this.month,dos);
					
					// Integer
				
						writeInteger(this.dayOfMonth,dos);
					
					// Integer
				
						writeInteger(this.dayOfWeek,dos);
					
					// String
				
						writeString(this.flightDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timePeriodId="+String.valueOf(timePeriodId));
		sb.append(",year="+String.valueOf(year));
		sb.append(",quarter="+String.valueOf(quarter));
		sb.append(",month="+String.valueOf(month));
		sb.append(",dayOfMonth="+String.valueOf(dayOfMonth));
		sb.append(",dayOfWeek="+String.valueOf(dayOfWeek));
		sb.append(",flightDate="+flightDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dimensionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.timePeriodId, other.timePeriodId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimTimePeriod = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimTimePeriod = new byte[0];

	
			    public Integer _Year;

				public Integer get_Year () {
					return this._Year;
				}
				
			    public Integer _Quarter;

				public Integer get_Quarter () {
					return this._Quarter;
				}
				
			    public Integer _Month;

				public Integer get_Month () {
					return this._Month;
				}
				
			    public Integer _DayofMonth;

				public Integer get_DayofMonth () {
					return this._DayofMonth;
				}
				
			    public Integer _DayOfWeek;

				public Integer get_DayOfWeek () {
					return this._DayOfWeek;
				}
				
			    public String _FlightDate;

				public String get_FlightDate () {
					return this._FlightDate;
				}
				
			    public String _Marketing_Airline_Network;

				public String get_Marketing_Airline_Network () {
					return this._Marketing_Airline_Network;
				}
				
			    public String _Operated_or_Branded_Code_Share_Partners;

				public String get_Operated_or_Branded_Code_Share_Partners () {
					return this._Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer _DOT_ID_Marketing_Airline;

				public Integer get_DOT_ID_Marketing_Airline () {
					return this._DOT_ID_Marketing_Airline;
				}
				
			    public String _IATA_Code_Marketing_Airline;

				public String get_IATA_Code_Marketing_Airline () {
					return this._IATA_Code_Marketing_Airline;
				}
				
			    public String _Flight_Number_Marketing_Airline;

				public String get_Flight_Number_Marketing_Airline () {
					return this._Flight_Number_Marketing_Airline;
				}
				
			    public String _Originally_Scheduled_Code_Share_Airline;

				public String get_Originally_Scheduled_Code_Share_Airline () {
					return this._Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String get_DOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this._DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String get_IATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this._IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String get_Flight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this._Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Operating_Airline;

				public String get_Operating_Airline () {
					return this._Operating_Airline;
				}
				
			    public Integer _DOT_ID_Operating_Airline;

				public Integer get_DOT_ID_Operating_Airline () {
					return this._DOT_ID_Operating_Airline;
				}
				
			    public String _IATA_Code_Operating_Airline;

				public String get_IATA_Code_Operating_Airline () {
					return this._IATA_Code_Operating_Airline;
				}
				
			    public String _Tail_Number;

				public String get_Tail_Number () {
					return this._Tail_Number;
				}
				
			    public String _Flight_Number_Operating_Airline;

				public String get_Flight_Number_Operating_Airline () {
					return this._Flight_Number_Operating_Airline;
				}
				
			    public Integer _OriginAirportID;

				public Integer get_OriginAirportID () {
					return this._OriginAirportID;
				}
				
			    public Integer _OriginAirportSeqID;

				public Integer get_OriginAirportSeqID () {
					return this._OriginAirportSeqID;
				}
				
			    public Integer _OriginCityMarketID;

				public Integer get_OriginCityMarketID () {
					return this._OriginCityMarketID;
				}
				
			    public String _Origin;

				public String get_Origin () {
					return this._Origin;
				}
				
			    public String _OriginCityName;

				public String get_OriginCityName () {
					return this._OriginCityName;
				}
				
			    public String _OriginState;

				public String get_OriginState () {
					return this._OriginState;
				}
				
			    public String _OriginStateFips;

				public String get_OriginStateFips () {
					return this._OriginStateFips;
				}
				
			    public String _OriginStateName;

				public String get_OriginStateName () {
					return this._OriginStateName;
				}
				
			    public String _OriginWac;

				public String get_OriginWac () {
					return this._OriginWac;
				}
				
			    public Integer _DestAirportID;

				public Integer get_DestAirportID () {
					return this._DestAirportID;
				}
				
			    public Integer _DestAirportSeqID;

				public Integer get_DestAirportSeqID () {
					return this._DestAirportSeqID;
				}
				
			    public Integer _DestCityMarketID;

				public Integer get_DestCityMarketID () {
					return this._DestCityMarketID;
				}
				
			    public Integer _Dest;

				public Integer get_Dest () {
					return this._Dest;
				}
				
			    public String _DestCityName;

				public String get_DestCityName () {
					return this._DestCityName;
				}
				
			    public String _DestState;

				public String get_DestState () {
					return this._DestState;
				}
				
			    public String _DestStateFips;

				public String get_DestStateFips () {
					return this._DestStateFips;
				}
				
			    public String _DestStateName;

				public String get_DestStateName () {
					return this._DestStateName;
				}
				
			    public String _DestWac;

				public String get_DestWac () {
					return this._DestWac;
				}
				
			    public String _CRSDepTime;

				public String get_CRSDepTime () {
					return this._CRSDepTime;
				}
				
			    public Integer _DepTime;

				public Integer get_DepTime () {
					return this._DepTime;
				}
				
			    public String _DepDelay;

				public String get_DepDelay () {
					return this._DepDelay;
				}
				
			    public String _DepDelayMinutes;

				public String get_DepDelayMinutes () {
					return this._DepDelayMinutes;
				}
				
			    public String _DepDel15;

				public String get_DepDel15 () {
					return this._DepDel15;
				}
				
			    public String _DepartureDelayGroups;

				public String get_DepartureDelayGroups () {
					return this._DepartureDelayGroups;
				}
				
			    public String _DepTimeBlk;

				public String get_DepTimeBlk () {
					return this._DepTimeBlk;
				}
				
			    public String _TaxiOut;

				public String get_TaxiOut () {
					return this._TaxiOut;
				}
				
			    public String _WheelsOff;

				public String get_WheelsOff () {
					return this._WheelsOff;
				}
				
			    public String _WheelsOn;

				public String get_WheelsOn () {
					return this._WheelsOn;
				}
				
			    public String _TaxiIn;

				public String get_TaxiIn () {
					return this._TaxiIn;
				}
				
			    public String _CRSArrTime;

				public String get_CRSArrTime () {
					return this._CRSArrTime;
				}
				
			    public String _ArrTime;

				public String get_ArrTime () {
					return this._ArrTime;
				}
				
			    public String _ArrDelay;

				public String get_ArrDelay () {
					return this._ArrDelay;
				}
				
			    public String _ArrDelayMinutes;

				public String get_ArrDelayMinutes () {
					return this._ArrDelayMinutes;
				}
				
			    public String _ArrDel15;

				public String get_ArrDel15 () {
					return this._ArrDel15;
				}
				
			    public String _ArrivalDelayGroups;

				public String get_ArrivalDelayGroups () {
					return this._ArrivalDelayGroups;
				}
				
			    public String _ArrTimeBlk;

				public String get_ArrTimeBlk () {
					return this._ArrTimeBlk;
				}
				
			    public String _Cancelled;

				public String get_Cancelled () {
					return this._Cancelled;
				}
				
			    public String _CancellationCode;

				public String get_CancellationCode () {
					return this._CancellationCode;
				}
				
			    public Float _Diverted;

				public Float get_Diverted () {
					return this._Diverted;
				}
				
			    public String _CRSElapsedTime;

				public String get_CRSElapsedTime () {
					return this._CRSElapsedTime;
				}
				
			    public Float _ActualElapsedTime;

				public Float get_ActualElapsedTime () {
					return this._ActualElapsedTime;
				}
				
			    public Float _AirTime;

				public Float get_AirTime () {
					return this._AirTime;
				}
				
			    public String _Flights;

				public String get_Flights () {
					return this._Flights;
				}
				
			    public String _Distance;

				public String get_Distance () {
					return this._Distance;
				}
				
			    public Float _DistanceGroup;

				public Float get_DistanceGroup () {
					return this._DistanceGroup;
				}
				
			    public Float _CarrierDelay;

				public Float get_CarrierDelay () {
					return this._CarrierDelay;
				}
				
			    public Integer _WeatherDelay;

				public Integer get_WeatherDelay () {
					return this._WeatherDelay;
				}
				
			    public String _NASDelay;

				public String get_NASDelay () {
					return this._NASDelay;
				}
				
			    public String _SecurityDelay;

				public String get_SecurityDelay () {
					return this._SecurityDelay;
				}
				
			    public String _LateAircraftDelay;

				public String get_LateAircraftDelay () {
					return this._LateAircraftDelay;
				}
				
			    public String _FirstDepTime;

				public String get_FirstDepTime () {
					return this._FirstDepTime;
				}
				
			    public String _TotalAddGTime;

				public String get_TotalAddGTime () {
					return this._TotalAddGTime;
				}
				
			    public String _LongestAddGTime;

				public String get_LongestAddGTime () {
					return this._LongestAddGTime;
				}
				
			    public String _DivAirportLandings;

				public String get_DivAirportLandings () {
					return this._DivAirportLandings;
				}
				
			    public String _DivReachedDest;

				public String get_DivReachedDest () {
					return this._DivReachedDest;
				}
				
			    public Integer _DivActualElapsedTime;

				public Integer get_DivActualElapsedTime () {
					return this._DivActualElapsedTime;
				}
				
			    public String _DivArrDelay;

				public String get_DivArrDelay () {
					return this._DivArrDelay;
				}
				
			    public String _DivDistance;

				public String get_DivDistance () {
					return this._DivDistance;
				}
				
			    public String _Div1Airport;

				public String get_Div1Airport () {
					return this._Div1Airport;
				}
				
			    public String _Div1AirportID;

				public String get_Div1AirportID () {
					return this._Div1AirportID;
				}
				
			    public String _Div1AirportSeqID;

				public String get_Div1AirportSeqID () {
					return this._Div1AirportSeqID;
				}
				
			    public String _Div1WheelsOn;

				public String get_Div1WheelsOn () {
					return this._Div1WheelsOn;
				}
				
			    public String _Div1TotalGTime;

				public String get_Div1TotalGTime () {
					return this._Div1TotalGTime;
				}
				
			    public String _Div1LongestGTime;

				public String get_Div1LongestGTime () {
					return this._Div1LongestGTime;
				}
				
			    public String _Div1WheelsOff;

				public String get_Div1WheelsOff () {
					return this._Div1WheelsOff;
				}
				
			    public String _Div1TailNum;

				public String get_Div1TailNum () {
					return this._Div1TailNum;
				}
				
			    public String _Div2Airport;

				public String get_Div2Airport () {
					return this._Div2Airport;
				}
				
			    public String _Div2AirportID;

				public String get_Div2AirportID () {
					return this._Div2AirportID;
				}
				
			    public String _Div2AirportSeqID;

				public String get_Div2AirportSeqID () {
					return this._Div2AirportSeqID;
				}
				
			    public String _Div2WheelsOn;

				public String get_Div2WheelsOn () {
					return this._Div2WheelsOn;
				}
				
			    public String _Div2TotalGTime;

				public String get_Div2TotalGTime () {
					return this._Div2TotalGTime;
				}
				
			    public String _Div2LongestGTime;

				public String get_Div2LongestGTime () {
					return this._Div2LongestGTime;
				}
				
			    public String _Div2WheelsOff;

				public String get_Div2WheelsOff () {
					return this._Div2WheelsOff;
				}
				
			    public String _Div2TailNum;

				public String get_Div2TailNum () {
					return this._Div2TailNum;
				}
				
			    public String _Div3Airport;

				public String get_Div3Airport () {
					return this._Div3Airport;
				}
				
			    public String _Div3AirportID;

				public String get_Div3AirportID () {
					return this._Div3AirportID;
				}
				
			    public String _Div3AirportSeqID;

				public String get_Div3AirportSeqID () {
					return this._Div3AirportSeqID;
				}
				
			    public String _Div3WheelsOn;

				public String get_Div3WheelsOn () {
					return this._Div3WheelsOn;
				}
				
			    public String _Div3TotalGTime;

				public String get_Div3TotalGTime () {
					return this._Div3TotalGTime;
				}
				
			    public String _Div3LongestGTime;

				public String get_Div3LongestGTime () {
					return this._Div3LongestGTime;
				}
				
			    public String _Div3WheelsOff;

				public String get_Div3WheelsOff () {
					return this._Div3WheelsOff;
				}
				
			    public String _Div3TailNum;

				public String get_Div3TailNum () {
					return this._Div3TailNum;
				}
				
			    public String _Div4Airport;

				public String get_Div4Airport () {
					return this._Div4Airport;
				}
				
			    public String _Div4AirportID;

				public String get_Div4AirportID () {
					return this._Div4AirportID;
				}
				
			    public String _Div4AirportSeqID;

				public String get_Div4AirportSeqID () {
					return this._Div4AirportSeqID;
				}
				
			    public String _Div4WheelsOn;

				public String get_Div4WheelsOn () {
					return this._Div4WheelsOn;
				}
				
			    public String _Div4TotalGTime;

				public String get_Div4TotalGTime () {
					return this._Div4TotalGTime;
				}
				
			    public String _Div4LongestGTime;

				public String get_Div4LongestGTime () {
					return this._Div4LongestGTime;
				}
				
			    public String _Div4WheelsOff;

				public String get_Div4WheelsOff () {
					return this._Div4WheelsOff;
				}
				
			    public String _Div4TailNum;

				public String get_Div4TailNum () {
					return this._Div4TailNum;
				}
				
			    public String _Div5Airport;

				public String get_Div5Airport () {
					return this._Div5Airport;
				}
				
			    public String _Div5AirportID;

				public String get_Div5AirportID () {
					return this._Div5AirportID;
				}
				
			    public String _Div5AirportSeqID;

				public String get_Div5AirportSeqID () {
					return this._Div5AirportSeqID;
				}
				
			    public String _Div5WheelsOn;

				public String get_Div5WheelsOn () {
					return this._Div5WheelsOn;
				}
				
			    public String _Div5TotalGTime;

				public String get_Div5TotalGTime () {
					return this._Div5TotalGTime;
				}
				
			    public String _Div5LongestGTime;

				public String get_Div5LongestGTime () {
					return this._Div5LongestGTime;
				}
				
			    public String _Div5WheelsOff;

				public String get_Div5WheelsOff () {
					return this._Div5WheelsOff;
				}
				
			    public String _Div5TailNum;

				public String get_Div5TailNum () {
					return this._Div5TailNum;
				}
				
			    public String _Duplicate;

				public String get_Duplicate () {
					return this._Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_Year="+String.valueOf(_Year));
		sb.append(",_Quarter="+String.valueOf(_Quarter));
		sb.append(",_Month="+String.valueOf(_Month));
		sb.append(",_DayofMonth="+String.valueOf(_DayofMonth));
		sb.append(",_DayOfWeek="+String.valueOf(_DayOfWeek));
		sb.append(",_FlightDate="+_FlightDate);
		sb.append(",_Marketing_Airline_Network="+_Marketing_Airline_Network);
		sb.append(",_Operated_or_Branded_Code_Share_Partners="+_Operated_or_Branded_Code_Share_Partners);
		sb.append(",_DOT_ID_Marketing_Airline="+String.valueOf(_DOT_ID_Marketing_Airline));
		sb.append(",_IATA_Code_Marketing_Airline="+_IATA_Code_Marketing_Airline);
		sb.append(",_Flight_Number_Marketing_Airline="+_Flight_Number_Marketing_Airline);
		sb.append(",_Originally_Scheduled_Code_Share_Airline="+_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_DOT_ID_Originally_Scheduled_Code_Share_Airline="+_DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_IATA_Code_Originally_Scheduled_Code_Share_Airline="+_IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Flight_Num_Originally_Scheduled_Code_Share_Airline="+_Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Operating_Airline="+_Operating_Airline);
		sb.append(",_DOT_ID_Operating_Airline="+String.valueOf(_DOT_ID_Operating_Airline));
		sb.append(",_IATA_Code_Operating_Airline="+_IATA_Code_Operating_Airline);
		sb.append(",_Tail_Number="+_Tail_Number);
		sb.append(",_Flight_Number_Operating_Airline="+_Flight_Number_Operating_Airline);
		sb.append(",_OriginAirportID="+String.valueOf(_OriginAirportID));
		sb.append(",_OriginAirportSeqID="+String.valueOf(_OriginAirportSeqID));
		sb.append(",_OriginCityMarketID="+String.valueOf(_OriginCityMarketID));
		sb.append(",_Origin="+_Origin);
		sb.append(",_OriginCityName="+_OriginCityName);
		sb.append(",_OriginState="+_OriginState);
		sb.append(",_OriginStateFips="+_OriginStateFips);
		sb.append(",_OriginStateName="+_OriginStateName);
		sb.append(",_OriginWac="+_OriginWac);
		sb.append(",_DestAirportID="+String.valueOf(_DestAirportID));
		sb.append(",_DestAirportSeqID="+String.valueOf(_DestAirportSeqID));
		sb.append(",_DestCityMarketID="+String.valueOf(_DestCityMarketID));
		sb.append(",_Dest="+String.valueOf(_Dest));
		sb.append(",_DestCityName="+_DestCityName);
		sb.append(",_DestState="+_DestState);
		sb.append(",_DestStateFips="+_DestStateFips);
		sb.append(",_DestStateName="+_DestStateName);
		sb.append(",_DestWac="+_DestWac);
		sb.append(",_CRSDepTime="+_CRSDepTime);
		sb.append(",_DepTime="+String.valueOf(_DepTime));
		sb.append(",_DepDelay="+_DepDelay);
		sb.append(",_DepDelayMinutes="+_DepDelayMinutes);
		sb.append(",_DepDel15="+_DepDel15);
		sb.append(",_DepartureDelayGroups="+_DepartureDelayGroups);
		sb.append(",_DepTimeBlk="+_DepTimeBlk);
		sb.append(",_TaxiOut="+_TaxiOut);
		sb.append(",_WheelsOff="+_WheelsOff);
		sb.append(",_WheelsOn="+_WheelsOn);
		sb.append(",_TaxiIn="+_TaxiIn);
		sb.append(",_CRSArrTime="+_CRSArrTime);
		sb.append(",_ArrTime="+_ArrTime);
		sb.append(",_ArrDelay="+_ArrDelay);
		sb.append(",_ArrDelayMinutes="+_ArrDelayMinutes);
		sb.append(",_ArrDel15="+_ArrDel15);
		sb.append(",_ArrivalDelayGroups="+_ArrivalDelayGroups);
		sb.append(",_ArrTimeBlk="+_ArrTimeBlk);
		sb.append(",_Cancelled="+_Cancelled);
		sb.append(",_CancellationCode="+_CancellationCode);
		sb.append(",_Diverted="+String.valueOf(_Diverted));
		sb.append(",_CRSElapsedTime="+_CRSElapsedTime);
		sb.append(",_ActualElapsedTime="+String.valueOf(_ActualElapsedTime));
		sb.append(",_AirTime="+String.valueOf(_AirTime));
		sb.append(",_Flights="+_Flights);
		sb.append(",_Distance="+_Distance);
		sb.append(",_DistanceGroup="+String.valueOf(_DistanceGroup));
		sb.append(",_CarrierDelay="+String.valueOf(_CarrierDelay));
		sb.append(",_WeatherDelay="+String.valueOf(_WeatherDelay));
		sb.append(",_NASDelay="+_NASDelay);
		sb.append(",_SecurityDelay="+_SecurityDelay);
		sb.append(",_LateAircraftDelay="+_LateAircraftDelay);
		sb.append(",_FirstDepTime="+_FirstDepTime);
		sb.append(",_TotalAddGTime="+_TotalAddGTime);
		sb.append(",_LongestAddGTime="+_LongestAddGTime);
		sb.append(",_DivAirportLandings="+_DivAirportLandings);
		sb.append(",_DivReachedDest="+_DivReachedDest);
		sb.append(",_DivActualElapsedTime="+String.valueOf(_DivActualElapsedTime));
		sb.append(",_DivArrDelay="+_DivArrDelay);
		sb.append(",_DivDistance="+_DivDistance);
		sb.append(",_Div1Airport="+_Div1Airport);
		sb.append(",_Div1AirportID="+_Div1AirportID);
		sb.append(",_Div1AirportSeqID="+_Div1AirportSeqID);
		sb.append(",_Div1WheelsOn="+_Div1WheelsOn);
		sb.append(",_Div1TotalGTime="+_Div1TotalGTime);
		sb.append(",_Div1LongestGTime="+_Div1LongestGTime);
		sb.append(",_Div1WheelsOff="+_Div1WheelsOff);
		sb.append(",_Div1TailNum="+_Div1TailNum);
		sb.append(",_Div2Airport="+_Div2Airport);
		sb.append(",_Div2AirportID="+_Div2AirportID);
		sb.append(",_Div2AirportSeqID="+_Div2AirportSeqID);
		sb.append(",_Div2WheelsOn="+_Div2WheelsOn);
		sb.append(",_Div2TotalGTime="+_Div2TotalGTime);
		sb.append(",_Div2LongestGTime="+_Div2LongestGTime);
		sb.append(",_Div2WheelsOff="+_Div2WheelsOff);
		sb.append(",_Div2TailNum="+_Div2TailNum);
		sb.append(",_Div3Airport="+_Div3Airport);
		sb.append(",_Div3AirportID="+_Div3AirportID);
		sb.append(",_Div3AirportSeqID="+_Div3AirportSeqID);
		sb.append(",_Div3WheelsOn="+_Div3WheelsOn);
		sb.append(",_Div3TotalGTime="+_Div3TotalGTime);
		sb.append(",_Div3LongestGTime="+_Div3LongestGTime);
		sb.append(",_Div3WheelsOff="+_Div3WheelsOff);
		sb.append(",_Div3TailNum="+_Div3TailNum);
		sb.append(",_Div4Airport="+_Div4Airport);
		sb.append(",_Div4AirportID="+_Div4AirportID);
		sb.append(",_Div4AirportSeqID="+_Div4AirportSeqID);
		sb.append(",_Div4WheelsOn="+_Div4WheelsOn);
		sb.append(",_Div4TotalGTime="+_Div4TotalGTime);
		sb.append(",_Div4LongestGTime="+_Div4LongestGTime);
		sb.append(",_Div4WheelsOff="+_Div4WheelsOff);
		sb.append(",_Div4TailNum="+_Div4TailNum);
		sb.append(",_Div5Airport="+_Div5Airport);
		sb.append(",_Div5AirportID="+_Div5AirportID);
		sb.append(",_Div5AirportSeqID="+_Div5AirportSeqID);
		sb.append(",_Div5WheelsOn="+_Div5WheelsOn);
		sb.append(",_Div5TotalGTime="+_Div5TotalGTime);
		sb.append(",_Div5LongestGTime="+_Div5LongestGTime);
		sb.append(",_Div5WheelsOff="+_Div5WheelsOff);
		sb.append(",_Div5TailNum="+_Div5TailNum);
		sb.append(",_Duplicate="+_Duplicate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimTimePeriod = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimTimePeriod = new byte[0];

	
			    public Integer _Year;

				public Integer get_Year () {
					return this._Year;
				}
				
			    public Integer _Quarter;

				public Integer get_Quarter () {
					return this._Quarter;
				}
				
			    public Integer _Month;

				public Integer get_Month () {
					return this._Month;
				}
				
			    public Integer _DayofMonth;

				public Integer get_DayofMonth () {
					return this._DayofMonth;
				}
				
			    public Integer _DayOfWeek;

				public Integer get_DayOfWeek () {
					return this._DayOfWeek;
				}
				
			    public String _FlightDate;

				public String get_FlightDate () {
					return this._FlightDate;
				}
				
			    public String _Marketing_Airline_Network;

				public String get_Marketing_Airline_Network () {
					return this._Marketing_Airline_Network;
				}
				
			    public String _Operated_or_Branded_Code_Share_Partners;

				public String get_Operated_or_Branded_Code_Share_Partners () {
					return this._Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer _DOT_ID_Marketing_Airline;

				public Integer get_DOT_ID_Marketing_Airline () {
					return this._DOT_ID_Marketing_Airline;
				}
				
			    public String _IATA_Code_Marketing_Airline;

				public String get_IATA_Code_Marketing_Airline () {
					return this._IATA_Code_Marketing_Airline;
				}
				
			    public String _Flight_Number_Marketing_Airline;

				public String get_Flight_Number_Marketing_Airline () {
					return this._Flight_Number_Marketing_Airline;
				}
				
			    public String _Originally_Scheduled_Code_Share_Airline;

				public String get_Originally_Scheduled_Code_Share_Airline () {
					return this._Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String get_DOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this._DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String get_IATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this._IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String get_Flight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this._Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Operating_Airline;

				public String get_Operating_Airline () {
					return this._Operating_Airline;
				}
				
			    public Integer _DOT_ID_Operating_Airline;

				public Integer get_DOT_ID_Operating_Airline () {
					return this._DOT_ID_Operating_Airline;
				}
				
			    public String _IATA_Code_Operating_Airline;

				public String get_IATA_Code_Operating_Airline () {
					return this._IATA_Code_Operating_Airline;
				}
				
			    public String _Tail_Number;

				public String get_Tail_Number () {
					return this._Tail_Number;
				}
				
			    public String _Flight_Number_Operating_Airline;

				public String get_Flight_Number_Operating_Airline () {
					return this._Flight_Number_Operating_Airline;
				}
				
			    public Integer _OriginAirportID;

				public Integer get_OriginAirportID () {
					return this._OriginAirportID;
				}
				
			    public Integer _OriginAirportSeqID;

				public Integer get_OriginAirportSeqID () {
					return this._OriginAirportSeqID;
				}
				
			    public Integer _OriginCityMarketID;

				public Integer get_OriginCityMarketID () {
					return this._OriginCityMarketID;
				}
				
			    public String _Origin;

				public String get_Origin () {
					return this._Origin;
				}
				
			    public String _OriginCityName;

				public String get_OriginCityName () {
					return this._OriginCityName;
				}
				
			    public String _OriginState;

				public String get_OriginState () {
					return this._OriginState;
				}
				
			    public String _OriginStateFips;

				public String get_OriginStateFips () {
					return this._OriginStateFips;
				}
				
			    public String _OriginStateName;

				public String get_OriginStateName () {
					return this._OriginStateName;
				}
				
			    public String _OriginWac;

				public String get_OriginWac () {
					return this._OriginWac;
				}
				
			    public Integer _DestAirportID;

				public Integer get_DestAirportID () {
					return this._DestAirportID;
				}
				
			    public Integer _DestAirportSeqID;

				public Integer get_DestAirportSeqID () {
					return this._DestAirportSeqID;
				}
				
			    public Integer _DestCityMarketID;

				public Integer get_DestCityMarketID () {
					return this._DestCityMarketID;
				}
				
			    public Integer _Dest;

				public Integer get_Dest () {
					return this._Dest;
				}
				
			    public String _DestCityName;

				public String get_DestCityName () {
					return this._DestCityName;
				}
				
			    public String _DestState;

				public String get_DestState () {
					return this._DestState;
				}
				
			    public String _DestStateFips;

				public String get_DestStateFips () {
					return this._DestStateFips;
				}
				
			    public String _DestStateName;

				public String get_DestStateName () {
					return this._DestStateName;
				}
				
			    public String _DestWac;

				public String get_DestWac () {
					return this._DestWac;
				}
				
			    public String _CRSDepTime;

				public String get_CRSDepTime () {
					return this._CRSDepTime;
				}
				
			    public Integer _DepTime;

				public Integer get_DepTime () {
					return this._DepTime;
				}
				
			    public String _DepDelay;

				public String get_DepDelay () {
					return this._DepDelay;
				}
				
			    public String _DepDelayMinutes;

				public String get_DepDelayMinutes () {
					return this._DepDelayMinutes;
				}
				
			    public String _DepDel15;

				public String get_DepDel15 () {
					return this._DepDel15;
				}
				
			    public String _DepartureDelayGroups;

				public String get_DepartureDelayGroups () {
					return this._DepartureDelayGroups;
				}
				
			    public String _DepTimeBlk;

				public String get_DepTimeBlk () {
					return this._DepTimeBlk;
				}
				
			    public String _TaxiOut;

				public String get_TaxiOut () {
					return this._TaxiOut;
				}
				
			    public String _WheelsOff;

				public String get_WheelsOff () {
					return this._WheelsOff;
				}
				
			    public String _WheelsOn;

				public String get_WheelsOn () {
					return this._WheelsOn;
				}
				
			    public String _TaxiIn;

				public String get_TaxiIn () {
					return this._TaxiIn;
				}
				
			    public String _CRSArrTime;

				public String get_CRSArrTime () {
					return this._CRSArrTime;
				}
				
			    public String _ArrTime;

				public String get_ArrTime () {
					return this._ArrTime;
				}
				
			    public String _ArrDelay;

				public String get_ArrDelay () {
					return this._ArrDelay;
				}
				
			    public String _ArrDelayMinutes;

				public String get_ArrDelayMinutes () {
					return this._ArrDelayMinutes;
				}
				
			    public String _ArrDel15;

				public String get_ArrDel15 () {
					return this._ArrDel15;
				}
				
			    public String _ArrivalDelayGroups;

				public String get_ArrivalDelayGroups () {
					return this._ArrivalDelayGroups;
				}
				
			    public String _ArrTimeBlk;

				public String get_ArrTimeBlk () {
					return this._ArrTimeBlk;
				}
				
			    public String _Cancelled;

				public String get_Cancelled () {
					return this._Cancelled;
				}
				
			    public String _CancellationCode;

				public String get_CancellationCode () {
					return this._CancellationCode;
				}
				
			    public Float _Diverted;

				public Float get_Diverted () {
					return this._Diverted;
				}
				
			    public String _CRSElapsedTime;

				public String get_CRSElapsedTime () {
					return this._CRSElapsedTime;
				}
				
			    public Float _ActualElapsedTime;

				public Float get_ActualElapsedTime () {
					return this._ActualElapsedTime;
				}
				
			    public Float _AirTime;

				public Float get_AirTime () {
					return this._AirTime;
				}
				
			    public String _Flights;

				public String get_Flights () {
					return this._Flights;
				}
				
			    public String _Distance;

				public String get_Distance () {
					return this._Distance;
				}
				
			    public Float _DistanceGroup;

				public Float get_DistanceGroup () {
					return this._DistanceGroup;
				}
				
			    public Float _CarrierDelay;

				public Float get_CarrierDelay () {
					return this._CarrierDelay;
				}
				
			    public Integer _WeatherDelay;

				public Integer get_WeatherDelay () {
					return this._WeatherDelay;
				}
				
			    public String _NASDelay;

				public String get_NASDelay () {
					return this._NASDelay;
				}
				
			    public String _SecurityDelay;

				public String get_SecurityDelay () {
					return this._SecurityDelay;
				}
				
			    public String _LateAircraftDelay;

				public String get_LateAircraftDelay () {
					return this._LateAircraftDelay;
				}
				
			    public String _FirstDepTime;

				public String get_FirstDepTime () {
					return this._FirstDepTime;
				}
				
			    public String _TotalAddGTime;

				public String get_TotalAddGTime () {
					return this._TotalAddGTime;
				}
				
			    public String _LongestAddGTime;

				public String get_LongestAddGTime () {
					return this._LongestAddGTime;
				}
				
			    public String _DivAirportLandings;

				public String get_DivAirportLandings () {
					return this._DivAirportLandings;
				}
				
			    public String _DivReachedDest;

				public String get_DivReachedDest () {
					return this._DivReachedDest;
				}
				
			    public Integer _DivActualElapsedTime;

				public Integer get_DivActualElapsedTime () {
					return this._DivActualElapsedTime;
				}
				
			    public String _DivArrDelay;

				public String get_DivArrDelay () {
					return this._DivArrDelay;
				}
				
			    public String _DivDistance;

				public String get_DivDistance () {
					return this._DivDistance;
				}
				
			    public String _Div1Airport;

				public String get_Div1Airport () {
					return this._Div1Airport;
				}
				
			    public String _Div1AirportID;

				public String get_Div1AirportID () {
					return this._Div1AirportID;
				}
				
			    public String _Div1AirportSeqID;

				public String get_Div1AirportSeqID () {
					return this._Div1AirportSeqID;
				}
				
			    public String _Div1WheelsOn;

				public String get_Div1WheelsOn () {
					return this._Div1WheelsOn;
				}
				
			    public String _Div1TotalGTime;

				public String get_Div1TotalGTime () {
					return this._Div1TotalGTime;
				}
				
			    public String _Div1LongestGTime;

				public String get_Div1LongestGTime () {
					return this._Div1LongestGTime;
				}
				
			    public String _Div1WheelsOff;

				public String get_Div1WheelsOff () {
					return this._Div1WheelsOff;
				}
				
			    public String _Div1TailNum;

				public String get_Div1TailNum () {
					return this._Div1TailNum;
				}
				
			    public String _Div2Airport;

				public String get_Div2Airport () {
					return this._Div2Airport;
				}
				
			    public String _Div2AirportID;

				public String get_Div2AirportID () {
					return this._Div2AirportID;
				}
				
			    public String _Div2AirportSeqID;

				public String get_Div2AirportSeqID () {
					return this._Div2AirportSeqID;
				}
				
			    public String _Div2WheelsOn;

				public String get_Div2WheelsOn () {
					return this._Div2WheelsOn;
				}
				
			    public String _Div2TotalGTime;

				public String get_Div2TotalGTime () {
					return this._Div2TotalGTime;
				}
				
			    public String _Div2LongestGTime;

				public String get_Div2LongestGTime () {
					return this._Div2LongestGTime;
				}
				
			    public String _Div2WheelsOff;

				public String get_Div2WheelsOff () {
					return this._Div2WheelsOff;
				}
				
			    public String _Div2TailNum;

				public String get_Div2TailNum () {
					return this._Div2TailNum;
				}
				
			    public String _Div3Airport;

				public String get_Div3Airport () {
					return this._Div3Airport;
				}
				
			    public String _Div3AirportID;

				public String get_Div3AirportID () {
					return this._Div3AirportID;
				}
				
			    public String _Div3AirportSeqID;

				public String get_Div3AirportSeqID () {
					return this._Div3AirportSeqID;
				}
				
			    public String _Div3WheelsOn;

				public String get_Div3WheelsOn () {
					return this._Div3WheelsOn;
				}
				
			    public String _Div3TotalGTime;

				public String get_Div3TotalGTime () {
					return this._Div3TotalGTime;
				}
				
			    public String _Div3LongestGTime;

				public String get_Div3LongestGTime () {
					return this._Div3LongestGTime;
				}
				
			    public String _Div3WheelsOff;

				public String get_Div3WheelsOff () {
					return this._Div3WheelsOff;
				}
				
			    public String _Div3TailNum;

				public String get_Div3TailNum () {
					return this._Div3TailNum;
				}
				
			    public String _Div4Airport;

				public String get_Div4Airport () {
					return this._Div4Airport;
				}
				
			    public String _Div4AirportID;

				public String get_Div4AirportID () {
					return this._Div4AirportID;
				}
				
			    public String _Div4AirportSeqID;

				public String get_Div4AirportSeqID () {
					return this._Div4AirportSeqID;
				}
				
			    public String _Div4WheelsOn;

				public String get_Div4WheelsOn () {
					return this._Div4WheelsOn;
				}
				
			    public String _Div4TotalGTime;

				public String get_Div4TotalGTime () {
					return this._Div4TotalGTime;
				}
				
			    public String _Div4LongestGTime;

				public String get_Div4LongestGTime () {
					return this._Div4LongestGTime;
				}
				
			    public String _Div4WheelsOff;

				public String get_Div4WheelsOff () {
					return this._Div4WheelsOff;
				}
				
			    public String _Div4TailNum;

				public String get_Div4TailNum () {
					return this._Div4TailNum;
				}
				
			    public String _Div5Airport;

				public String get_Div5Airport () {
					return this._Div5Airport;
				}
				
			    public String _Div5AirportID;

				public String get_Div5AirportID () {
					return this._Div5AirportID;
				}
				
			    public String _Div5AirportSeqID;

				public String get_Div5AirportSeqID () {
					return this._Div5AirportSeqID;
				}
				
			    public String _Div5WheelsOn;

				public String get_Div5WheelsOn () {
					return this._Div5WheelsOn;
				}
				
			    public String _Div5TotalGTime;

				public String get_Div5TotalGTime () {
					return this._Div5TotalGTime;
				}
				
			    public String _Div5LongestGTime;

				public String get_Div5LongestGTime () {
					return this._Div5LongestGTime;
				}
				
			    public String _Div5WheelsOff;

				public String get_Div5WheelsOff () {
					return this._Div5WheelsOff;
				}
				
			    public String _Div5TailNum;

				public String get_Div5TailNum () {
					return this._Div5TailNum;
				}
				
			    public String _Duplicate;

				public String get_Duplicate () {
					return this._Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_Year="+String.valueOf(_Year));
		sb.append(",_Quarter="+String.valueOf(_Quarter));
		sb.append(",_Month="+String.valueOf(_Month));
		sb.append(",_DayofMonth="+String.valueOf(_DayofMonth));
		sb.append(",_DayOfWeek="+String.valueOf(_DayOfWeek));
		sb.append(",_FlightDate="+_FlightDate);
		sb.append(",_Marketing_Airline_Network="+_Marketing_Airline_Network);
		sb.append(",_Operated_or_Branded_Code_Share_Partners="+_Operated_or_Branded_Code_Share_Partners);
		sb.append(",_DOT_ID_Marketing_Airline="+String.valueOf(_DOT_ID_Marketing_Airline));
		sb.append(",_IATA_Code_Marketing_Airline="+_IATA_Code_Marketing_Airline);
		sb.append(",_Flight_Number_Marketing_Airline="+_Flight_Number_Marketing_Airline);
		sb.append(",_Originally_Scheduled_Code_Share_Airline="+_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_DOT_ID_Originally_Scheduled_Code_Share_Airline="+_DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_IATA_Code_Originally_Scheduled_Code_Share_Airline="+_IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Flight_Num_Originally_Scheduled_Code_Share_Airline="+_Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Operating_Airline="+_Operating_Airline);
		sb.append(",_DOT_ID_Operating_Airline="+String.valueOf(_DOT_ID_Operating_Airline));
		sb.append(",_IATA_Code_Operating_Airline="+_IATA_Code_Operating_Airline);
		sb.append(",_Tail_Number="+_Tail_Number);
		sb.append(",_Flight_Number_Operating_Airline="+_Flight_Number_Operating_Airline);
		sb.append(",_OriginAirportID="+String.valueOf(_OriginAirportID));
		sb.append(",_OriginAirportSeqID="+String.valueOf(_OriginAirportSeqID));
		sb.append(",_OriginCityMarketID="+String.valueOf(_OriginCityMarketID));
		sb.append(",_Origin="+_Origin);
		sb.append(",_OriginCityName="+_OriginCityName);
		sb.append(",_OriginState="+_OriginState);
		sb.append(",_OriginStateFips="+_OriginStateFips);
		sb.append(",_OriginStateName="+_OriginStateName);
		sb.append(",_OriginWac="+_OriginWac);
		sb.append(",_DestAirportID="+String.valueOf(_DestAirportID));
		sb.append(",_DestAirportSeqID="+String.valueOf(_DestAirportSeqID));
		sb.append(",_DestCityMarketID="+String.valueOf(_DestCityMarketID));
		sb.append(",_Dest="+String.valueOf(_Dest));
		sb.append(",_DestCityName="+_DestCityName);
		sb.append(",_DestState="+_DestState);
		sb.append(",_DestStateFips="+_DestStateFips);
		sb.append(",_DestStateName="+_DestStateName);
		sb.append(",_DestWac="+_DestWac);
		sb.append(",_CRSDepTime="+_CRSDepTime);
		sb.append(",_DepTime="+String.valueOf(_DepTime));
		sb.append(",_DepDelay="+_DepDelay);
		sb.append(",_DepDelayMinutes="+_DepDelayMinutes);
		sb.append(",_DepDel15="+_DepDel15);
		sb.append(",_DepartureDelayGroups="+_DepartureDelayGroups);
		sb.append(",_DepTimeBlk="+_DepTimeBlk);
		sb.append(",_TaxiOut="+_TaxiOut);
		sb.append(",_WheelsOff="+_WheelsOff);
		sb.append(",_WheelsOn="+_WheelsOn);
		sb.append(",_TaxiIn="+_TaxiIn);
		sb.append(",_CRSArrTime="+_CRSArrTime);
		sb.append(",_ArrTime="+_ArrTime);
		sb.append(",_ArrDelay="+_ArrDelay);
		sb.append(",_ArrDelayMinutes="+_ArrDelayMinutes);
		sb.append(",_ArrDel15="+_ArrDel15);
		sb.append(",_ArrivalDelayGroups="+_ArrivalDelayGroups);
		sb.append(",_ArrTimeBlk="+_ArrTimeBlk);
		sb.append(",_Cancelled="+_Cancelled);
		sb.append(",_CancellationCode="+_CancellationCode);
		sb.append(",_Diverted="+String.valueOf(_Diverted));
		sb.append(",_CRSElapsedTime="+_CRSElapsedTime);
		sb.append(",_ActualElapsedTime="+String.valueOf(_ActualElapsedTime));
		sb.append(",_AirTime="+String.valueOf(_AirTime));
		sb.append(",_Flights="+_Flights);
		sb.append(",_Distance="+_Distance);
		sb.append(",_DistanceGroup="+String.valueOf(_DistanceGroup));
		sb.append(",_CarrierDelay="+String.valueOf(_CarrierDelay));
		sb.append(",_WeatherDelay="+String.valueOf(_WeatherDelay));
		sb.append(",_NASDelay="+_NASDelay);
		sb.append(",_SecurityDelay="+_SecurityDelay);
		sb.append(",_LateAircraftDelay="+_LateAircraftDelay);
		sb.append(",_FirstDepTime="+_FirstDepTime);
		sb.append(",_TotalAddGTime="+_TotalAddGTime);
		sb.append(",_LongestAddGTime="+_LongestAddGTime);
		sb.append(",_DivAirportLandings="+_DivAirportLandings);
		sb.append(",_DivReachedDest="+_DivReachedDest);
		sb.append(",_DivActualElapsedTime="+String.valueOf(_DivActualElapsedTime));
		sb.append(",_DivArrDelay="+_DivArrDelay);
		sb.append(",_DivDistance="+_DivDistance);
		sb.append(",_Div1Airport="+_Div1Airport);
		sb.append(",_Div1AirportID="+_Div1AirportID);
		sb.append(",_Div1AirportSeqID="+_Div1AirportSeqID);
		sb.append(",_Div1WheelsOn="+_Div1WheelsOn);
		sb.append(",_Div1TotalGTime="+_Div1TotalGTime);
		sb.append(",_Div1LongestGTime="+_Div1LongestGTime);
		sb.append(",_Div1WheelsOff="+_Div1WheelsOff);
		sb.append(",_Div1TailNum="+_Div1TailNum);
		sb.append(",_Div2Airport="+_Div2Airport);
		sb.append(",_Div2AirportID="+_Div2AirportID);
		sb.append(",_Div2AirportSeqID="+_Div2AirportSeqID);
		sb.append(",_Div2WheelsOn="+_Div2WheelsOn);
		sb.append(",_Div2TotalGTime="+_Div2TotalGTime);
		sb.append(",_Div2LongestGTime="+_Div2LongestGTime);
		sb.append(",_Div2WheelsOff="+_Div2WheelsOff);
		sb.append(",_Div2TailNum="+_Div2TailNum);
		sb.append(",_Div3Airport="+_Div3Airport);
		sb.append(",_Div3AirportID="+_Div3AirportID);
		sb.append(",_Div3AirportSeqID="+_Div3AirportSeqID);
		sb.append(",_Div3WheelsOn="+_Div3WheelsOn);
		sb.append(",_Div3TotalGTime="+_Div3TotalGTime);
		sb.append(",_Div3LongestGTime="+_Div3LongestGTime);
		sb.append(",_Div3WheelsOff="+_Div3WheelsOff);
		sb.append(",_Div3TailNum="+_Div3TailNum);
		sb.append(",_Div4Airport="+_Div4Airport);
		sb.append(",_Div4AirportID="+_Div4AirportID);
		sb.append(",_Div4AirportSeqID="+_Div4AirportSeqID);
		sb.append(",_Div4WheelsOn="+_Div4WheelsOn);
		sb.append(",_Div4TotalGTime="+_Div4TotalGTime);
		sb.append(",_Div4LongestGTime="+_Div4LongestGTime);
		sb.append(",_Div4WheelsOff="+_Div4WheelsOff);
		sb.append(",_Div4TailNum="+_Div4TailNum);
		sb.append(",_Div5Airport="+_Div5Airport);
		sb.append(",_Div5AirportID="+_Div5AirportID);
		sb.append(",_Div5AirportSeqID="+_Div5AirportSeqID);
		sb.append(",_Div5WheelsOn="+_Div5WheelsOn);
		sb.append(",_Div5TotalGTime="+_Div5TotalGTime);
		sb.append(",_Div5LongestGTime="+_Div5LongestGTime);
		sb.append(",_Div5WheelsOff="+_Div5WheelsOff);
		sb.append(",_Div5TailNum="+_Div5TailNum);
		sb.append(",_Duplicate="+_Duplicate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimTimePeriod = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimTimePeriod = new byte[0];

	
			    public Integer _Year;

				public Integer get_Year () {
					return this._Year;
				}
				
			    public Integer _Quarter;

				public Integer get_Quarter () {
					return this._Quarter;
				}
				
			    public Integer _Month;

				public Integer get_Month () {
					return this._Month;
				}
				
			    public Integer _DayofMonth;

				public Integer get_DayofMonth () {
					return this._DayofMonth;
				}
				
			    public Integer _DayOfWeek;

				public Integer get_DayOfWeek () {
					return this._DayOfWeek;
				}
				
			    public String _FlightDate;

				public String get_FlightDate () {
					return this._FlightDate;
				}
				
			    public String _Marketing_Airline_Network;

				public String get_Marketing_Airline_Network () {
					return this._Marketing_Airline_Network;
				}
				
			    public String _Operated_or_Branded_Code_Share_Partners;

				public String get_Operated_or_Branded_Code_Share_Partners () {
					return this._Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer _DOT_ID_Marketing_Airline;

				public Integer get_DOT_ID_Marketing_Airline () {
					return this._DOT_ID_Marketing_Airline;
				}
				
			    public String _IATA_Code_Marketing_Airline;

				public String get_IATA_Code_Marketing_Airline () {
					return this._IATA_Code_Marketing_Airline;
				}
				
			    public String _Flight_Number_Marketing_Airline;

				public String get_Flight_Number_Marketing_Airline () {
					return this._Flight_Number_Marketing_Airline;
				}
				
			    public String _Originally_Scheduled_Code_Share_Airline;

				public String get_Originally_Scheduled_Code_Share_Airline () {
					return this._Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String get_DOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this._DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String get_IATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this._IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String get_Flight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this._Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String _Operating_Airline;

				public String get_Operating_Airline () {
					return this._Operating_Airline;
				}
				
			    public Integer _DOT_ID_Operating_Airline;

				public Integer get_DOT_ID_Operating_Airline () {
					return this._DOT_ID_Operating_Airline;
				}
				
			    public String _IATA_Code_Operating_Airline;

				public String get_IATA_Code_Operating_Airline () {
					return this._IATA_Code_Operating_Airline;
				}
				
			    public String _Tail_Number;

				public String get_Tail_Number () {
					return this._Tail_Number;
				}
				
			    public String _Flight_Number_Operating_Airline;

				public String get_Flight_Number_Operating_Airline () {
					return this._Flight_Number_Operating_Airline;
				}
				
			    public Integer _OriginAirportID;

				public Integer get_OriginAirportID () {
					return this._OriginAirportID;
				}
				
			    public Integer _OriginAirportSeqID;

				public Integer get_OriginAirportSeqID () {
					return this._OriginAirportSeqID;
				}
				
			    public Integer _OriginCityMarketID;

				public Integer get_OriginCityMarketID () {
					return this._OriginCityMarketID;
				}
				
			    public String _Origin;

				public String get_Origin () {
					return this._Origin;
				}
				
			    public String _OriginCityName;

				public String get_OriginCityName () {
					return this._OriginCityName;
				}
				
			    public String _OriginState;

				public String get_OriginState () {
					return this._OriginState;
				}
				
			    public String _OriginStateFips;

				public String get_OriginStateFips () {
					return this._OriginStateFips;
				}
				
			    public String _OriginStateName;

				public String get_OriginStateName () {
					return this._OriginStateName;
				}
				
			    public String _OriginWac;

				public String get_OriginWac () {
					return this._OriginWac;
				}
				
			    public Integer _DestAirportID;

				public Integer get_DestAirportID () {
					return this._DestAirportID;
				}
				
			    public Integer _DestAirportSeqID;

				public Integer get_DestAirportSeqID () {
					return this._DestAirportSeqID;
				}
				
			    public Integer _DestCityMarketID;

				public Integer get_DestCityMarketID () {
					return this._DestCityMarketID;
				}
				
			    public Integer _Dest;

				public Integer get_Dest () {
					return this._Dest;
				}
				
			    public String _DestCityName;

				public String get_DestCityName () {
					return this._DestCityName;
				}
				
			    public String _DestState;

				public String get_DestState () {
					return this._DestState;
				}
				
			    public String _DestStateFips;

				public String get_DestStateFips () {
					return this._DestStateFips;
				}
				
			    public String _DestStateName;

				public String get_DestStateName () {
					return this._DestStateName;
				}
				
			    public String _DestWac;

				public String get_DestWac () {
					return this._DestWac;
				}
				
			    public String _CRSDepTime;

				public String get_CRSDepTime () {
					return this._CRSDepTime;
				}
				
			    public Integer _DepTime;

				public Integer get_DepTime () {
					return this._DepTime;
				}
				
			    public String _DepDelay;

				public String get_DepDelay () {
					return this._DepDelay;
				}
				
			    public String _DepDelayMinutes;

				public String get_DepDelayMinutes () {
					return this._DepDelayMinutes;
				}
				
			    public String _DepDel15;

				public String get_DepDel15 () {
					return this._DepDel15;
				}
				
			    public String _DepartureDelayGroups;

				public String get_DepartureDelayGroups () {
					return this._DepartureDelayGroups;
				}
				
			    public String _DepTimeBlk;

				public String get_DepTimeBlk () {
					return this._DepTimeBlk;
				}
				
			    public String _TaxiOut;

				public String get_TaxiOut () {
					return this._TaxiOut;
				}
				
			    public String _WheelsOff;

				public String get_WheelsOff () {
					return this._WheelsOff;
				}
				
			    public String _WheelsOn;

				public String get_WheelsOn () {
					return this._WheelsOn;
				}
				
			    public String _TaxiIn;

				public String get_TaxiIn () {
					return this._TaxiIn;
				}
				
			    public String _CRSArrTime;

				public String get_CRSArrTime () {
					return this._CRSArrTime;
				}
				
			    public String _ArrTime;

				public String get_ArrTime () {
					return this._ArrTime;
				}
				
			    public String _ArrDelay;

				public String get_ArrDelay () {
					return this._ArrDelay;
				}
				
			    public String _ArrDelayMinutes;

				public String get_ArrDelayMinutes () {
					return this._ArrDelayMinutes;
				}
				
			    public String _ArrDel15;

				public String get_ArrDel15 () {
					return this._ArrDel15;
				}
				
			    public String _ArrivalDelayGroups;

				public String get_ArrivalDelayGroups () {
					return this._ArrivalDelayGroups;
				}
				
			    public String _ArrTimeBlk;

				public String get_ArrTimeBlk () {
					return this._ArrTimeBlk;
				}
				
			    public String _Cancelled;

				public String get_Cancelled () {
					return this._Cancelled;
				}
				
			    public String _CancellationCode;

				public String get_CancellationCode () {
					return this._CancellationCode;
				}
				
			    public Float _Diverted;

				public Float get_Diverted () {
					return this._Diverted;
				}
				
			    public String _CRSElapsedTime;

				public String get_CRSElapsedTime () {
					return this._CRSElapsedTime;
				}
				
			    public Float _ActualElapsedTime;

				public Float get_ActualElapsedTime () {
					return this._ActualElapsedTime;
				}
				
			    public Float _AirTime;

				public Float get_AirTime () {
					return this._AirTime;
				}
				
			    public String _Flights;

				public String get_Flights () {
					return this._Flights;
				}
				
			    public String _Distance;

				public String get_Distance () {
					return this._Distance;
				}
				
			    public Float _DistanceGroup;

				public Float get_DistanceGroup () {
					return this._DistanceGroup;
				}
				
			    public Float _CarrierDelay;

				public Float get_CarrierDelay () {
					return this._CarrierDelay;
				}
				
			    public Integer _WeatherDelay;

				public Integer get_WeatherDelay () {
					return this._WeatherDelay;
				}
				
			    public String _NASDelay;

				public String get_NASDelay () {
					return this._NASDelay;
				}
				
			    public String _SecurityDelay;

				public String get_SecurityDelay () {
					return this._SecurityDelay;
				}
				
			    public String _LateAircraftDelay;

				public String get_LateAircraftDelay () {
					return this._LateAircraftDelay;
				}
				
			    public String _FirstDepTime;

				public String get_FirstDepTime () {
					return this._FirstDepTime;
				}
				
			    public String _TotalAddGTime;

				public String get_TotalAddGTime () {
					return this._TotalAddGTime;
				}
				
			    public String _LongestAddGTime;

				public String get_LongestAddGTime () {
					return this._LongestAddGTime;
				}
				
			    public String _DivAirportLandings;

				public String get_DivAirportLandings () {
					return this._DivAirportLandings;
				}
				
			    public String _DivReachedDest;

				public String get_DivReachedDest () {
					return this._DivReachedDest;
				}
				
			    public Integer _DivActualElapsedTime;

				public Integer get_DivActualElapsedTime () {
					return this._DivActualElapsedTime;
				}
				
			    public String _DivArrDelay;

				public String get_DivArrDelay () {
					return this._DivArrDelay;
				}
				
			    public String _DivDistance;

				public String get_DivDistance () {
					return this._DivDistance;
				}
				
			    public String _Div1Airport;

				public String get_Div1Airport () {
					return this._Div1Airport;
				}
				
			    public String _Div1AirportID;

				public String get_Div1AirportID () {
					return this._Div1AirportID;
				}
				
			    public String _Div1AirportSeqID;

				public String get_Div1AirportSeqID () {
					return this._Div1AirportSeqID;
				}
				
			    public String _Div1WheelsOn;

				public String get_Div1WheelsOn () {
					return this._Div1WheelsOn;
				}
				
			    public String _Div1TotalGTime;

				public String get_Div1TotalGTime () {
					return this._Div1TotalGTime;
				}
				
			    public String _Div1LongestGTime;

				public String get_Div1LongestGTime () {
					return this._Div1LongestGTime;
				}
				
			    public String _Div1WheelsOff;

				public String get_Div1WheelsOff () {
					return this._Div1WheelsOff;
				}
				
			    public String _Div1TailNum;

				public String get_Div1TailNum () {
					return this._Div1TailNum;
				}
				
			    public String _Div2Airport;

				public String get_Div2Airport () {
					return this._Div2Airport;
				}
				
			    public String _Div2AirportID;

				public String get_Div2AirportID () {
					return this._Div2AirportID;
				}
				
			    public String _Div2AirportSeqID;

				public String get_Div2AirportSeqID () {
					return this._Div2AirportSeqID;
				}
				
			    public String _Div2WheelsOn;

				public String get_Div2WheelsOn () {
					return this._Div2WheelsOn;
				}
				
			    public String _Div2TotalGTime;

				public String get_Div2TotalGTime () {
					return this._Div2TotalGTime;
				}
				
			    public String _Div2LongestGTime;

				public String get_Div2LongestGTime () {
					return this._Div2LongestGTime;
				}
				
			    public String _Div2WheelsOff;

				public String get_Div2WheelsOff () {
					return this._Div2WheelsOff;
				}
				
			    public String _Div2TailNum;

				public String get_Div2TailNum () {
					return this._Div2TailNum;
				}
				
			    public String _Div3Airport;

				public String get_Div3Airport () {
					return this._Div3Airport;
				}
				
			    public String _Div3AirportID;

				public String get_Div3AirportID () {
					return this._Div3AirportID;
				}
				
			    public String _Div3AirportSeqID;

				public String get_Div3AirportSeqID () {
					return this._Div3AirportSeqID;
				}
				
			    public String _Div3WheelsOn;

				public String get_Div3WheelsOn () {
					return this._Div3WheelsOn;
				}
				
			    public String _Div3TotalGTime;

				public String get_Div3TotalGTime () {
					return this._Div3TotalGTime;
				}
				
			    public String _Div3LongestGTime;

				public String get_Div3LongestGTime () {
					return this._Div3LongestGTime;
				}
				
			    public String _Div3WheelsOff;

				public String get_Div3WheelsOff () {
					return this._Div3WheelsOff;
				}
				
			    public String _Div3TailNum;

				public String get_Div3TailNum () {
					return this._Div3TailNum;
				}
				
			    public String _Div4Airport;

				public String get_Div4Airport () {
					return this._Div4Airport;
				}
				
			    public String _Div4AirportID;

				public String get_Div4AirportID () {
					return this._Div4AirportID;
				}
				
			    public String _Div4AirportSeqID;

				public String get_Div4AirportSeqID () {
					return this._Div4AirportSeqID;
				}
				
			    public String _Div4WheelsOn;

				public String get_Div4WheelsOn () {
					return this._Div4WheelsOn;
				}
				
			    public String _Div4TotalGTime;

				public String get_Div4TotalGTime () {
					return this._Div4TotalGTime;
				}
				
			    public String _Div4LongestGTime;

				public String get_Div4LongestGTime () {
					return this._Div4LongestGTime;
				}
				
			    public String _Div4WheelsOff;

				public String get_Div4WheelsOff () {
					return this._Div4WheelsOff;
				}
				
			    public String _Div4TailNum;

				public String get_Div4TailNum () {
					return this._Div4TailNum;
				}
				
			    public String _Div5Airport;

				public String get_Div5Airport () {
					return this._Div5Airport;
				}
				
			    public String _Div5AirportID;

				public String get_Div5AirportID () {
					return this._Div5AirportID;
				}
				
			    public String _Div5AirportSeqID;

				public String get_Div5AirportSeqID () {
					return this._Div5AirportSeqID;
				}
				
			    public String _Div5WheelsOn;

				public String get_Div5WheelsOn () {
					return this._Div5WheelsOn;
				}
				
			    public String _Div5TotalGTime;

				public String get_Div5TotalGTime () {
					return this._Div5TotalGTime;
				}
				
			    public String _Div5LongestGTime;

				public String get_Div5LongestGTime () {
					return this._Div5LongestGTime;
				}
				
			    public String _Div5WheelsOff;

				public String get_Div5WheelsOff () {
					return this._Div5WheelsOff;
				}
				
			    public String _Div5TailNum;

				public String get_Div5TailNum () {
					return this._Div5TailNum;
				}
				
			    public String _Duplicate;

				public String get_Duplicate () {
					return this._Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimTimePeriod.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimTimePeriod.length == 0) {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimTimePeriod = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimTimePeriod, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimTimePeriod) {

        	try {

        		int length = 0;
		
						this._Year = readInteger(dis);
					
						this._Quarter = readInteger(dis);
					
						this._Month = readInteger(dis);
					
						this._DayofMonth = readInteger(dis);
					
						this._DayOfWeek = readInteger(dis);
					
					this._FlightDate = readString(dis);
					
					this._Marketing_Airline_Network = readString(dis);
					
					this._Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this._DOT_ID_Marketing_Airline = readInteger(dis);
					
					this._IATA_Code_Marketing_Airline = readString(dis);
					
					this._Flight_Number_Marketing_Airline = readString(dis);
					
					this._Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this._Operating_Airline = readString(dis);
					
						this._DOT_ID_Operating_Airline = readInteger(dis);
					
					this._IATA_Code_Operating_Airline = readString(dis);
					
					this._Tail_Number = readString(dis);
					
					this._Flight_Number_Operating_Airline = readString(dis);
					
						this._OriginAirportID = readInteger(dis);
					
						this._OriginAirportSeqID = readInteger(dis);
					
						this._OriginCityMarketID = readInteger(dis);
					
					this._Origin = readString(dis);
					
					this._OriginCityName = readString(dis);
					
					this._OriginState = readString(dis);
					
					this._OriginStateFips = readString(dis);
					
					this._OriginStateName = readString(dis);
					
					this._OriginWac = readString(dis);
					
						this._DestAirportID = readInteger(dis);
					
						this._DestAirportSeqID = readInteger(dis);
					
						this._DestCityMarketID = readInteger(dis);
					
						this._Dest = readInteger(dis);
					
					this._DestCityName = readString(dis);
					
					this._DestState = readString(dis);
					
					this._DestStateFips = readString(dis);
					
					this._DestStateName = readString(dis);
					
					this._DestWac = readString(dis);
					
					this._CRSDepTime = readString(dis);
					
						this._DepTime = readInteger(dis);
					
					this._DepDelay = readString(dis);
					
					this._DepDelayMinutes = readString(dis);
					
					this._DepDel15 = readString(dis);
					
					this._DepartureDelayGroups = readString(dis);
					
					this._DepTimeBlk = readString(dis);
					
					this._TaxiOut = readString(dis);
					
					this._WheelsOff = readString(dis);
					
					this._WheelsOn = readString(dis);
					
					this._TaxiIn = readString(dis);
					
					this._CRSArrTime = readString(dis);
					
					this._ArrTime = readString(dis);
					
					this._ArrDelay = readString(dis);
					
					this._ArrDelayMinutes = readString(dis);
					
					this._ArrDel15 = readString(dis);
					
					this._ArrivalDelayGroups = readString(dis);
					
					this._ArrTimeBlk = readString(dis);
					
					this._Cancelled = readString(dis);
					
					this._CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._Diverted = null;
           				} else {
           			    	this._Diverted = dis.readFloat();
           				}
					
					this._CRSElapsedTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._ActualElapsedTime = null;
           				} else {
           			    	this._ActualElapsedTime = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._AirTime = null;
           				} else {
           			    	this._AirTime = dis.readFloat();
           				}
					
					this._Flights = readString(dis);
					
					this._Distance = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._DistanceGroup = null;
           				} else {
           			    	this._DistanceGroup = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this._CarrierDelay = null;
           				} else {
           			    	this._CarrierDelay = dis.readFloat();
           				}
					
						this._WeatherDelay = readInteger(dis);
					
					this._NASDelay = readString(dis);
					
					this._SecurityDelay = readString(dis);
					
					this._LateAircraftDelay = readString(dis);
					
					this._FirstDepTime = readString(dis);
					
					this._TotalAddGTime = readString(dis);
					
					this._LongestAddGTime = readString(dis);
					
					this._DivAirportLandings = readString(dis);
					
					this._DivReachedDest = readString(dis);
					
						this._DivActualElapsedTime = readInteger(dis);
					
					this._DivArrDelay = readString(dis);
					
					this._DivDistance = readString(dis);
					
					this._Div1Airport = readString(dis);
					
					this._Div1AirportID = readString(dis);
					
					this._Div1AirportSeqID = readString(dis);
					
					this._Div1WheelsOn = readString(dis);
					
					this._Div1TotalGTime = readString(dis);
					
					this._Div1LongestGTime = readString(dis);
					
					this._Div1WheelsOff = readString(dis);
					
					this._Div1TailNum = readString(dis);
					
					this._Div2Airport = readString(dis);
					
					this._Div2AirportID = readString(dis);
					
					this._Div2AirportSeqID = readString(dis);
					
					this._Div2WheelsOn = readString(dis);
					
					this._Div2TotalGTime = readString(dis);
					
					this._Div2LongestGTime = readString(dis);
					
					this._Div2WheelsOff = readString(dis);
					
					this._Div2TailNum = readString(dis);
					
					this._Div3Airport = readString(dis);
					
					this._Div3AirportID = readString(dis);
					
					this._Div3AirportSeqID = readString(dis);
					
					this._Div3WheelsOn = readString(dis);
					
					this._Div3TotalGTime = readString(dis);
					
					this._Div3LongestGTime = readString(dis);
					
					this._Div3WheelsOff = readString(dis);
					
					this._Div3TailNum = readString(dis);
					
					this._Div4Airport = readString(dis);
					
					this._Div4AirportID = readString(dis);
					
					this._Div4AirportSeqID = readString(dis);
					
					this._Div4WheelsOn = readString(dis);
					
					this._Div4TotalGTime = readString(dis);
					
					this._Div4LongestGTime = readString(dis);
					
					this._Div4WheelsOff = readString(dis);
					
					this._Div4TailNum = readString(dis);
					
					this._Div5Airport = readString(dis);
					
					this._Div5AirportID = readString(dis);
					
					this._Div5AirportSeqID = readString(dis);
					
					this._Div5WheelsOn = readString(dis);
					
					this._Div5TotalGTime = readString(dis);
					
					this._Div5LongestGTime = readString(dis);
					
					this._Div5WheelsOff = readString(dis);
					
					this._Div5TailNum = readString(dis);
					
					this._Duplicate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this._Year,dos);
					
					// Integer
				
						writeInteger(this._Quarter,dos);
					
					// Integer
				
						writeInteger(this._Month,dos);
					
					// Integer
				
						writeInteger(this._DayofMonth,dos);
					
					// Integer
				
						writeInteger(this._DayOfWeek,dos);
					
					// String
				
						writeString(this._FlightDate,dos);
					
					// String
				
						writeString(this._Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this._Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this._Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this._Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this._IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this._Tail_Number,dos);
					
					// String
				
						writeString(this._Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this._OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._OriginCityMarketID,dos);
					
					// String
				
						writeString(this._Origin,dos);
					
					// String
				
						writeString(this._OriginCityName,dos);
					
					// String
				
						writeString(this._OriginState,dos);
					
					// String
				
						writeString(this._OriginStateFips,dos);
					
					// String
				
						writeString(this._OriginStateName,dos);
					
					// String
				
						writeString(this._OriginWac,dos);
					
					// Integer
				
						writeInteger(this._DestAirportID,dos);
					
					// Integer
				
						writeInteger(this._DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this._DestCityMarketID,dos);
					
					// Integer
				
						writeInteger(this._Dest,dos);
					
					// String
				
						writeString(this._DestCityName,dos);
					
					// String
				
						writeString(this._DestState,dos);
					
					// String
				
						writeString(this._DestStateFips,dos);
					
					// String
				
						writeString(this._DestStateName,dos);
					
					// String
				
						writeString(this._DestWac,dos);
					
					// String
				
						writeString(this._CRSDepTime,dos);
					
					// Integer
				
						writeInteger(this._DepTime,dos);
					
					// String
				
						writeString(this._DepDelay,dos);
					
					// String
				
						writeString(this._DepDelayMinutes,dos);
					
					// String
				
						writeString(this._DepDel15,dos);
					
					// String
				
						writeString(this._DepartureDelayGroups,dos);
					
					// String
				
						writeString(this._DepTimeBlk,dos);
					
					// String
				
						writeString(this._TaxiOut,dos);
					
					// String
				
						writeString(this._WheelsOff,dos);
					
					// String
				
						writeString(this._WheelsOn,dos);
					
					// String
				
						writeString(this._TaxiIn,dos);
					
					// String
				
						writeString(this._CRSArrTime,dos);
					
					// String
				
						writeString(this._ArrTime,dos);
					
					// String
				
						writeString(this._ArrDelay,dos);
					
					// String
				
						writeString(this._ArrDelayMinutes,dos);
					
					// String
				
						writeString(this._ArrDel15,dos);
					
					// String
				
						writeString(this._ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this._ArrTimeBlk,dos);
					
					// String
				
						writeString(this._Cancelled,dos);
					
					// String
				
						writeString(this._CancellationCode,dos);
					
					// Float
				
						if(this._Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._Diverted);
		            	}
					
					// String
				
						writeString(this._CRSElapsedTime,dos);
					
					// Float
				
						if(this._ActualElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._ActualElapsedTime);
		            	}
					
					// Float
				
						if(this._AirTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._AirTime);
		            	}
					
					// String
				
						writeString(this._Flights,dos);
					
					// String
				
						writeString(this._Distance,dos);
					
					// Float
				
						if(this._DistanceGroup == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._DistanceGroup);
		            	}
					
					// Float
				
						if(this._CarrierDelay == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this._CarrierDelay);
		            	}
					
					// Integer
				
						writeInteger(this._WeatherDelay,dos);
					
					// String
				
						writeString(this._NASDelay,dos);
					
					// String
				
						writeString(this._SecurityDelay,dos);
					
					// String
				
						writeString(this._LateAircraftDelay,dos);
					
					// String
				
						writeString(this._FirstDepTime,dos);
					
					// String
				
						writeString(this._TotalAddGTime,dos);
					
					// String
				
						writeString(this._LongestAddGTime,dos);
					
					// String
				
						writeString(this._DivAirportLandings,dos);
					
					// String
				
						writeString(this._DivReachedDest,dos);
					
					// Integer
				
						writeInteger(this._DivActualElapsedTime,dos);
					
					// String
				
						writeString(this._DivArrDelay,dos);
					
					// String
				
						writeString(this._DivDistance,dos);
					
					// String
				
						writeString(this._Div1Airport,dos);
					
					// String
				
						writeString(this._Div1AirportID,dos);
					
					// String
				
						writeString(this._Div1AirportSeqID,dos);
					
					// String
				
						writeString(this._Div1WheelsOn,dos);
					
					// String
				
						writeString(this._Div1TotalGTime,dos);
					
					// String
				
						writeString(this._Div1LongestGTime,dos);
					
					// String
				
						writeString(this._Div1WheelsOff,dos);
					
					// String
				
						writeString(this._Div1TailNum,dos);
					
					// String
				
						writeString(this._Div2Airport,dos);
					
					// String
				
						writeString(this._Div2AirportID,dos);
					
					// String
				
						writeString(this._Div2AirportSeqID,dos);
					
					// String
				
						writeString(this._Div2WheelsOn,dos);
					
					// String
				
						writeString(this._Div2TotalGTime,dos);
					
					// String
				
						writeString(this._Div2LongestGTime,dos);
					
					// String
				
						writeString(this._Div2WheelsOff,dos);
					
					// String
				
						writeString(this._Div2TailNum,dos);
					
					// String
				
						writeString(this._Div3Airport,dos);
					
					// String
				
						writeString(this._Div3AirportID,dos);
					
					// String
				
						writeString(this._Div3AirportSeqID,dos);
					
					// String
				
						writeString(this._Div3WheelsOn,dos);
					
					// String
				
						writeString(this._Div3TotalGTime,dos);
					
					// String
				
						writeString(this._Div3LongestGTime,dos);
					
					// String
				
						writeString(this._Div3WheelsOff,dos);
					
					// String
				
						writeString(this._Div3TailNum,dos);
					
					// String
				
						writeString(this._Div4Airport,dos);
					
					// String
				
						writeString(this._Div4AirportID,dos);
					
					// String
				
						writeString(this._Div4AirportSeqID,dos);
					
					// String
				
						writeString(this._Div4WheelsOn,dos);
					
					// String
				
						writeString(this._Div4TotalGTime,dos);
					
					// String
				
						writeString(this._Div4LongestGTime,dos);
					
					// String
				
						writeString(this._Div4WheelsOff,dos);
					
					// String
				
						writeString(this._Div4TailNum,dos);
					
					// String
				
						writeString(this._Div5Airport,dos);
					
					// String
				
						writeString(this._Div5AirportID,dos);
					
					// String
				
						writeString(this._Div5AirportSeqID,dos);
					
					// String
				
						writeString(this._Div5WheelsOn,dos);
					
					// String
				
						writeString(this._Div5TotalGTime,dos);
					
					// String
				
						writeString(this._Div5LongestGTime,dos);
					
					// String
				
						writeString(this._Div5WheelsOff,dos);
					
					// String
				
						writeString(this._Div5TailNum,dos);
					
					// String
				
						writeString(this._Duplicate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_Year="+String.valueOf(_Year));
		sb.append(",_Quarter="+String.valueOf(_Quarter));
		sb.append(",_Month="+String.valueOf(_Month));
		sb.append(",_DayofMonth="+String.valueOf(_DayofMonth));
		sb.append(",_DayOfWeek="+String.valueOf(_DayOfWeek));
		sb.append(",_FlightDate="+_FlightDate);
		sb.append(",_Marketing_Airline_Network="+_Marketing_Airline_Network);
		sb.append(",_Operated_or_Branded_Code_Share_Partners="+_Operated_or_Branded_Code_Share_Partners);
		sb.append(",_DOT_ID_Marketing_Airline="+String.valueOf(_DOT_ID_Marketing_Airline));
		sb.append(",_IATA_Code_Marketing_Airline="+_IATA_Code_Marketing_Airline);
		sb.append(",_Flight_Number_Marketing_Airline="+_Flight_Number_Marketing_Airline);
		sb.append(",_Originally_Scheduled_Code_Share_Airline="+_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_DOT_ID_Originally_Scheduled_Code_Share_Airline="+_DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_IATA_Code_Originally_Scheduled_Code_Share_Airline="+_IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Flight_Num_Originally_Scheduled_Code_Share_Airline="+_Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",_Operating_Airline="+_Operating_Airline);
		sb.append(",_DOT_ID_Operating_Airline="+String.valueOf(_DOT_ID_Operating_Airline));
		sb.append(",_IATA_Code_Operating_Airline="+_IATA_Code_Operating_Airline);
		sb.append(",_Tail_Number="+_Tail_Number);
		sb.append(",_Flight_Number_Operating_Airline="+_Flight_Number_Operating_Airline);
		sb.append(",_OriginAirportID="+String.valueOf(_OriginAirportID));
		sb.append(",_OriginAirportSeqID="+String.valueOf(_OriginAirportSeqID));
		sb.append(",_OriginCityMarketID="+String.valueOf(_OriginCityMarketID));
		sb.append(",_Origin="+_Origin);
		sb.append(",_OriginCityName="+_OriginCityName);
		sb.append(",_OriginState="+_OriginState);
		sb.append(",_OriginStateFips="+_OriginStateFips);
		sb.append(",_OriginStateName="+_OriginStateName);
		sb.append(",_OriginWac="+_OriginWac);
		sb.append(",_DestAirportID="+String.valueOf(_DestAirportID));
		sb.append(",_DestAirportSeqID="+String.valueOf(_DestAirportSeqID));
		sb.append(",_DestCityMarketID="+String.valueOf(_DestCityMarketID));
		sb.append(",_Dest="+String.valueOf(_Dest));
		sb.append(",_DestCityName="+_DestCityName);
		sb.append(",_DestState="+_DestState);
		sb.append(",_DestStateFips="+_DestStateFips);
		sb.append(",_DestStateName="+_DestStateName);
		sb.append(",_DestWac="+_DestWac);
		sb.append(",_CRSDepTime="+_CRSDepTime);
		sb.append(",_DepTime="+String.valueOf(_DepTime));
		sb.append(",_DepDelay="+_DepDelay);
		sb.append(",_DepDelayMinutes="+_DepDelayMinutes);
		sb.append(",_DepDel15="+_DepDel15);
		sb.append(",_DepartureDelayGroups="+_DepartureDelayGroups);
		sb.append(",_DepTimeBlk="+_DepTimeBlk);
		sb.append(",_TaxiOut="+_TaxiOut);
		sb.append(",_WheelsOff="+_WheelsOff);
		sb.append(",_WheelsOn="+_WheelsOn);
		sb.append(",_TaxiIn="+_TaxiIn);
		sb.append(",_CRSArrTime="+_CRSArrTime);
		sb.append(",_ArrTime="+_ArrTime);
		sb.append(",_ArrDelay="+_ArrDelay);
		sb.append(",_ArrDelayMinutes="+_ArrDelayMinutes);
		sb.append(",_ArrDel15="+_ArrDel15);
		sb.append(",_ArrivalDelayGroups="+_ArrivalDelayGroups);
		sb.append(",_ArrTimeBlk="+_ArrTimeBlk);
		sb.append(",_Cancelled="+_Cancelled);
		sb.append(",_CancellationCode="+_CancellationCode);
		sb.append(",_Diverted="+String.valueOf(_Diverted));
		sb.append(",_CRSElapsedTime="+_CRSElapsedTime);
		sb.append(",_ActualElapsedTime="+String.valueOf(_ActualElapsedTime));
		sb.append(",_AirTime="+String.valueOf(_AirTime));
		sb.append(",_Flights="+_Flights);
		sb.append(",_Distance="+_Distance);
		sb.append(",_DistanceGroup="+String.valueOf(_DistanceGroup));
		sb.append(",_CarrierDelay="+String.valueOf(_CarrierDelay));
		sb.append(",_WeatherDelay="+String.valueOf(_WeatherDelay));
		sb.append(",_NASDelay="+_NASDelay);
		sb.append(",_SecurityDelay="+_SecurityDelay);
		sb.append(",_LateAircraftDelay="+_LateAircraftDelay);
		sb.append(",_FirstDepTime="+_FirstDepTime);
		sb.append(",_TotalAddGTime="+_TotalAddGTime);
		sb.append(",_LongestAddGTime="+_LongestAddGTime);
		sb.append(",_DivAirportLandings="+_DivAirportLandings);
		sb.append(",_DivReachedDest="+_DivReachedDest);
		sb.append(",_DivActualElapsedTime="+String.valueOf(_DivActualElapsedTime));
		sb.append(",_DivArrDelay="+_DivArrDelay);
		sb.append(",_DivDistance="+_DivDistance);
		sb.append(",_Div1Airport="+_Div1Airport);
		sb.append(",_Div1AirportID="+_Div1AirportID);
		sb.append(",_Div1AirportSeqID="+_Div1AirportSeqID);
		sb.append(",_Div1WheelsOn="+_Div1WheelsOn);
		sb.append(",_Div1TotalGTime="+_Div1TotalGTime);
		sb.append(",_Div1LongestGTime="+_Div1LongestGTime);
		sb.append(",_Div1WheelsOff="+_Div1WheelsOff);
		sb.append(",_Div1TailNum="+_Div1TailNum);
		sb.append(",_Div2Airport="+_Div2Airport);
		sb.append(",_Div2AirportID="+_Div2AirportID);
		sb.append(",_Div2AirportSeqID="+_Div2AirportSeqID);
		sb.append(",_Div2WheelsOn="+_Div2WheelsOn);
		sb.append(",_Div2TotalGTime="+_Div2TotalGTime);
		sb.append(",_Div2LongestGTime="+_Div2LongestGTime);
		sb.append(",_Div2WheelsOff="+_Div2WheelsOff);
		sb.append(",_Div2TailNum="+_Div2TailNum);
		sb.append(",_Div3Airport="+_Div3Airport);
		sb.append(",_Div3AirportID="+_Div3AirportID);
		sb.append(",_Div3AirportSeqID="+_Div3AirportSeqID);
		sb.append(",_Div3WheelsOn="+_Div3WheelsOn);
		sb.append(",_Div3TotalGTime="+_Div3TotalGTime);
		sb.append(",_Div3LongestGTime="+_Div3LongestGTime);
		sb.append(",_Div3WheelsOff="+_Div3WheelsOff);
		sb.append(",_Div3TailNum="+_Div3TailNum);
		sb.append(",_Div4Airport="+_Div4Airport);
		sb.append(",_Div4AirportID="+_Div4AirportID);
		sb.append(",_Div4AirportSeqID="+_Div4AirportSeqID);
		sb.append(",_Div4WheelsOn="+_Div4WheelsOn);
		sb.append(",_Div4TotalGTime="+_Div4TotalGTime);
		sb.append(",_Div4LongestGTime="+_Div4LongestGTime);
		sb.append(",_Div4WheelsOff="+_Div4WheelsOff);
		sb.append(",_Div4TailNum="+_Div4TailNum);
		sb.append(",_Div5Airport="+_Div5Airport);
		sb.append(",_Div5AirportID="+_Div5AirportID);
		sb.append(",_Div5AirportSeqID="+_Div5AirportSeqID);
		sb.append(",_Div5WheelsOn="+_Div5WheelsOn);
		sb.append(",_Div5TotalGTime="+_Div5TotalGTime);
		sb.append(",_Div5LongestGTime="+_Div5LongestGTime);
		sb.append(",_Div5WheelsOff="+_Div5WheelsOff);
		sb.append(",_Div5TailNum="+_Div5TailNum);
		sb.append(",_Duplicate="+_Duplicate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row2Struct row3 = row2;
dimensionStruct dimension = new dimensionStruct();







	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dimension");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimTimePeriod.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("timePeriodId");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("year");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("quarter");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("month");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("dayOfMonth");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("dayOfWeek");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("flightDate");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
dimensionStruct dimension_tmp = new dimensionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[119];

        public void addRow(String[] row) {

            for (int i = 0; i < 119; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 118 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 118 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%74$-");
        			        sbformat.append(colLengths[73]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%75$-");
        			        sbformat.append(colLengths[74]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%76$-");
        			        sbformat.append(colLengths[75]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%77$-");
        			        sbformat.append(colLengths[76]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%78$-");
        			        sbformat.append(colLengths[77]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%79$-");
        			        sbformat.append(colLengths[78]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%80$-");
        			        sbformat.append(colLengths[79]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%81$-");
        			        sbformat.append(colLengths[80]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%82$-");
        			        sbformat.append(colLengths[81]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%83$-");
        			        sbformat.append(colLengths[82]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%84$-");
        			        sbformat.append(colLengths[83]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%85$-");
        			        sbformat.append(colLengths[84]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%86$-");
        			        sbformat.append(colLengths[85]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%87$-");
        			        sbformat.append(colLengths[86]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%88$-");
        			        sbformat.append(colLengths[87]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%89$-");
        			        sbformat.append(colLengths[88]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%90$-");
        			        sbformat.append(colLengths[89]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%91$-");
        			        sbformat.append(colLengths[90]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%92$-");
        			        sbformat.append(colLengths[91]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%93$-");
        			        sbformat.append(colLengths[92]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%94$-");
        			        sbformat.append(colLengths[93]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%95$-");
        			        sbformat.append(colLengths[94]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%96$-");
        			        sbformat.append(colLengths[95]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%97$-");
        			        sbformat.append(colLengths[96]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%98$-");
        			        sbformat.append(colLengths[97]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%99$-");
        			        sbformat.append(colLengths[98]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%100$-");
        			        sbformat.append(colLengths[99]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%101$-");
        			        sbformat.append(colLengths[100]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%102$-");
        			        sbformat.append(colLengths[101]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%103$-");
        			        sbformat.append(colLengths[102]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%104$-");
        			        sbformat.append(colLengths[103]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%105$-");
        			        sbformat.append(colLengths[104]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%106$-");
        			        sbformat.append(colLengths[105]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%107$-");
        			        sbformat.append(colLengths[106]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%108$-");
        			        sbformat.append(colLengths[107]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%109$-");
        			        sbformat.append(colLengths[108]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%110$-");
        			        sbformat.append(colLengths[109]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%111$-");
        			        sbformat.append(colLengths[110]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%112$-");
        			        sbformat.append(colLengths[111]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%113$-");
        			        sbformat.append(colLengths[112]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%114$-");
        			        sbformat.append(colLengths[113]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%115$-");
        			        sbformat.append(colLengths[114]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%116$-");
        			        sbformat.append(colLengths[115]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%117$-");
        			        sbformat.append(colLengths[116]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%118$-");
        			        sbformat.append(colLengths[117]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%119$-");
        			        sbformat.append(colLengths[118]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[80] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[81] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[82] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[83] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[84] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[85] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[86] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[87] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[88] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[89] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[90] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[91] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[92] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[93] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[94] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[95] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[96] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[97] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[98] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[99] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[100] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[101] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[102] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[103] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[104] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[105] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[106] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[107] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[108] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[109] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[110] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[111] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[112] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[113] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[114] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[115] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[116] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[117] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[118] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"_Year","_Quarter","_Month","_DayofMonth","_DayOfWeek","_FlightDate","_Marketing_Airline_Network","_Operated_or_Branded_Code_Share_Partners","_DOT_ID_Marketing_Airline","_IATA_Code_Marketing_Airline","_Flight_Number_Marketing_Airline","_Originally_Scheduled_Code_Share_Airline","_DOT_ID_Originally_Scheduled_Code_Share_Airline","_IATA_Code_Originally_Scheduled_Code_Share_Airline","_Flight_Num_Originally_Scheduled_Code_Share_Airline","_Operating_Airline","_DOT_ID_Operating_Airline","_IATA_Code_Operating_Airline","_Tail_Number","_Flight_Number_Operating_Airline","_OriginAirportID","_OriginAirportSeqID","_OriginCityMarketID","_Origin","_OriginCityName","_OriginState","_OriginStateFips","_OriginStateName","_OriginWac","_DestAirportID","_DestAirportSeqID","_DestCityMarketID","_Dest","_DestCityName","_DestState","_DestStateFips","_DestStateName","_DestWac","_CRSDepTime","_DepTime","_DepDelay","_DepDelayMinutes","_DepDel15","_DepartureDelayGroups","_DepTimeBlk","_TaxiOut","_WheelsOff","_WheelsOn","_TaxiIn","_CRSArrTime","_ArrTime","_ArrDelay","_ArrDelayMinutes","_ArrDel15","_ArrivalDelayGroups","_ArrTimeBlk","_Cancelled","_CancellationCode","_Diverted","_CRSElapsedTime","_ActualElapsedTime","_AirTime","_Flights","_Distance","_DistanceGroup","_CarrierDelay","_WeatherDelay","_NASDelay","_SecurityDelay","_LateAircraftDelay","_FirstDepTime","_TotalAddGTime","_LongestAddGTime","_DivAirportLandings","_DivReachedDest","_DivActualElapsedTime","_DivArrDelay","_DivDistance","_Div1Airport","_Div1AirportID","_Div1AirportSeqID","_Div1WheelsOn","_Div1TotalGTime","_Div1LongestGTime","_Div1WheelsOff","_Div1TailNum","_Div2Airport","_Div2AirportID","_Div2AirportSeqID","_Div2WheelsOn","_Div2TotalGTime","_Div2LongestGTime","_Div2WheelsOff","_Div2TailNum","_Div3Airport","_Div3AirportID","_Div3AirportSeqID","_Div3WheelsOn","_Div3TotalGTime","_Div3LongestGTime","_Div3WheelsOff","_Div3TailNum","_Div4Airport","_Div4AirportID","_Div4AirportSeqID","_Div4WheelsOn","_Div4TotalGTime","_Div4LongestGTime","_Div4WheelsOff","_Div4TailNum","_Div5Airport","_Div5AirportID","_Div5AirportSeqID","_Div5WheelsOn","_Div5TotalGTime","_Div5LongestGTime","_Div5WheelsOff","_Div5TailNum","_Duplicate",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			

				class LogRowUtil_tLogRow_1{
						public void putTableVerticalValue_0(final row2Struct row2,String[] row_tLogRow_1){   				
	    					if(row2._Year != null) { //              
                 				row_tLogRow_1[0]=    						    
				                String.valueOf(row2._Year)			
					          ;	
	    					} //   				
	    					if(row2._Quarter != null) { //              
                 				row_tLogRow_1[1]=    						    
				                String.valueOf(row2._Quarter)			
					          ;	
	    					} //   				
	    					if(row2._Month != null) { //              
                 				row_tLogRow_1[2]=    						    
				                String.valueOf(row2._Month)			
					          ;	
	    					} //   				
	    					if(row2._DayofMonth != null) { //              
                 				row_tLogRow_1[3]=    						    
				                String.valueOf(row2._DayofMonth)			
					          ;	
	    					} //   				
	    					if(row2._DayOfWeek != null) { //              
                 				row_tLogRow_1[4]=    						    
				                String.valueOf(row2._DayOfWeek)			
					          ;	
	    					} //   				
	    					if(row2._FlightDate != null) { //              
                 				row_tLogRow_1[5]=    						    
				                String.valueOf(row2._FlightDate)			
					          ;	
	    					} //   				
	    					if(row2._Marketing_Airline_Network != null) { //              
                 				row_tLogRow_1[6]=    						    
				                String.valueOf(row2._Marketing_Airline_Network)			
					          ;	
	    					} //   				
	    					if(row2._Operated_or_Branded_Code_Share_Partners != null) { //              
                 				row_tLogRow_1[7]=    						    
				                String.valueOf(row2._Operated_or_Branded_Code_Share_Partners)			
					          ;	
	    					} //   				
	    					if(row2._DOT_ID_Marketing_Airline != null) { //              
                 				row_tLogRow_1[8]=    						    
				                String.valueOf(row2._DOT_ID_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2._IATA_Code_Marketing_Airline != null) { //              
                 				row_tLogRow_1[9]=    						    
				                String.valueOf(row2._IATA_Code_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2._Flight_Number_Marketing_Airline != null) { //              
                 				row_tLogRow_1[10]=    						    
				                String.valueOf(row2._Flight_Number_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2._Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[11]=    						    
				                String.valueOf(row2._Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2._DOT_ID_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[12]=    						    
				                String.valueOf(row2._DOT_ID_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2._IATA_Code_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[13]=    						    
				                String.valueOf(row2._IATA_Code_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2._Flight_Num_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[14]=    						    
				                String.valueOf(row2._Flight_Num_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2._Operating_Airline != null) { //              
                 				row_tLogRow_1[15]=    						    
				                String.valueOf(row2._Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2._DOT_ID_Operating_Airline != null) { //              
                 				row_tLogRow_1[16]=    						    
				                String.valueOf(row2._DOT_ID_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2._IATA_Code_Operating_Airline != null) { //              
                 				row_tLogRow_1[17]=    						    
				                String.valueOf(row2._IATA_Code_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2._Tail_Number != null) { //              
                 				row_tLogRow_1[18]=    						    
				                String.valueOf(row2._Tail_Number)			
					          ;	
	    					} //   				
	    					if(row2._Flight_Number_Operating_Airline != null) { //              
                 				row_tLogRow_1[19]=    						    
				                String.valueOf(row2._Flight_Number_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2._OriginAirportID != null) { //              
                 				row_tLogRow_1[20]=    						    
				                String.valueOf(row2._OriginAirportID)			
					          ;	
	    					} //   				
	    					if(row2._OriginAirportSeqID != null) { //              
                 				row_tLogRow_1[21]=    						    
				                String.valueOf(row2._OriginAirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._OriginCityMarketID != null) { //              
                 				row_tLogRow_1[22]=    						    
				                String.valueOf(row2._OriginCityMarketID)			
					          ;	
	    					} //   				
	    					if(row2._Origin != null) { //              
                 				row_tLogRow_1[23]=    						    
				                String.valueOf(row2._Origin)			
					          ;	
	    					} //   				
	    					if(row2._OriginCityName != null) { //              
                 				row_tLogRow_1[24]=    						    
				                String.valueOf(row2._OriginCityName)			
					          ;	
	    					} //   				
	    					if(row2._OriginState != null) { //              
                 				row_tLogRow_1[25]=    						    
				                String.valueOf(row2._OriginState)			
					          ;	
	    					} //   				
	    					if(row2._OriginStateFips != null) { //              
                 				row_tLogRow_1[26]=    						    
				                String.valueOf(row2._OriginStateFips)			
					          ;	
	    					} //   				
	    					if(row2._OriginStateName != null) { //              
                 				row_tLogRow_1[27]=    						    
				                String.valueOf(row2._OriginStateName)			
					          ;	
	    					} //   				
	    					if(row2._OriginWac != null) { //              
                 				row_tLogRow_1[28]=    						    
				                String.valueOf(row2._OriginWac)			
					          ;	
	    					} //   				
	    					if(row2._DestAirportID != null) { //              
                 				row_tLogRow_1[29]=    						    
				                String.valueOf(row2._DestAirportID)			
					          ;	
	    					} //   				
	    					if(row2._DestAirportSeqID != null) { //              
                 				row_tLogRow_1[30]=    						    
				                String.valueOf(row2._DestAirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._DestCityMarketID != null) { //              
                 				row_tLogRow_1[31]=    						    
				                String.valueOf(row2._DestCityMarketID)			
					          ;	
	    					} //   				
	    					if(row2._Dest != null) { //              
                 				row_tLogRow_1[32]=    						    
				                String.valueOf(row2._Dest)			
					          ;	
	    					} //   				
	    					if(row2._DestCityName != null) { //              
                 				row_tLogRow_1[33]=    						    
				                String.valueOf(row2._DestCityName)			
					          ;	
	    					} //   				
	    					if(row2._DestState != null) { //              
                 				row_tLogRow_1[34]=    						    
				                String.valueOf(row2._DestState)			
					          ;	
	    					} //   				
	    					if(row2._DestStateFips != null) { //              
                 				row_tLogRow_1[35]=    						    
				                String.valueOf(row2._DestStateFips)			
					          ;	
	    					} //   				
	    					if(row2._DestStateName != null) { //              
                 				row_tLogRow_1[36]=    						    
				                String.valueOf(row2._DestStateName)			
					          ;	
	    					} //   				
	    					if(row2._DestWac != null) { //              
                 				row_tLogRow_1[37]=    						    
				                String.valueOf(row2._DestWac)			
					          ;	
	    					} //   				
	    					if(row2._CRSDepTime != null) { //              
                 				row_tLogRow_1[38]=    						    
				                String.valueOf(row2._CRSDepTime)			
					          ;	
	    					} //   				
	    					if(row2._DepTime != null) { //              
                 				row_tLogRow_1[39]=    						    
				                String.valueOf(row2._DepTime)			
					          ;	
	    					} //   				
	    					if(row2._DepDelay != null) { //              
                 				row_tLogRow_1[40]=    						    
				                String.valueOf(row2._DepDelay)			
					          ;	
	    					} //   				
	    					if(row2._DepDelayMinutes != null) { //              
                 				row_tLogRow_1[41]=    						    
				                String.valueOf(row2._DepDelayMinutes)			
					          ;	
	    					} //   				
	    					if(row2._DepDel15 != null) { //              
                 				row_tLogRow_1[42]=    						    
				                String.valueOf(row2._DepDel15)			
					          ;	
	    					} //   				
	    					if(row2._DepartureDelayGroups != null) { //              
                 				row_tLogRow_1[43]=    						    
				                String.valueOf(row2._DepartureDelayGroups)			
					          ;	
	    					} //   				
	    					if(row2._DepTimeBlk != null) { //              
                 				row_tLogRow_1[44]=    						    
				                String.valueOf(row2._DepTimeBlk)			
					          ;	
	    					} //   				
	    					if(row2._TaxiOut != null) { //              
                 				row_tLogRow_1[45]=    						    
				                String.valueOf(row2._TaxiOut)			
					          ;	
	    					} //   				
	    					if(row2._WheelsOff != null) { //              
                 				row_tLogRow_1[46]=    						    
				                String.valueOf(row2._WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._WheelsOn != null) { //              
                 				row_tLogRow_1[47]=    						    
				                String.valueOf(row2._WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._TaxiIn != null) { //              
                 				row_tLogRow_1[48]=    						    
				                String.valueOf(row2._TaxiIn)			
					          ;	
	    					} //   				
	    					if(row2._CRSArrTime != null) { //              
                 				row_tLogRow_1[49]=    						    
				                String.valueOf(row2._CRSArrTime)			
					          ;	
	    					} //   				
	    					if(row2._ArrTime != null) { //              
                 				row_tLogRow_1[50]=    						    
				                String.valueOf(row2._ArrTime)			
					          ;	
	    					} //   				
	    					if(row2._ArrDelay != null) { //              
                 				row_tLogRow_1[51]=    						    
				                String.valueOf(row2._ArrDelay)			
					          ;	
	    					} //   				
	    					if(row2._ArrDelayMinutes != null) { //              
                 				row_tLogRow_1[52]=    						    
				                String.valueOf(row2._ArrDelayMinutes)			
					          ;	
	    					} //   				
	    					if(row2._ArrDel15 != null) { //              
                 				row_tLogRow_1[53]=    						    
				                String.valueOf(row2._ArrDel15)			
					          ;	
	    					} //   				
	    					if(row2._ArrivalDelayGroups != null) { //              
                 				row_tLogRow_1[54]=    						    
				                String.valueOf(row2._ArrivalDelayGroups)			
					          ;	
	    					} //   				
	    					if(row2._ArrTimeBlk != null) { //              
                 				row_tLogRow_1[55]=    						    
				                String.valueOf(row2._ArrTimeBlk)			
					          ;	
	    					} //   				
	    					if(row2._Cancelled != null) { //              
                 				row_tLogRow_1[56]=    						    
				                String.valueOf(row2._Cancelled)			
					          ;	
	    					} //   				
	    					if(row2._CancellationCode != null) { //              
                 				row_tLogRow_1[57]=    						    
				                String.valueOf(row2._CancellationCode)			
					          ;	
	    					} //   				
	    					if(row2._Diverted != null) { //              
                 				row_tLogRow_1[58]=    						
								FormatterUtils.formatUnwithE(row2._Diverted)
					          ;	
	    					} //   				
	    					if(row2._CRSElapsedTime != null) { //              
                 				row_tLogRow_1[59]=    						    
				                String.valueOf(row2._CRSElapsedTime)			
					          ;	
	    					} //   				
	    					if(row2._ActualElapsedTime != null) { //              
                 				row_tLogRow_1[60]=    						
								FormatterUtils.formatUnwithE(row2._ActualElapsedTime)
					          ;	
	    					} //   				
	    					if(row2._AirTime != null) { //              
                 				row_tLogRow_1[61]=    						
								FormatterUtils.formatUnwithE(row2._AirTime)
					          ;	
	    					} //   				
	    					if(row2._Flights != null) { //              
                 				row_tLogRow_1[62]=    						    
				                String.valueOf(row2._Flights)			
					          ;	
	    					} //   				
	    					if(row2._Distance != null) { //              
                 				row_tLogRow_1[63]=    						    
				                String.valueOf(row2._Distance)			
					          ;	
	    					} //   				
	    					if(row2._DistanceGroup != null) { //              
                 				row_tLogRow_1[64]=    						
								FormatterUtils.formatUnwithE(row2._DistanceGroup)
					          ;	
	    					} //   				
	    					if(row2._CarrierDelay != null) { //              
                 				row_tLogRow_1[65]=    						
								FormatterUtils.formatUnwithE(row2._CarrierDelay)
					          ;	
	    					} //   				
	    					if(row2._WeatherDelay != null) { //              
                 				row_tLogRow_1[66]=    						    
				                String.valueOf(row2._WeatherDelay)			
					          ;	
	    					} //   				
	    					if(row2._NASDelay != null) { //              
                 				row_tLogRow_1[67]=    						    
				                String.valueOf(row2._NASDelay)			
					          ;	
	    					} //   				
	    					if(row2._SecurityDelay != null) { //              
                 				row_tLogRow_1[68]=    						    
				                String.valueOf(row2._SecurityDelay)			
					          ;	
	    					} //   				
	    					if(row2._LateAircraftDelay != null) { //              
                 				row_tLogRow_1[69]=    						    
				                String.valueOf(row2._LateAircraftDelay)			
					          ;	
	    					} //   				
	    					if(row2._FirstDepTime != null) { //              
                 				row_tLogRow_1[70]=    						    
				                String.valueOf(row2._FirstDepTime)			
					          ;	
	    					} //   				
	    					if(row2._TotalAddGTime != null) { //              
                 				row_tLogRow_1[71]=    						    
				                String.valueOf(row2._TotalAddGTime)			
					          ;	
	    					} //   				
	    					if(row2._LongestAddGTime != null) { //              
                 				row_tLogRow_1[72]=    						    
				                String.valueOf(row2._LongestAddGTime)			
					          ;	
	    					} //   				
	    					if(row2._DivAirportLandings != null) { //              
                 				row_tLogRow_1[73]=    						    
				                String.valueOf(row2._DivAirportLandings)			
					          ;	
	    					} //   				
	    					if(row2._DivReachedDest != null) { //              
                 				row_tLogRow_1[74]=    						    
				                String.valueOf(row2._DivReachedDest)			
					          ;	
	    					} //   				
	    					if(row2._DivActualElapsedTime != null) { //              
                 				row_tLogRow_1[75]=    						    
				                String.valueOf(row2._DivActualElapsedTime)			
					          ;	
	    					} //   				
	    					if(row2._DivArrDelay != null) { //              
                 				row_tLogRow_1[76]=    						    
				                String.valueOf(row2._DivArrDelay)			
					          ;	
	    					} //   				
	    					if(row2._DivDistance != null) { //              
                 				row_tLogRow_1[77]=    						    
				                String.valueOf(row2._DivDistance)			
					          ;	
	    					} //   				
	    					if(row2._Div1Airport != null) { //              
                 				row_tLogRow_1[78]=    						    
				                String.valueOf(row2._Div1Airport)			
					          ;	
	    					} //   				
	    					if(row2._Div1AirportID != null) { //              
                 				row_tLogRow_1[79]=    						    
				                String.valueOf(row2._Div1AirportID)			
					          ;	
	    					} //   				
	    					if(row2._Div1AirportSeqID != null) { //              
                 				row_tLogRow_1[80]=    						    
				                String.valueOf(row2._Div1AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._Div1WheelsOn != null) { //              
                 				row_tLogRow_1[81]=    						    
				                String.valueOf(row2._Div1WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._Div1TotalGTime != null) { //              
                 				row_tLogRow_1[82]=    						    
				                String.valueOf(row2._Div1TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div1LongestGTime != null) { //              
                 				row_tLogRow_1[83]=    						    
				                String.valueOf(row2._Div1LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div1WheelsOff != null) { //              
                 				row_tLogRow_1[84]=    						    
				                String.valueOf(row2._Div1WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._Div1TailNum != null) { //              
                 				row_tLogRow_1[85]=    						    
				                String.valueOf(row2._Div1TailNum)			
					          ;	
	    					} //   				
	    					if(row2._Div2Airport != null) { //              
                 				row_tLogRow_1[86]=    						    
				                String.valueOf(row2._Div2Airport)			
					          ;	
	    					} //   				
	    					if(row2._Div2AirportID != null) { //              
                 				row_tLogRow_1[87]=    						    
				                String.valueOf(row2._Div2AirportID)			
					          ;	
	    					} //   				
	    					if(row2._Div2AirportSeqID != null) { //              
                 				row_tLogRow_1[88]=    						    
				                String.valueOf(row2._Div2AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._Div2WheelsOn != null) { //              
                 				row_tLogRow_1[89]=    						    
				                String.valueOf(row2._Div2WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._Div2TotalGTime != null) { //              
                 				row_tLogRow_1[90]=    						    
				                String.valueOf(row2._Div2TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div2LongestGTime != null) { //              
                 				row_tLogRow_1[91]=    						    
				                String.valueOf(row2._Div2LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div2WheelsOff != null) { //              
                 				row_tLogRow_1[92]=    						    
				                String.valueOf(row2._Div2WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._Div2TailNum != null) { //              
                 				row_tLogRow_1[93]=    						    
				                String.valueOf(row2._Div2TailNum)			
					          ;	
	    					} //   				
	    					if(row2._Div3Airport != null) { //              
                 				row_tLogRow_1[94]=    						    
				                String.valueOf(row2._Div3Airport)			
					          ;	
	    					} //   				
	    					if(row2._Div3AirportID != null) { //              
                 				row_tLogRow_1[95]=    						    
				                String.valueOf(row2._Div3AirportID)			
					          ;	
	    					} //   				
	    					if(row2._Div3AirportSeqID != null) { //              
                 				row_tLogRow_1[96]=    						    
				                String.valueOf(row2._Div3AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._Div3WheelsOn != null) { //              
                 				row_tLogRow_1[97]=    						    
				                String.valueOf(row2._Div3WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._Div3TotalGTime != null) { //              
                 				row_tLogRow_1[98]=    						    
				                String.valueOf(row2._Div3TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div3LongestGTime != null) { //              
                 				row_tLogRow_1[99]=    						    
				                String.valueOf(row2._Div3LongestGTime)			
					          ;	
	    					} //
						}
						public void putTableVerticalValue_1(final row2Struct row2,String[] row_tLogRow_1){   				
	    					if(row2._Div3WheelsOff != null) { //              
                 				row_tLogRow_1[100]=    						    
				                String.valueOf(row2._Div3WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._Div3TailNum != null) { //              
                 				row_tLogRow_1[101]=    						    
				                String.valueOf(row2._Div3TailNum)			
					          ;	
	    					} //   				
	    					if(row2._Div4Airport != null) { //              
                 				row_tLogRow_1[102]=    						    
				                String.valueOf(row2._Div4Airport)			
					          ;	
	    					} //   				
	    					if(row2._Div4AirportID != null) { //              
                 				row_tLogRow_1[103]=    						    
				                String.valueOf(row2._Div4AirportID)			
					          ;	
	    					} //   				
	    					if(row2._Div4AirportSeqID != null) { //              
                 				row_tLogRow_1[104]=    						    
				                String.valueOf(row2._Div4AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._Div4WheelsOn != null) { //              
                 				row_tLogRow_1[105]=    						    
				                String.valueOf(row2._Div4WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._Div4TotalGTime != null) { //              
                 				row_tLogRow_1[106]=    						    
				                String.valueOf(row2._Div4TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div4LongestGTime != null) { //              
                 				row_tLogRow_1[107]=    						    
				                String.valueOf(row2._Div4LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div4WheelsOff != null) { //              
                 				row_tLogRow_1[108]=    						    
				                String.valueOf(row2._Div4WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._Div4TailNum != null) { //              
                 				row_tLogRow_1[109]=    						    
				                String.valueOf(row2._Div4TailNum)			
					          ;	
	    					} //   				
	    					if(row2._Div5Airport != null) { //              
                 				row_tLogRow_1[110]=    						    
				                String.valueOf(row2._Div5Airport)			
					          ;	
	    					} //   				
	    					if(row2._Div5AirportID != null) { //              
                 				row_tLogRow_1[111]=    						    
				                String.valueOf(row2._Div5AirportID)			
					          ;	
	    					} //   				
	    					if(row2._Div5AirportSeqID != null) { //              
                 				row_tLogRow_1[112]=    						    
				                String.valueOf(row2._Div5AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2._Div5WheelsOn != null) { //              
                 				row_tLogRow_1[113]=    						    
				                String.valueOf(row2._Div5WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2._Div5TotalGTime != null) { //              
                 				row_tLogRow_1[114]=    						    
				                String.valueOf(row2._Div5TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div5LongestGTime != null) { //              
                 				row_tLogRow_1[115]=    						    
				                String.valueOf(row2._Div5LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2._Div5WheelsOff != null) { //              
                 				row_tLogRow_1[116]=    						    
				                String.valueOf(row2._Div5WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2._Div5TailNum != null) { //              
                 				row_tLogRow_1[117]=    						    
				                String.valueOf(row2._Div5TailNum)			
					          ;	
	    					} //   				
	    					if(row2._Duplicate != null) { //              
                 				row_tLogRow_1[118]=    						    
				                String.valueOf(row2._Duplicate)			
					          ;	
	    					} //
						}
			}
			LogRowUtil_tLogRow_1 logRowUtil_tLogRow_1=new LogRowUtil_tLogRow_1();


 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String _FlightDate;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this._FlightDate == null) ? 0 : this._FlightDate.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this._FlightDate == null) {
										if (other._FlightDate != null) 
											return false;
								
									} else if (!this._FlightDate.equals(other._FlightDate))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._Year = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Year", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._Year = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._Quarter = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Quarter", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._Quarter = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._Month = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Month", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._Month = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DayofMonth = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DayofMonth", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DayofMonth = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DayOfWeek = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DayOfWeek", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DayOfWeek = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1._FlightDate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1._Marketing_Airline_Network = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1._Operated_or_Branded_Code_Share_Partners = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DOT_ID_Marketing_Airline", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DOT_ID_Marketing_Airline = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1._IATA_Code_Marketing_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1._Flight_Number_Marketing_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1._Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1._DOT_ID_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1._IATA_Code_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row1._Flight_Num_Originally_Scheduled_Code_Share_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row1._Operating_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DOT_ID_Operating_Airline", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DOT_ID_Operating_Airline = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row1._IATA_Code_Operating_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row1._Tail_Number = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row1._Flight_Number_Operating_Airline = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._OriginAirportID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginAirportID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._OriginAirportID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._OriginAirportSeqID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginAirportSeqID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._OriginAirportSeqID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._OriginCityMarketID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_OriginCityMarketID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._OriginCityMarketID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row1._Origin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row1._OriginCityName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row1._OriginState = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row1._OriginStateFips = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row1._OriginStateName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row1._OriginWac = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DestAirportID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestAirportID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DestAirportID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DestAirportSeqID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestAirportSeqID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DestAirportSeqID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DestCityMarketID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DestCityMarketID", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DestCityMarketID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._Dest = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Dest", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._Dest = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row1._DestCityName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row1._DestState = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row1._DestStateFips = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row1._DestStateName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row1._DestWac = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row1._CRSDepTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DepTime = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DepTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DepTime = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row1._DepDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row1._DepDelayMinutes = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row1._DepDel15 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row1._DepartureDelayGroups = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row1._DepTimeBlk = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row1._TaxiOut = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row1._WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row1._WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row1._TaxiIn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row1._CRSArrTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row1._ArrTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row1._ArrDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row1._ArrDelayMinutes = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row1._ArrDel15 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row1._ArrivalDelayGroups = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row1._ArrTimeBlk = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row1._Cancelled = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row1._CancellationCode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._Diverted = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_Diverted", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._Diverted = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							row1._CRSElapsedTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._ActualElapsedTime = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_ActualElapsedTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._ActualElapsedTime = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._AirTime = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_AirTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._AirTime = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							row1._Flights = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row1._Distance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DistanceGroup = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DistanceGroup", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DistanceGroup = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._CarrierDelay = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_CarrierDelay", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._CarrierDelay = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._WeatherDelay = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_WeatherDelay", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._WeatherDelay = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
							row1._NASDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
							row1._SecurityDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							row1._LateAircraftDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							row1._FirstDepTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
							row1._TotalAddGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 72;
					
							row1._LongestAddGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 73;
					
							row1._DivAirportLandings = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 74;
					
							row1._DivReachedDest = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 75;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1._DivActualElapsedTime = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"_DivActualElapsedTime", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1._DivActualElapsedTime = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 76;
					
							row1._DivArrDelay = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 77;
					
							row1._DivDistance = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 78;
					
							row1._Div1Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 79;
					
							row1._Div1AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 80;
					
							row1._Div1AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 81;
					
							row1._Div1WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 82;
					
							row1._Div1TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 83;
					
							row1._Div1LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 84;
					
							row1._Div1WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 85;
					
							row1._Div1TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 86;
					
							row1._Div2Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 87;
					
							row1._Div2AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 88;
					
							row1._Div2AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 89;
					
							row1._Div2WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 90;
					
							row1._Div2TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 91;
					
							row1._Div2LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 92;
					
							row1._Div2WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 93;
					
							row1._Div2TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 94;
					
							row1._Div3Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 95;
					
							row1._Div3AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 96;
					
							row1._Div3AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 97;
					
							row1._Div3WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 98;
					
							row1._Div3TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 99;
					
							row1._Div3LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 100;
					
							row1._Div3WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 101;
					
							row1._Div3TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 102;
					
							row1._Div4Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 103;
					
							row1._Div4AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 104;
					
							row1._Div4AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 105;
					
							row1._Div4WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 106;
					
							row1._Div4TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 107;
					
							row1._Div4LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 108;
					
							row1._Div4WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 109;
					
							row1._Div4TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 110;
					
							row1._Div5Airport = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 111;
					
							row1._Div5AirportID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 112;
					
							row1._Div5AirportSeqID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 113;
					
							row1._Div5WheelsOn = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 114;
					
							row1._Div5TotalGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 115;
					
							row1._Div5LongestGTime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 116;
					
							row1._Div5WheelsOff = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 117;
					
							row1._Div5TailNum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 118;
					
							row1._Duplicate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_1,row1 );
					
						valueToConn_1(fid_tFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flightsStage.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flightsStage.csv", "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
			rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1 );
		
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row2 = null;			
if(row1._FlightDate == null){
	finder_tUniqRow_1._FlightDate = null;
}else{
	finder_tUniqRow_1._FlightDate = row1._FlightDate.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row1._FlightDate == null){
	new_tUniqRow_1._FlightDate = null;
}else{
	new_tUniqRow_1._FlightDate = row1._FlightDate.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2._Year = row1._Year;			row2._Quarter = row1._Quarter;			row2._Month = row1._Month;			row2._DayofMonth = row1._DayofMonth;			row2._DayOfWeek = row1._DayOfWeek;			row2._FlightDate = row1._FlightDate;			row2._Marketing_Airline_Network = row1._Marketing_Airline_Network;			row2._Operated_or_Branded_Code_Share_Partners = row1._Operated_or_Branded_Code_Share_Partners;			row2._DOT_ID_Marketing_Airline = row1._DOT_ID_Marketing_Airline;			row2._IATA_Code_Marketing_Airline = row1._IATA_Code_Marketing_Airline;			row2._Flight_Number_Marketing_Airline = row1._Flight_Number_Marketing_Airline;			row2._Originally_Scheduled_Code_Share_Airline = row1._Originally_Scheduled_Code_Share_Airline;			row2._DOT_ID_Originally_Scheduled_Code_Share_Airline = row1._DOT_ID_Originally_Scheduled_Code_Share_Airline;			row2._IATA_Code_Originally_Scheduled_Code_Share_Airline = row1._IATA_Code_Originally_Scheduled_Code_Share_Airline;			row2._Flight_Num_Originally_Scheduled_Code_Share_Airline = row1._Flight_Num_Originally_Scheduled_Code_Share_Airline;			row2._Operating_Airline = row1._Operating_Airline;			row2._DOT_ID_Operating_Airline = row1._DOT_ID_Operating_Airline;			row2._IATA_Code_Operating_Airline = row1._IATA_Code_Operating_Airline;			row2._Tail_Number = row1._Tail_Number;			row2._Flight_Number_Operating_Airline = row1._Flight_Number_Operating_Airline;			row2._OriginAirportID = row1._OriginAirportID;			row2._OriginAirportSeqID = row1._OriginAirportSeqID;			row2._OriginCityMarketID = row1._OriginCityMarketID;			row2._Origin = row1._Origin;			row2._OriginCityName = row1._OriginCityName;			row2._OriginState = row1._OriginState;			row2._OriginStateFips = row1._OriginStateFips;			row2._OriginStateName = row1._OriginStateName;			row2._OriginWac = row1._OriginWac;			row2._DestAirportID = row1._DestAirportID;			row2._DestAirportSeqID = row1._DestAirportSeqID;			row2._DestCityMarketID = row1._DestCityMarketID;			row2._Dest = row1._Dest;			row2._DestCityName = row1._DestCityName;			row2._DestState = row1._DestState;			row2._DestStateFips = row1._DestStateFips;			row2._DestStateName = row1._DestStateName;			row2._DestWac = row1._DestWac;			row2._CRSDepTime = row1._CRSDepTime;			row2._DepTime = row1._DepTime;			row2._DepDelay = row1._DepDelay;			row2._DepDelayMinutes = row1._DepDelayMinutes;			row2._DepDel15 = row1._DepDel15;			row2._DepartureDelayGroups = row1._DepartureDelayGroups;			row2._DepTimeBlk = row1._DepTimeBlk;			row2._TaxiOut = row1._TaxiOut;			row2._WheelsOff = row1._WheelsOff;			row2._WheelsOn = row1._WheelsOn;			row2._TaxiIn = row1._TaxiIn;			row2._CRSArrTime = row1._CRSArrTime;			row2._ArrTime = row1._ArrTime;			row2._ArrDelay = row1._ArrDelay;			row2._ArrDelayMinutes = row1._ArrDelayMinutes;			row2._ArrDel15 = row1._ArrDel15;			row2._ArrivalDelayGroups = row1._ArrivalDelayGroups;			row2._ArrTimeBlk = row1._ArrTimeBlk;			row2._Cancelled = row1._Cancelled;			row2._CancellationCode = row1._CancellationCode;			row2._Diverted = row1._Diverted;			row2._CRSElapsedTime = row1._CRSElapsedTime;			row2._ActualElapsedTime = row1._ActualElapsedTime;			row2._AirTime = row1._AirTime;			row2._Flights = row1._Flights;			row2._Distance = row1._Distance;			row2._DistanceGroup = row1._DistanceGroup;			row2._CarrierDelay = row1._CarrierDelay;			row2._WeatherDelay = row1._WeatherDelay;			row2._NASDelay = row1._NASDelay;			row2._SecurityDelay = row1._SecurityDelay;			row2._LateAircraftDelay = row1._LateAircraftDelay;			row2._FirstDepTime = row1._FirstDepTime;			row2._TotalAddGTime = row1._TotalAddGTime;			row2._LongestAddGTime = row1._LongestAddGTime;			row2._DivAirportLandings = row1._DivAirportLandings;			row2._DivReachedDest = row1._DivReachedDest;			row2._DivActualElapsedTime = row1._DivActualElapsedTime;			row2._DivArrDelay = row1._DivArrDelay;			row2._DivDistance = row1._DivDistance;			row2._Div1Airport = row1._Div1Airport;			row2._Div1AirportID = row1._Div1AirportID;			row2._Div1AirportSeqID = row1._Div1AirportSeqID;			row2._Div1WheelsOn = row1._Div1WheelsOn;			row2._Div1TotalGTime = row1._Div1TotalGTime;			row2._Div1LongestGTime = row1._Div1LongestGTime;			row2._Div1WheelsOff = row1._Div1WheelsOff;			row2._Div1TailNum = row1._Div1TailNum;			row2._Div2Airport = row1._Div2Airport;			row2._Div2AirportID = row1._Div2AirportID;			row2._Div2AirportSeqID = row1._Div2AirportSeqID;			row2._Div2WheelsOn = row1._Div2WheelsOn;			row2._Div2TotalGTime = row1._Div2TotalGTime;			row2._Div2LongestGTime = row1._Div2LongestGTime;			row2._Div2WheelsOff = row1._Div2WheelsOff;			row2._Div2TailNum = row1._Div2TailNum;			row2._Div3Airport = row1._Div3Airport;			row2._Div3AirportID = row1._Div3AirportID;			row2._Div3AirportSeqID = row1._Div3AirportSeqID;			row2._Div3WheelsOn = row1._Div3WheelsOn;			row2._Div3TotalGTime = row1._Div3TotalGTime;			row2._Div3LongestGTime = row1._Div3LongestGTime;			row2._Div3WheelsOff = row1._Div3WheelsOff;			row2._Div3TailNum = row1._Div3TailNum;			row2._Div4Airport = row1._Div4Airport;			row2._Div4AirportID = row1._Div4AirportID;			row2._Div4AirportSeqID = row1._Div4AirportSeqID;			row2._Div4WheelsOn = row1._Div4WheelsOn;			row2._Div4TotalGTime = row1._Div4TotalGTime;			row2._Div4LongestGTime = row1._Div4LongestGTime;			row2._Div4WheelsOff = row1._Div4WheelsOff;			row2._Div4TailNum = row1._Div4TailNum;			row2._Div5Airport = row1._Div5Airport;			row2._Div5AirportID = row1._Div5AirportID;			row2._Div5AirportSeqID = row1._Div5AirportSeqID;			row2._Div5WheelsOn = row1._Div5WheelsOn;			row2._Div5TotalGTime = row1._Div5TotalGTime;			row2._Div5LongestGTime = row1._Div5LongestGTime;			row2._Div5WheelsOff = row1._Div5WheelsOff;			row2._Div5TailNum = row1._Div5TailNum;			row2._Duplicate = row1._Duplicate;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[119];

						logRowUtil_tLogRow_1.putTableVerticalValue_0(row2,row_tLogRow_1);
						logRowUtil_tLogRow_1.putTableVerticalValue_1(row2,row_tLogRow_1); 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

dimension = null;


// # Output table : 'dimension'
dimension_tmp.timePeriodId = Numeric.sequence("TimePeriodSeq", 1, 1) ;
dimension_tmp.year =  row3._Year ;
dimension_tmp.quarter = row3._Quarter ;
dimension_tmp.month =  row3._Month ;
dimension_tmp.dayOfMonth =  row3._DayofMonth ;
dimension_tmp.dayOfWeek =  row3._DayOfWeek ;
dimension_tmp.flightDate =  row3._FlightDate ;
dimension = dimension_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "dimension"
if(dimension != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dimension"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(dimension.timePeriodId != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.timePeriodId
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.year != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.year
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.quarter != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.quarter
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.month != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.month
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.dayOfMonth != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.dayOfMonth
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.dayOfWeek != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.dayOfWeek
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(dimension.flightDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            dimension.flightDate
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "dimension"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flightsStage.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dimension");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:rxUecpgyyAu4legG0DCkC7nCIpg6xHnaFm4rne5OhGOqeU7lYJHrztUkqXTsYk0sk9UN5FRMMWBNg72EduZZiURfs9Q=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PSSPPWBSHA",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "DimTimePeriod.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimTimePeriod.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("paravolar/presentation")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("paravolar/presentation", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DimTimePeriod DimTimePeriodClass = new DimTimePeriod();

        int exitCode = DimTimePeriodClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DimTimePeriod.class.getClassLoader().getResourceAsStream("paravolar/dimtimeperiod_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DimTimePeriod.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DimTimePeriod");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     385335 characters generated by Talend Open Studio for Data Integration 
 *     on the November 6, 2022 at 9:35:47 PM CST
 ************************************************************************************************/