// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package paravolar.flightfact_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FlightFact Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class FlightFact implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "FlightFact";
	private final String projectName = "PARAVOLAR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FlightFact.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FlightFact.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class factStruct implements routines.system.IPersistableRow<factStruct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer FlightId;

				public Integer getFlightId () {
					return this.FlightId;
				}
				
			    public Integer FlightNumber;

				public Integer getFlightNumber () {
					return this.FlightNumber;
				}
				
			    public Integer TimePeriodId;

				public Integer getTimePeriodId () {
					return this.TimePeriodId;
				}
				
			    public Integer AirlineId;

				public Integer getAirlineId () {
					return this.AirlineId;
				}
				
			    public Integer OriginId;

				public Integer getOriginId () {
					return this.OriginId;
				}
				
			    public Integer DestinationId;

				public Integer getDestinationId () {
					return this.DestinationId;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FlightId == null) ? 0 : this.FlightId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final factStruct other = (factStruct) obj;
		
						if (this.FlightId == null) {
							if (other.FlightId != null)
								return false;
						
						} else if (!this.FlightId.equals(other.FlightId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(factStruct other) {

		other.FlightId = this.FlightId;
	            other.FlightNumber = this.FlightNumber;
	            other.TimePeriodId = this.TimePeriodId;
	            other.AirlineId = this.AirlineId;
	            other.OriginId = this.OriginId;
	            other.DestinationId = this.DestinationId;
	            other.DepDelay = this.DepDelay;
	            other.ArrDelay = this.ArrDelay;
	            other.CarrierDelay = this.CarrierDelay;
	            other.WeatherDelay = this.WeatherDelay;
	            other.NASDelay = this.NASDelay;
	            other.SecurityDelay = this.SecurityDelay;
	            other.LateAircraftDelay = this.LateAircraftDelay;
	            other.Cancelled = this.Cancelled;
	            other.Diverted = this.Diverted;
	            
	}

	public void copyKeysDataTo(factStruct other) {

		other.FlightId = this.FlightId;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.FlightId = readInteger(dis);
					
						this.FlightNumber = readInteger(dis);
					
						this.TimePeriodId = readInteger(dis);
					
						this.AirlineId = readInteger(dis);
					
						this.OriginId = readInteger(dis);
					
						this.DestinationId = readInteger(dis);
					
					this.DepDelay = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.FlightId = readInteger(dis);
					
						this.FlightNumber = readInteger(dis);
					
						this.TimePeriodId = readInteger(dis);
					
						this.AirlineId = readInteger(dis);
					
						this.OriginId = readInteger(dis);
					
						this.DestinationId = readInteger(dis);
					
					this.DepDelay = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.FlightId,dos);
					
					// Integer
				
						writeInteger(this.FlightNumber,dos);
					
					// Integer
				
						writeInteger(this.TimePeriodId,dos);
					
					// Integer
				
						writeInteger(this.AirlineId,dos);
					
					// Integer
				
						writeInteger(this.OriginId,dos);
					
					// Integer
				
						writeInteger(this.DestinationId,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.FlightId,dos);
					
					// Integer
				
						writeInteger(this.FlightNumber,dos);
					
					// Integer
				
						writeInteger(this.TimePeriodId,dos);
					
					// Integer
				
						writeInteger(this.AirlineId,dos);
					
					// Integer
				
						writeInteger(this.OriginId,dos);
					
					// Integer
				
						writeInteger(this.DestinationId,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FlightId="+String.valueOf(FlightId));
		sb.append(",FlightNumber="+String.valueOf(FlightNumber));
		sb.append(",TimePeriodId="+String.valueOf(TimePeriodId));
		sb.append(",AirlineId="+String.valueOf(AirlineId));
		sb.append(",OriginId="+String.valueOf(OriginId));
		sb.append(",DestinationId="+String.valueOf(DestinationId));
		sb.append(",DepDelay="+DepDelay);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",Diverted="+String.valueOf(Diverted));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(factStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FlightId, other.FlightId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);
		tFileInputDelimited_3Process(globalMap);
		tFileInputDelimited_4Process(globalMap);
		tFileInputDelimited_5Process(globalMap);

		row1Struct row1 = new row1Struct();
factStruct fact = new factStruct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"fact");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/fact_flights.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[15];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="FlightId";
                                    headColutFileOutputDelimited_1[1]="FlightNumber";
                                    headColutFileOutputDelimited_1[2]="TimePeriodId";
                                    headColutFileOutputDelimited_1[3]="AirlineId";
                                    headColutFileOutputDelimited_1[4]="OriginId";
                                    headColutFileOutputDelimited_1[5]="DestinationId";
                                    headColutFileOutputDelimited_1[6]="DepDelay";
                                    headColutFileOutputDelimited_1[7]="ArrDelay";
                                    headColutFileOutputDelimited_1[8]="CarrierDelay";
                                    headColutFileOutputDelimited_1[9]="WeatherDelay";
                                    headColutFileOutputDelimited_1[10]="NASDelay";
                                    headColutFileOutputDelimited_1[11]="SecurityDelay";
                                    headColutFileOutputDelimited_1[12]="LateAircraftDelay";
                                    headColutFileOutputDelimited_1[13]="Cancelled";
                                    headColutFileOutputDelimited_1[14]="Diverted";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
factStruct fact_tmp = new factStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Year = null;
					
							row1.Quarter = null;
					
							row1.Month = null;
					
							row1.DayofMonth = null;
					
							row1.DayOfWeek = null;
					
							row1.FlightDate = null;
					
							row1.Marketing_Airline_Network = null;
					
							row1.Operated_or_Branded_Code_Share_Partners = null;
					
							row1.DOT_ID_Marketing_Airline = null;
					
							row1.IATA_Code_Marketing_Airline = null;
					
							row1.Flight_Number_Marketing_Airline = null;
					
							row1.Originally_Scheduled_Code_Share_Airline = null;
					
							row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Operating_Airline = null;
					
							row1.DOT_ID_Operating_Airline = null;
					
							row1.IATA_Code_Operating_Airline = null;
					
							row1.Tail_Number = null;
					
							row1.Flight_Number_Operating_Airline = null;
					
							row1.OriginAirportID = null;
					
							row1.OriginAirportSeqID = null;
					
							row1.OriginCityMarketID = null;
					
							row1.Origin = null;
					
							row1.OriginCityName = null;
					
							row1.OriginState = null;
					
							row1.OriginStateFips = null;
					
							row1.OriginStateName = null;
					
							row1.OriginWac = null;
					
							row1.DestAirportID = null;
					
							row1.DestAirportSeqID = null;
					
							row1.DestCityMarketID = null;
					
							row1.Dest = null;
					
							row1.DestCityName = null;
					
							row1.DestState = null;
					
							row1.DestStateFips = null;
					
							row1.DestStateName = null;
					
							row1.DestWac = null;
					
							row1.CRSDepTime = null;
					
							row1.DepTime = null;
					
							row1.DepDelay = null;
					
							row1.DepDelayMinutes = null;
					
							row1.DepDel15 = null;
					
							row1.DepartureDelayGroups = null;
					
							row1.DepTimeBlk = null;
					
							row1.TaxiOut = null;
					
							row1.WheelsOff = null;
					
							row1.WheelsOn = null;
					
							row1.TaxiIn = null;
					
							row1.CRSArrTime = null;
					
							row1.ArrTime = null;
					
							row1.ArrDelay = null;
					
							row1.ArrDelayMinutes = null;
					
							row1.ArrDel15 = null;
					
							row1.ArrivalDelayGroups = null;
					
							row1.ArrTimeBlk = null;
					
							row1.Cancelled = null;
					
							row1.CancellationCode = null;
					
							row1.Diverted = null;
					
							row1.CRSElapsedTime = null;
					
							row1.ActualElapsedTime = null;
					
							row1.AirTime = null;
					
							row1.Flights = null;
					
							row1.Distance = null;
					
							row1.DistanceGroup = null;
					
							row1.CarrierDelay = null;
					
							row1.WeatherDelay = null;
					
							row1.NASDelay = null;
					
							row1.SecurityDelay = null;
					
							row1.LateAircraftDelay = null;
					
							row1.FirstDepTime = null;
					
							row1.TotalAddGTime = null;
					
							row1.LongestAddGTime = null;
					
							row1.DivAirportLandings = null;
					
							row1.DivReachedDest = null;
					
							row1.DivActualElapsedTime = null;
					
							row1.DivArrDelay = null;
					
							row1.DivDistance = null;
					
							row1.Div1Airport = null;
					
							row1.Div1AirportID = null;
					
							row1.Div1AirportSeqID = null;
					
							row1.Div1WheelsOn = null;
					
							row1.Div1TotalGTime = null;
					
							row1.Div1LongestGTime = null;
					
							row1.Div1WheelsOff = null;
					
							row1.Div1TailNum = null;
					
							row1.Div2Airport = null;
					
							row1.Div2AirportID = null;
					
							row1.Div2AirportSeqID = null;
					
							row1.Div2WheelsOn = null;
					
							row1.Div2TotalGTime = null;
					
							row1.Div2LongestGTime = null;
					
							row1.Div2WheelsOff = null;
					
							row1.Div2TailNum = null;
					
							row1.Div3Airport = null;
					
							row1.Div3AirportID = null;
					
							row1.Div3AirportSeqID = null;
					
							row1.Div3WheelsOn = null;
					
							row1.Div3TotalGTime = null;
					
							row1.Div3LongestGTime = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Year", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Quarter", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Month", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayofMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayofMonth", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayofMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayofMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayOfWeek", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FlightDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FlightDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Marketing_Airline_Network = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Marketing_Airline_Network = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operated_or_Branded_Code_Share_Partners = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operated_or_Branded_Code_Share_Partners = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Marketing_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tail_Number = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tail_Number = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Origin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Origin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Dest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Dest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepartureDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepartureDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiOut = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiOut = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiIn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiIn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrivalDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrivalDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Cancelled = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Cancelled", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Cancelled = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Cancelled = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CancellationCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CancellationCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Diverted = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Diverted", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Diverted = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Diverted = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CRSElapsedTime = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CRSElapsedTime", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CRSElapsedTime = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CRSElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AirTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AirTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flights = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flights", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flights = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flights = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Distance = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Distance", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Distance = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Distance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DistanceGroup = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DistanceGroup", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DistanceGroup = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DistanceGroup = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CarrierDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CarrierDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WeatherDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WeatherDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NASDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NASDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SecurityDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SecurityDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LateAircraftDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LateAircraftDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FirstDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FirstDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TotalAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TotalAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LongestAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LongestAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DivAirportLandings = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DivAirportLandings", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DivAirportLandings = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DivAirportLandings = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivReachedDest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivReachedDest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivDistance = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivDistance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3LongestGTime = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Div3WheelsOff = null;
					
							row1.Div3TailNum = null;
					
							row1.Div4Airport = null;
					
							row1.Div4AirportID = null;
					
							row1.Div4AirportSeqID = null;
					
							row1.Div4WheelsOn = null;
					
							row1.Div4TotalGTime = null;
					
							row1.Div4LongestGTime = null;
					
							row1.Div4WheelsOff = null;
					
							row1.Div4TailNum = null;
					
							row1.Div5Airport = null;
					
							row1.Div5AirportID = null;
					
							row1.Div5AirportSeqID = null;
					
							row1.Div5WheelsOn = null;
					
							row1.Div5TotalGTime = null;
					
							row1.Div5LongestGTime = null;
					
							row1.Div5WheelsOff = null;
					
							row1.Div5TailNum = null;
					
							row1.Duplicate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Duplicate = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Duplicate", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Duplicate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Duplicate = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_1,row1 );
					
						valueToConn_1(rowtFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageUpdated.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
		        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
			rowHelper_tFileInputDelimited_1.valueToConn(rowtFileInputDelimited_1, row1 );
		
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
            							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.destinationKey = row1.DestAirportID ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.destinationKey = '" + row2HashKey.destinationKey + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.flightDate = row1.FlightDate ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.flightDate = '" + row3HashKey.flightDate + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row4HashKey.originKey = row1.OriginAirportID ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.originKey = '" + row4HashKey.originKey + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row5HashKey.Code = row1.IATA_Code_Marketing_Airline ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.Code = '" + row5HashKey.Code + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

fact = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'fact'
fact_tmp.FlightId = Numeric.sequence("FactSeq", 1, 1) ;
fact_tmp.FlightNumber = row1.Flight_Number_Marketing_Airline ;
fact_tmp.TimePeriodId = row3.timePeriodId ;
fact_tmp.AirlineId = row5.AirlineId ;
fact_tmp.OriginId = row4.originId ;
fact_tmp.DestinationId = row2.destinationId ;
fact_tmp.DepDelay = row1.DepDelay ;
fact_tmp.ArrDelay = row1.ArrDelay ;
fact_tmp.CarrierDelay = row1.CarrierDelay ;
fact_tmp.WeatherDelay = row1.WeatherDelay ;
fact_tmp.NASDelay = row1.NASDelay ;
fact_tmp.SecurityDelay = row1.SecurityDelay ;
fact_tmp.LateAircraftDelay = row1.LateAircraftDelay ;
fact_tmp.Cancelled = row1.Cancelled ;
fact_tmp.Diverted = row1.Diverted ;
fact = fact_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "fact"
if(fact != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"fact"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_1=new String[15];
                            rowtFileOutputDelimited_1[0]=fact.FlightId == null ? null : String.valueOf(fact.FlightId);
                            rowtFileOutputDelimited_1[1]=fact.FlightNumber == null ? null : String.valueOf(fact.FlightNumber);
                            rowtFileOutputDelimited_1[2]=fact.TimePeriodId == null ? null : String.valueOf(fact.TimePeriodId);
                            rowtFileOutputDelimited_1[3]=fact.AirlineId == null ? null : String.valueOf(fact.AirlineId);
                            rowtFileOutputDelimited_1[4]=fact.OriginId == null ? null : String.valueOf(fact.OriginId);
                            rowtFileOutputDelimited_1[5]=fact.DestinationId == null ? null : String.valueOf(fact.DestinationId);
                            rowtFileOutputDelimited_1[6]=fact.DepDelay == null ? null : fact.DepDelay;
                            rowtFileOutputDelimited_1[7]=fact.ArrDelay == null ? null : fact.ArrDelay;
                            rowtFileOutputDelimited_1[8]=fact.CarrierDelay == null ? null : fact.CarrierDelay;
                            rowtFileOutputDelimited_1[9]=fact.WeatherDelay == null ? null : fact.WeatherDelay;
                            rowtFileOutputDelimited_1[10]=fact.NASDelay == null ? null : fact.NASDelay;
                            rowtFileOutputDelimited_1[11]=fact.SecurityDelay == null ? null : fact.SecurityDelay;
                            rowtFileOutputDelimited_1[12]=fact.LateAircraftDelay == null ? null : fact.LateAircraftDelay;
                            rowtFileOutputDelimited_1[13]=fact.Cancelled == null ? null : String.valueOf(fact.Cancelled);
                            rowtFileOutputDelimited_1[14]=fact.Diverted == null ? null : String.valueOf(fact.Diverted);
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "fact"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"fact");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:k9M9GF7nn2D5UjU9Idd0n9hgERndqYEGaR6MdCWBC640pO65Q0Msv71I1cPV3wqMN+M/l4HkZ1GCdZPtDWUVNQdapR0=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PSSPPWBSHA",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "FactFlights.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/fact_flights.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("paravolar/presentation")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("paravolar/presentation", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer destinationId;

				public Integer getDestinationId () {
					return this.destinationId;
				}
				
			    public Integer destinationKey;

				public Integer getDestinationKey () {
					return this.destinationKey;
				}
				
			    public Integer destAirportSeqId;

				public Integer getDestAirportSeqId () {
					return this.destAirportSeqId;
				}
				
			    public String airportCode;

				public String getAirportCode () {
					return this.airportCode;
				}
				
			    public String cityName;

				public String getCityName () {
					return this.cityName;
				}
				
			    public String stateCode;

				public String getStateCode () {
					return this.stateCode;
				}
				
			    public String stateName;

				public String getStateName () {
					return this.stateName;
				}
				
			    public String worldAreaCode;

				public String getWorldAreaCode () {
					return this.worldAreaCode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.destinationKey == null) ? 0 : this.destinationKey.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.destinationKey == null) {
							if (other.destinationKey != null)
								return false;
						
						} else if (!this.destinationKey.equals(other.destinationKey))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.destinationId = this.destinationId;
	            other.destinationKey = this.destinationKey;
	            other.destAirportSeqId = this.destAirportSeqId;
	            other.airportCode = this.airportCode;
	            other.cityName = this.cityName;
	            other.stateCode = this.stateCode;
	            other.stateName = this.stateName;
	            other.worldAreaCode = this.worldAreaCode;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.destinationKey = this.destinationKey;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.destinationKey = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.destinationKey = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.destinationKey,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.destinationKey,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.destinationId = readInteger(dis,ois);
					
						this.destAirportSeqId = readInteger(dis,ois);
					
						this.airportCode = readString(dis,ois);
					
						this.cityName = readString(dis,ois);
					
						this.stateCode = readString(dis,ois);
					
						this.stateName = readString(dis,ois);
					
						this.worldAreaCode = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.destinationId = readInteger(dis,objectIn);
					
						this.destAirportSeqId = readInteger(dis,objectIn);
					
						this.airportCode = readString(dis,objectIn);
					
						this.cityName = readString(dis,objectIn);
					
						this.stateCode = readString(dis,objectIn);
					
						this.stateName = readString(dis,objectIn);
					
						this.worldAreaCode = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.destinationId, dos, oos);
					
					writeInteger(this.destAirportSeqId, dos, oos);
					
						writeString(this.airportCode, dos, oos);
					
						writeString(this.cityName, dos, oos);
					
						writeString(this.stateCode, dos, oos);
					
						writeString(this.stateName, dos, oos);
					
						writeString(this.worldAreaCode, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.destinationId, dos, objectOut);
					
					writeInteger(this.destAirportSeqId, dos, objectOut);
					
						writeString(this.airportCode, dos, objectOut);
					
						writeString(this.cityName, dos, objectOut);
					
						writeString(this.stateCode, dos, objectOut);
					
						writeString(this.stateName, dos, objectOut);
					
						writeString(this.worldAreaCode, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("destinationId="+String.valueOf(destinationId));
		sb.append(",destinationKey="+String.valueOf(destinationKey));
		sb.append(",destAirportSeqId="+String.valueOf(destAirportSeqId));
		sb.append(",airportCode="+airportCode);
		sb.append(",cityName="+cityName);
		sb.append(",stateCode="+stateCode);
		sb.append(",stateName="+stateName);
		sb.append(",worldAreaCode="+worldAreaCode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.destinationKey, other.destinationKey);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(fact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimDestination.csv"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_2),fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_2),fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
		        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.destinationId = null;
					
							row2.destinationKey = null;
					
							row2.destAirportSeqId = null;
					
							row2.airportCode = null;
					
							row2.cityName = null;
					
							row2.stateCode = null;
					
							row2.stateName = null;
					
							row2.worldAreaCode = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.destinationId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"destinationId", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.destinationId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.destinationId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.destinationKey = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"destinationKey", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.destinationKey = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.destinationKey = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.destAirportSeqId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"destAirportSeqId", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.destAirportSeqId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.destAirportSeqId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.airportCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.airportCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.cityName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.cityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.stateCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.stateCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.stateName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.stateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.worldAreaCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.worldAreaCode = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
            							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.destinationId = row2.destinationId;
				
				row2_HashRow.destinationKey = row2.destinationKey;
				
				row2_HashRow.destAirportSeqId = row2.destAirportSeqId;
				
				row2_HashRow.airportCode = row2.airportCode;
				
				row2_HashRow.cityName = row2.cityName;
				
				row2_HashRow.stateCode = row2.stateCode;
				
				row2_HashRow.stateName = row2.stateName;
				
				row2_HashRow.worldAreaCode = row2.worldAreaCode;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer timePeriodId;

				public Integer getTimePeriodId () {
					return this.timePeriodId;
				}
				
			    public Integer year;

				public Integer getYear () {
					return this.year;
				}
				
			    public Integer quarter;

				public Integer getQuarter () {
					return this.quarter;
				}
				
			    public Integer month;

				public Integer getMonth () {
					return this.month;
				}
				
			    public Integer dayOfMonth;

				public Integer getDayOfMonth () {
					return this.dayOfMonth;
				}
				
			    public Integer dayOfWeek;

				public Integer getDayOfWeek () {
					return this.dayOfWeek;
				}
				
			    public String flightDate;

				public String getFlightDate () {
					return this.flightDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.flightDate == null) ? 0 : this.flightDate.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.flightDate == null) {
							if (other.flightDate != null)
								return false;
						
						} else if (!this.flightDate.equals(other.flightDate))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.timePeriodId = this.timePeriodId;
	            other.year = this.year;
	            other.quarter = this.quarter;
	            other.month = this.month;
	            other.dayOfMonth = this.dayOfMonth;
	            other.dayOfWeek = this.dayOfWeek;
	            other.flightDate = this.flightDate;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.flightDate = this.flightDate;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
					this.flightDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
					this.flightDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.flightDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.flightDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.timePeriodId = readInteger(dis,ois);
					
						this.year = readInteger(dis,ois);
					
						this.quarter = readInteger(dis,ois);
					
						this.month = readInteger(dis,ois);
					
						this.dayOfMonth = readInteger(dis,ois);
					
						this.dayOfWeek = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.timePeriodId = readInteger(dis,objectIn);
					
						this.year = readInteger(dis,objectIn);
					
						this.quarter = readInteger(dis,objectIn);
					
						this.month = readInteger(dis,objectIn);
					
						this.dayOfMonth = readInteger(dis,objectIn);
					
						this.dayOfWeek = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.timePeriodId, dos, oos);
					
					writeInteger(this.year, dos, oos);
					
					writeInteger(this.quarter, dos, oos);
					
					writeInteger(this.month, dos, oos);
					
					writeInteger(this.dayOfMonth, dos, oos);
					
					writeInteger(this.dayOfWeek, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.timePeriodId, dos, objectOut);
					
					writeInteger(this.year, dos, objectOut);
					
					writeInteger(this.quarter, dos, objectOut);
					
					writeInteger(this.month, dos, objectOut);
					
					writeInteger(this.dayOfMonth, dos, objectOut);
					
					writeInteger(this.dayOfWeek, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("timePeriodId="+String.valueOf(timePeriodId));
		sb.append(",year="+String.valueOf(year));
		sb.append(",quarter="+String.valueOf(quarter));
		sb.append(",month="+String.valueOf(month));
		sb.append(",dayOfMonth="+String.valueOf(dayOfMonth));
		sb.append(",dayOfWeek="+String.valueOf(dayOfWeek));
		sb.append(",flightDate="+flightDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.flightDate, other.flightDate);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(fact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;	
				
				char fieldSeparator_tFileInputDelimited_3[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_3[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_3 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimTimePeriod.csv"/** End field tFileInputDelimited_3:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;
	
				try{
					
						String[] rowtFileInputDelimited_3=null;
						int currentLinetFileInputDelimited_3 = 0;
	        			int outputLinetFileInputDelimited_3 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0;
			if(footer_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_3),fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_3.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )
	        			csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
	        				csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_3 > 0){
						for(totalLinetFileInputDelimited_3=0;totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++){
							csvReadertFileInputDelimited_3.readNext();
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_3.readNext()) {
							
								rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
								if(!(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_3++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3   < 0? 0 : totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3 ;
	            		if(lastLinetFileInputDelimited_3 > 0){
	                		lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3 : lastLineTemptFileInputDelimited_3; 
	            		}else {
	                		lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
	            		}
	         
			          	csvReadertFileInputDelimited_3.close();
				        if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_3),fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )	
	        				csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
							csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_3 != 0){
			        	for(currentLinetFileInputDelimited_3=0;currentLinetFileInputDelimited_3 < 1;currentLinetFileInputDelimited_3++){
			        		csvReadertFileInputDelimited_3.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3!=null && csvReadertFileInputDelimited_3.readNext() ) { 
	        		rowstate_tFileInputDelimited_3.reset();
	        
		        	rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
		        	
					
	        			if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_3++;
	            
		            if(lastLinetFileInputDelimited_3 > -1 && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_3++;
	            	if (limittFileInputDelimited_3 > 0 && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
	                	break;
	            	}  
	                                                                      
					
	    							row3 = null;			
								
	    							row3 = null;			
								
								boolean whetherReject_tFileInputDelimited_3 = false;
								row3 = new row3Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row3.timePeriodId = null;
					
							row3.year = null;
					
							row3.quarter = null;
					
							row3.month = null;
					
							row3.dayOfMonth = null;
					
							row3.dayOfWeek = null;
					
							row3.flightDate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.timePeriodId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"timePeriodId", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.timePeriodId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.timePeriodId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"year", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"quarter", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"month", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.dayOfMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"dayOfMonth", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.dayOfMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.dayOfMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row3.dayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"dayOfWeek", "row3", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row3.dayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.dayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row3.flightDate = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row3.flightDate = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_3.getException()!=null) {
										throw rowstate_tFileInputDelimited_3.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_3 = true;
        							
                							System.err.println(e.getMessage());
                							row3 = null;
                						
            							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.timePeriodId = row3.timePeriodId;
				
				row3_HashRow.year = row3.year;
				
				row3_HashRow.quarter = row3.quarter;
				
				row3_HashRow.month = row3.month;
				
				row3_HashRow.dayOfMonth = row3.dayOfMonth;
				
				row3_HashRow.dayOfWeek = row3.dayOfWeek;
				
				row3_HashRow.flightDate = row3.flightDate;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	


				nb_line_tFileInputDelimited_3++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_3!=null){
    					csvReadertFileInputDelimited_3.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_3!=null){
    				globalMap.put("tFileInputDelimited_3_NB_LINE",nb_line_tFileInputDelimited_3);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer originId;

				public Integer getOriginId () {
					return this.originId;
				}
				
			    public Integer originKey;

				public Integer getOriginKey () {
					return this.originKey;
				}
				
			    public Integer originAirportSeqId;

				public Integer getOriginAirportSeqId () {
					return this.originAirportSeqId;
				}
				
			    public String airportCode;

				public String getAirportCode () {
					return this.airportCode;
				}
				
			    public String cityName;

				public String getCityName () {
					return this.cityName;
				}
				
			    public String stateCode;

				public String getStateCode () {
					return this.stateCode;
				}
				
			    public String stateName;

				public String getStateName () {
					return this.stateName;
				}
				
			    public String worldAreaCode;

				public String getWorldAreaCode () {
					return this.worldAreaCode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.originKey == null) ? 0 : this.originKey.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.originKey == null) {
							if (other.originKey != null)
								return false;
						
						} else if (!this.originKey.equals(other.originKey))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.originId = this.originId;
	            other.originKey = this.originKey;
	            other.originAirportSeqId = this.originAirportSeqId;
	            other.airportCode = this.airportCode;
	            other.cityName = this.cityName;
	            other.stateCode = this.stateCode;
	            other.stateName = this.stateName;
	            other.worldAreaCode = this.worldAreaCode;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.originKey = this.originKey;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.originKey = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
						this.originKey = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.originKey,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.originKey,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.originId = readInteger(dis,ois);
					
						this.originAirportSeqId = readInteger(dis,ois);
					
						this.airportCode = readString(dis,ois);
					
						this.cityName = readString(dis,ois);
					
						this.stateCode = readString(dis,ois);
					
						this.stateName = readString(dis,ois);
					
						this.worldAreaCode = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.originId = readInteger(dis,objectIn);
					
						this.originAirportSeqId = readInteger(dis,objectIn);
					
						this.airportCode = readString(dis,objectIn);
					
						this.cityName = readString(dis,objectIn);
					
						this.stateCode = readString(dis,objectIn);
					
						this.stateName = readString(dis,objectIn);
					
						this.worldAreaCode = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.originId, dos, oos);
					
					writeInteger(this.originAirportSeqId, dos, oos);
					
						writeString(this.airportCode, dos, oos);
					
						writeString(this.cityName, dos, oos);
					
						writeString(this.stateCode, dos, oos);
					
						writeString(this.stateName, dos, oos);
					
						writeString(this.worldAreaCode, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.originId, dos, objectOut);
					
					writeInteger(this.originAirportSeqId, dos, objectOut);
					
						writeString(this.airportCode, dos, objectOut);
					
						writeString(this.cityName, dos, objectOut);
					
						writeString(this.stateCode, dos, objectOut);
					
						writeString(this.stateName, dos, objectOut);
					
						writeString(this.worldAreaCode, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("originId="+String.valueOf(originId));
		sb.append(",originKey="+String.valueOf(originKey));
		sb.append(",originAirportSeqId="+String.valueOf(originAirportSeqId));
		sb.append(",airportCode="+airportCode);
		sb.append(",cityName="+cityName);
		sb.append(",stateCode="+stateCode);
		sb.append(",stateName="+stateName);
		sb.append(",worldAreaCode="+worldAreaCode);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.originKey, other.originKey);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(fact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;	
				
				char fieldSeparator_tFileInputDelimited_4[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_4[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_4 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_4 = /** Start field tFileInputDelimited_4:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimOrigin.csv"/** End field tFileInputDelimited_4:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;
	
				try{
					
						String[] rowtFileInputDelimited_4=null;
						int currentLinetFileInputDelimited_4 = 0;
	        			int outputLinetFileInputDelimited_4 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0;
			if(footer_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_4),fieldSeparator_tFileInputDelimited_4[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_4.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )
	        			csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
	        				csvReadertFileInputDelimited_4.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_4 > 0){
						for(totalLinetFileInputDelimited_4=0;totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++){
							csvReadertFileInputDelimited_4.readNext();
						}
						csvReadertFileInputDelimited_4.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_4.readNext()) {
							
								rowtFileInputDelimited_4=csvReadertFileInputDelimited_4.getValues();
								if(!(rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_4++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4   < 0? 0 : totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4 ;
	            		if(lastLinetFileInputDelimited_4 > 0){
	                		lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4 : lastLineTemptFileInputDelimited_4; 
	            		}else {
	                		lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
	            		}
	         
			          	csvReadertFileInputDelimited_4.close();
				        if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_4, fieldSeparator_tFileInputDelimited_4[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_4=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_4),fieldSeparator_tFileInputDelimited_4[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_4[0] != '\n') && (rowSeparator_tFileInputDelimited_4[0] != '\r') )	
	        				csvReadertFileInputDelimited_4.setLineEnd(""+rowSeparator_tFileInputDelimited_4[0]);
						
							csvReadertFileInputDelimited_4.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_4 != 0){
			        	for(currentLinetFileInputDelimited_4=0;currentLinetFileInputDelimited_4 < 1;currentLinetFileInputDelimited_4++){
			        		csvReadertFileInputDelimited_4.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_4.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_4 != 0 && csvReadertFileInputDelimited_4!=null && csvReadertFileInputDelimited_4.readNext() ) { 
	        		rowstate_tFileInputDelimited_4.reset();
	        
		        	rowtFileInputDelimited_4=csvReadertFileInputDelimited_4.getValues();
		        	
					
	        			if(rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_4++;
	            
		            if(lastLinetFileInputDelimited_4 > -1 && currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_4++;
	            	if (limittFileInputDelimited_4 > 0 && outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
	                	break;
	            	}  
	                                                                      
					
	    							row4 = null;			
								
	    							row4 = null;			
								
								boolean whetherReject_tFileInputDelimited_4 = false;
								row4 = new row4Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_4_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])){//empty line when row separator is '\n'
					
							row4.originId = null;
					
							row4.originKey = null;
					
							row4.originAirportSeqId = null;
					
							row4.airportCode = null;
					
							row4.cityName = null;
					
							row4.stateCode = null;
					
							row4.stateName = null;
					
							row4.worldAreaCode = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_4 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_4 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row4.originId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"originId", "row4", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row4.originId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.originId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row4.originKey = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"originKey", "row4", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row4.originKey = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.originKey = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
								
									if(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {
									
										row4.originAirportSeqId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"originAirportSeqId", "row4", rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4], ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
										}
    								}else{
    									
											
												row4.originAirportSeqId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.originAirportSeqId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.airportCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.airportCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.cityName = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.cityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.stateCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.stateCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.stateName = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.stateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_4 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length){
						
						
							
									row4.worldAreaCode = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];
									
							
						
						}else{
						
							
								row4.worldAreaCode = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_4.getException()!=null) {
										throw rowstate_tFileInputDelimited_4.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_4 = true;
        							
                							System.err.println(e.getMessage());
                							row4 = null;
                						
            							globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.originId = row4.originId;
				
				row4_HashRow.originKey = row4.originKey;
				
				row4_HashRow.originAirportSeqId = row4.originAirportSeqId;
				
				row4_HashRow.airportCode = row4.airportCode;
				
				row4_HashRow.cityName = row4.cityName;
				
				row4_HashRow.stateCode = row4.stateCode;
				
				row4_HashRow.stateName = row4.stateName;
				
				row4_HashRow.worldAreaCode = row4.worldAreaCode;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	


				nb_line_tFileInputDelimited_4++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_4!=null){
    					csvReadertFileInputDelimited_4.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_4!=null){
    				globalMap.put("tFileInputDelimited_4_NB_LINE",nb_line_tFileInputDelimited_4);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_FlightFact = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_FlightFact = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer AirlineId;

				public Integer getAirlineId () {
					return this.AirlineId;
				}
				
			    public String Code;

				public String getCode () {
					return this.Code;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Code == null) ? 0 : this.Code.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.Code == null) {
							if (other.Code != null)
								return false;
						
						} else if (!this.Code.equals(other.Code))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.AirlineId = this.AirlineId;
	            other.Code = this.Code;
	            other.Description = this.Description;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.Code = this.Code;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_FlightFact.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_FlightFact.length == 0) {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_FlightFact = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_FlightFact, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_FlightFact, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
					this.Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_FlightFact) {

        	try {

        		int length = 0;
		
					this.Code = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AirlineId = readInteger(dis,ois);
					
						this.Description = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.AirlineId = readInteger(dis,objectIn);
					
						this.Description = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.AirlineId, dos, oos);
					
						writeString(this.Description, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.AirlineId, dos, objectOut);
					
						writeString(this.Description, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AirlineId="+String.valueOf(AirlineId));
		sb.append(",Code="+Code);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Code, other.Code);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tFileInputDelimited_5 - inputs:(after_tFileInputDelimited_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(fact)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;	
				
				char fieldSeparator_tFileInputDelimited_5[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_5[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_5 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_5 = /** Start field tFileInputDelimited_5:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/dimAirlines.csv"/** End field tFileInputDelimited_5:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;
	
				try{
					
						String[] rowtFileInputDelimited_5=null;
						int currentLinetFileInputDelimited_5 = 0;
	        			int outputLinetFileInputDelimited_5 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0;
			if(footer_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_5),fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_5.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )
	        			csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
	        				csvReadertFileInputDelimited_5.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_5 > 0){
						for(totalLinetFileInputDelimited_5=0;totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++){
							csvReadertFileInputDelimited_5.readNext();
						}
						csvReadertFileInputDelimited_5.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_5.readNext()) {
							
								rowtFileInputDelimited_5=csvReadertFileInputDelimited_5.getValues();
								if(!(rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_5++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5   < 0? 0 : totalLinetFileInputDelimited_5 - footer_tFileInputDelimited_5 ;
	            		if(lastLinetFileInputDelimited_5 > 0){
	                		lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5 : lastLineTemptFileInputDelimited_5; 
	            		}else {
	                		lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
	            		}
	         
			          	csvReadertFileInputDelimited_5.close();
				        if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_5, fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_5=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_5),fieldSeparator_tFileInputDelimited_5[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_5[0] != '\n') && (rowSeparator_tFileInputDelimited_5[0] != '\r') )	
	        				csvReadertFileInputDelimited_5.setLineEnd(""+rowSeparator_tFileInputDelimited_5[0]);
						
							csvReadertFileInputDelimited_5.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_5.setEscapeChar(csvReadertFileInputDelimited_5.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_5 != 0){
			        	for(currentLinetFileInputDelimited_5=0;currentLinetFileInputDelimited_5 < 1;currentLinetFileInputDelimited_5++){
			        		csvReadertFileInputDelimited_5.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_5.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_5 != 0 && csvReadertFileInputDelimited_5!=null && csvReadertFileInputDelimited_5.readNext() ) { 
	        		rowstate_tFileInputDelimited_5.reset();
	        
		        	rowtFileInputDelimited_5=csvReadertFileInputDelimited_5.getValues();
		        	
					
	        			if(rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_5++;
	            
		            if(lastLinetFileInputDelimited_5 > -1 && currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_5++;
	            	if (limittFileInputDelimited_5 > 0 && outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
	                	break;
	            	}  
	                                                                      
					
	    							row5 = null;			
								
	    							row5 = null;			
								
								boolean whetherReject_tFileInputDelimited_5 = false;
								row5 = new row5Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_5_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_5.length == 1 && ("\015").equals(rowtFileInputDelimited_5[0])){//empty line when row separator is '\n'
					
							row5.AirlineId = null;
					
							row5.Code = null;
					
							row5.Description = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_5 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_5 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
								
									if(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5].length() > 0) {
										try {
									
										row5.AirlineId = ParserUtils.parseTo_Integer(rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
											rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"AirlineId", "row5", rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5], ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
										}
    								}else{
    									
											
												row5.AirlineId = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row5.AirlineId = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.Code = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.Code = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_5 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length){
						
						
							
									row5.Description = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];
									
							
						
						}else{
						
							
								row5.Description = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_5.getException()!=null) {
										throw rowstate_tFileInputDelimited_5.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_5 = true;
        							
                							System.err.println(e.getMessage());
                							row5 = null;
                						
            							globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.AirlineId = row5.AirlineId;
				
				row5_HashRow.Code = row5.Code;
				
				row5_HashRow.Description = row5.Description;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	


				nb_line_tFileInputDelimited_5++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_5!=null){
    					csvReadertFileInputDelimited_5.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_5!=null){
    				globalMap.put("tFileInputDelimited_5_NB_LINE",nb_line_tFileInputDelimited_5);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FlightFact FlightFactClass = new FlightFact();

        int exitCode = FlightFactClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FlightFact.class.getClassLoader().getResourceAsStream("paravolar/flightfact_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FlightFact.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FlightFact");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     431993 characters generated by Talend Open Studio for Data Integration 
 *     on the November 8, 2022 at 11:17:37 PM CST
 ************************************************************************************************/