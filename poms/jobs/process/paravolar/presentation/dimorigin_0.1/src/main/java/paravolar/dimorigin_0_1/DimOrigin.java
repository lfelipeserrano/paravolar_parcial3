// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package paravolar.dimorigin_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DimOrigin Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class DimOrigin implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DimOrigin";
	private final String projectName = "PARAVOLAR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DimOrigin.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DimOrigin.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class dimensionStruct implements routines.system.IPersistableRow<dimensionStruct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimOrigin = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimOrigin = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer originId;

				public Integer getOriginId () {
					return this.originId;
				}
				
			    public Integer originKey;

				public Integer getOriginKey () {
					return this.originKey;
				}
				
			    public Integer originAirportSeqId;

				public Integer getOriginAirportSeqId () {
					return this.originAirportSeqId;
				}
				
			    public String airportCode;

				public String getAirportCode () {
					return this.airportCode;
				}
				
			    public String cityName;

				public String getCityName () {
					return this.cityName;
				}
				
			    public String stateCode;

				public String getStateCode () {
					return this.stateCode;
				}
				
			    public String stateName;

				public String getStateName () {
					return this.stateName;
				}
				
			    public Integer worldAreaCode;

				public Integer getWorldAreaCode () {
					return this.worldAreaCode;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.originId == null) ? 0 : this.originId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final dimensionStruct other = (dimensionStruct) obj;
		
						if (this.originId == null) {
							if (other.originId != null)
								return false;
						
						} else if (!this.originId.equals(other.originId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(dimensionStruct other) {

		other.originId = this.originId;
	            other.originKey = this.originKey;
	            other.originAirportSeqId = this.originAirportSeqId;
	            other.airportCode = this.airportCode;
	            other.cityName = this.cityName;
	            other.stateCode = this.stateCode;
	            other.stateName = this.stateName;
	            other.worldAreaCode = this.worldAreaCode;
	            
	}

	public void copyKeysDataTo(dimensionStruct other) {

		other.originId = this.originId;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.originId = readInteger(dis);
					
						this.originKey = readInteger(dis);
					
						this.originAirportSeqId = readInteger(dis);
					
					this.airportCode = readString(dis);
					
					this.cityName = readString(dis);
					
					this.stateCode = readString(dis);
					
					this.stateName = readString(dis);
					
						this.worldAreaCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.originId = readInteger(dis);
					
						this.originKey = readInteger(dis);
					
						this.originAirportSeqId = readInteger(dis);
					
					this.airportCode = readString(dis);
					
					this.cityName = readString(dis);
					
					this.stateCode = readString(dis);
					
					this.stateName = readString(dis);
					
						this.worldAreaCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.originId,dos);
					
					// Integer
				
						writeInteger(this.originKey,dos);
					
					// Integer
				
						writeInteger(this.originAirportSeqId,dos);
					
					// String
				
						writeString(this.airportCode,dos);
					
					// String
				
						writeString(this.cityName,dos);
					
					// String
				
						writeString(this.stateCode,dos);
					
					// String
				
						writeString(this.stateName,dos);
					
					// Integer
				
						writeInteger(this.worldAreaCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.originId,dos);
					
					// Integer
				
						writeInteger(this.originKey,dos);
					
					// Integer
				
						writeInteger(this.originAirportSeqId,dos);
					
					// String
				
						writeString(this.airportCode,dos);
					
					// String
				
						writeString(this.cityName,dos);
					
					// String
				
						writeString(this.stateCode,dos);
					
					// String
				
						writeString(this.stateName,dos);
					
					// Integer
				
						writeInteger(this.worldAreaCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("originId="+String.valueOf(originId));
		sb.append(",originKey="+String.valueOf(originKey));
		sb.append(",originAirportSeqId="+String.valueOf(originAirportSeqId));
		sb.append(",airportCode="+airportCode);
		sb.append(",cityName="+cityName);
		sb.append(",stateCode="+stateCode);
		sb.append(",stateName="+stateName);
		sb.append(",worldAreaCode="+String.valueOf(worldAreaCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(dimensionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.originId, other.originId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimOrigin = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimOrigin = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimOrigin = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimOrigin = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_DimOrigin = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_DimOrigin = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_DimOrigin.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_DimOrigin.length == 0) {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_DimOrigin = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_DimOrigin, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_DimOrigin, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_DimOrigin) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row2Struct row3 = row2;
dimensionStruct dimension = new dimensionStruct();







	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"dimension");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimOrigin.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
                String[] headColutFileOutputDelimited_2=new String[8];
            class CSVBasicSet_tFileOutputDelimited_2{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_2[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_2 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_2[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_2 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_2[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_2[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_2 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 =0;
            int currentRow_tFileOutputDelimited_2 = 0;


            CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
            csvSettings_tFileOutputDelimited_2.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                            if(fileToDelete_tFileOutputDelimited_2.exists()) {
                                fileToDelete_tFileOutputDelimited_2.delete();
                            }
                            CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_2.setSeparator(csvSettings_tFileOutputDelimited_2.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_2.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_2.setLineEnd(""+csvSettings_tFileOutputDelimited_2.getRowDelim());
                    }
                        if(filetFileOutputDelimited_2.length()==0){
                                    headColutFileOutputDelimited_2[0]="originId";
                                    headColutFileOutputDelimited_2[1]="originKey";
                                    headColutFileOutputDelimited_2[2]="originAirportSeqId";
                                    headColutFileOutputDelimited_2[3]="airportCode";
                                    headColutFileOutputDelimited_2[4]="cityName";
                                    headColutFileOutputDelimited_2[5]="stateCode";
                                    headColutFileOutputDelimited_2[6]="stateName";
                                    headColutFileOutputDelimited_2[7]="worldAreaCode";
                            CsvWritertFileOutputDelimited_2.writeNext(headColutFileOutputDelimited_2);
                            CsvWritertFileOutputDelimited_2.flush();
                        }
                CsvWritertFileOutputDelimited_2.setEscapeChar(csvSettings_tFileOutputDelimited_2.getEscapeChar());
                CsvWritertFileOutputDelimited_2.setQuoteChar(csvSettings_tFileOutputDelimited_2.getTextEnclosure());
                CsvWritertFileOutputDelimited_2.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_2", CsvWritertFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
dimensionStruct dimension_tmp = new dimensionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[119];

        public void addRow(String[] row) {

            for (int i = 0; i < 119; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 118 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 118 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%74$-");
        			        sbformat.append(colLengths[73]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%75$-");
        			        sbformat.append(colLengths[74]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%76$-");
        			        sbformat.append(colLengths[75]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%77$-");
        			        sbformat.append(colLengths[76]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%78$-");
        			        sbformat.append(colLengths[77]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%79$-");
        			        sbformat.append(colLengths[78]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%80$-");
        			        sbformat.append(colLengths[79]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%81$-");
        			        sbformat.append(colLengths[80]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%82$-");
        			        sbformat.append(colLengths[81]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%83$-");
        			        sbformat.append(colLengths[82]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%84$-");
        			        sbformat.append(colLengths[83]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%85$-");
        			        sbformat.append(colLengths[84]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%86$-");
        			        sbformat.append(colLengths[85]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%87$-");
        			        sbformat.append(colLengths[86]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%88$-");
        			        sbformat.append(colLengths[87]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%89$-");
        			        sbformat.append(colLengths[88]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%90$-");
        			        sbformat.append(colLengths[89]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%91$-");
        			        sbformat.append(colLengths[90]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%92$-");
        			        sbformat.append(colLengths[91]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%93$-");
        			        sbformat.append(colLengths[92]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%94$-");
        			        sbformat.append(colLengths[93]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%95$-");
        			        sbformat.append(colLengths[94]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%96$-");
        			        sbformat.append(colLengths[95]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%97$-");
        			        sbformat.append(colLengths[96]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%98$-");
        			        sbformat.append(colLengths[97]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%99$-");
        			        sbformat.append(colLengths[98]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%100$-");
        			        sbformat.append(colLengths[99]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%101$-");
        			        sbformat.append(colLengths[100]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%102$-");
        			        sbformat.append(colLengths[101]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%103$-");
        			        sbformat.append(colLengths[102]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%104$-");
        			        sbformat.append(colLengths[103]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%105$-");
        			        sbformat.append(colLengths[104]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%106$-");
        			        sbformat.append(colLengths[105]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%107$-");
        			        sbformat.append(colLengths[106]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%108$-");
        			        sbformat.append(colLengths[107]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%109$-");
        			        sbformat.append(colLengths[108]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%110$-");
        			        sbformat.append(colLengths[109]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%111$-");
        			        sbformat.append(colLengths[110]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%112$-");
        			        sbformat.append(colLengths[111]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%113$-");
        			        sbformat.append(colLengths[112]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%114$-");
        			        sbformat.append(colLengths[113]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%115$-");
        			        sbformat.append(colLengths[114]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%116$-");
        			        sbformat.append(colLengths[115]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%117$-");
        			        sbformat.append(colLengths[116]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%118$-");
        			        sbformat.append(colLengths[117]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%119$-");
        			        sbformat.append(colLengths[118]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[80] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[81] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[82] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[83] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[84] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[85] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[86] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[87] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[88] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[89] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[90] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[91] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[92] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[93] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[94] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[95] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[96] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[97] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[98] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[99] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[100] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[101] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[102] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[103] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[104] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[105] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[106] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[107] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[108] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[109] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[110] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[111] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[112] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[113] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[114] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[115] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[116] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[117] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[118] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"Year","Quarter","Month","DayofMonth","DayOfWeek","FlightDate","Marketing_Airline_Network","Operated_or_Branded_Code_Share_Partners","DOT_ID_Marketing_Airline","IATA_Code_Marketing_Airline","Flight_Number_Marketing_Airline","Originally_Scheduled_Code_Share_Airline","DOT_ID_Originally_Scheduled_Code_Share_Airline","IATA_Code_Originally_Scheduled_Code_Share_Airline","Flight_Num_Originally_Scheduled_Code_Share_Airline","Operating_Airline","DOT_ID_Operating_Airline","IATA_Code_Operating_Airline","Tail_Number","Flight_Number_Operating_Airline","OriginAirportID","OriginAirportSeqID","OriginCityMarketID","Origin","OriginCityName","OriginState","OriginStateFips","OriginStateName","OriginWac","DestAirportID","DestAirportSeqID","DestCityMarketID","Dest","DestCityName","DestState","DestStateFips","DestStateName","DestWac","CRSDepTime","DepTime","DepDelay","DepDelayMinutes","DepDel15","DepartureDelayGroups","DepTimeBlk","TaxiOut","WheelsOff","WheelsOn","TaxiIn","CRSArrTime","ArrTime","ArrDelay","ArrDelayMinutes","ArrDel15","ArrivalDelayGroups","ArrTimeBlk","Cancelled","CancellationCode","Diverted","CRSElapsedTime","ActualElapsedTime","AirTime","Flights","Distance","DistanceGroup","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay","FirstDepTime","TotalAddGTime","LongestAddGTime","DivAirportLandings","DivReachedDest","DivActualElapsedTime","DivArrDelay","DivDistance","Div1Airport","Div1AirportID","Div1AirportSeqID","Div1WheelsOn","Div1TotalGTime","Div1LongestGTime","Div1WheelsOff","Div1TailNum","Div2Airport","Div2AirportID","Div2AirportSeqID","Div2WheelsOn","Div2TotalGTime","Div2LongestGTime","Div2WheelsOff","Div2TailNum","Div3Airport","Div3AirportID","Div3AirportSeqID","Div3WheelsOn","Div3TotalGTime","Div3LongestGTime","Div3WheelsOff","Div3TailNum","Div4Airport","Div4AirportID","Div4AirportSeqID","Div4WheelsOn","Div4TotalGTime","Div4LongestGTime","Div4WheelsOff","Div4TailNum","Div5Airport","Div5AirportID","Div5AirportSeqID","Div5WheelsOn","Div5TotalGTime","Div5LongestGTime","Div5WheelsOff","Div5TailNum","Duplicate",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			

				class LogRowUtil_tLogRow_1{
						public void putTableVerticalValue_0(final row2Struct row2,String[] row_tLogRow_1){   				
	    					if(row2.Year != null) { //              
                 				row_tLogRow_1[0]=    						    
				                String.valueOf(row2.Year)			
					          ;	
	    					} //   				
	    					if(row2.Quarter != null) { //              
                 				row_tLogRow_1[1]=    						    
				                String.valueOf(row2.Quarter)			
					          ;	
	    					} //   				
	    					if(row2.Month != null) { //              
                 				row_tLogRow_1[2]=    						    
				                String.valueOf(row2.Month)			
					          ;	
	    					} //   				
	    					if(row2.DayofMonth != null) { //              
                 				row_tLogRow_1[3]=    						    
				                String.valueOf(row2.DayofMonth)			
					          ;	
	    					} //   				
	    					if(row2.DayOfWeek != null) { //              
                 				row_tLogRow_1[4]=    						    
				                String.valueOf(row2.DayOfWeek)			
					          ;	
	    					} //   				
	    					if(row2.FlightDate != null) { //              
                 				row_tLogRow_1[5]=    						    
				                String.valueOf(row2.FlightDate)			
					          ;	
	    					} //   				
	    					if(row2.Marketing_Airline_Network != null) { //              
                 				row_tLogRow_1[6]=    						    
				                String.valueOf(row2.Marketing_Airline_Network)			
					          ;	
	    					} //   				
	    					if(row2.Operated_or_Branded_Code_Share_Partners != null) { //              
                 				row_tLogRow_1[7]=    						    
				                String.valueOf(row2.Operated_or_Branded_Code_Share_Partners)			
					          ;	
	    					} //   				
	    					if(row2.DOT_ID_Marketing_Airline != null) { //              
                 				row_tLogRow_1[8]=    						    
				                String.valueOf(row2.DOT_ID_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2.IATA_Code_Marketing_Airline != null) { //              
                 				row_tLogRow_1[9]=    						    
				                String.valueOf(row2.IATA_Code_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2.Flight_Number_Marketing_Airline != null) { //              
                 				row_tLogRow_1[10]=    						    
				                String.valueOf(row2.Flight_Number_Marketing_Airline)			
					          ;	
	    					} //   				
	    					if(row2.Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[11]=    						    
				                String.valueOf(row2.Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2.DOT_ID_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[12]=    						    
				                String.valueOf(row2.DOT_ID_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2.IATA_Code_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[13]=    						    
				                String.valueOf(row2.IATA_Code_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2.Flight_Num_Originally_Scheduled_Code_Share_Airline != null) { //              
                 				row_tLogRow_1[14]=    						    
				                String.valueOf(row2.Flight_Num_Originally_Scheduled_Code_Share_Airline)			
					          ;	
	    					} //   				
	    					if(row2.Operating_Airline != null) { //              
                 				row_tLogRow_1[15]=    						    
				                String.valueOf(row2.Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2.DOT_ID_Operating_Airline != null) { //              
                 				row_tLogRow_1[16]=    						    
				                String.valueOf(row2.DOT_ID_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2.IATA_Code_Operating_Airline != null) { //              
                 				row_tLogRow_1[17]=    						    
				                String.valueOf(row2.IATA_Code_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2.Tail_Number != null) { //              
                 				row_tLogRow_1[18]=    						    
				                String.valueOf(row2.Tail_Number)			
					          ;	
	    					} //   				
	    					if(row2.Flight_Number_Operating_Airline != null) { //              
                 				row_tLogRow_1[19]=    						    
				                String.valueOf(row2.Flight_Number_Operating_Airline)			
					          ;	
	    					} //   				
	    					if(row2.OriginAirportID != null) { //              
                 				row_tLogRow_1[20]=    						    
				                String.valueOf(row2.OriginAirportID)			
					          ;	
	    					} //   				
	    					if(row2.OriginAirportSeqID != null) { //              
                 				row_tLogRow_1[21]=    						    
				                String.valueOf(row2.OriginAirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.OriginCityMarketID != null) { //              
                 				row_tLogRow_1[22]=    						    
				                String.valueOf(row2.OriginCityMarketID)			
					          ;	
	    					} //   				
	    					if(row2.Origin != null) { //              
                 				row_tLogRow_1[23]=    						    
				                String.valueOf(row2.Origin)			
					          ;	
	    					} //   				
	    					if(row2.OriginCityName != null) { //              
                 				row_tLogRow_1[24]=    						    
				                String.valueOf(row2.OriginCityName)			
					          ;	
	    					} //   				
	    					if(row2.OriginState != null) { //              
                 				row_tLogRow_1[25]=    						    
				                String.valueOf(row2.OriginState)			
					          ;	
	    					} //   				
	    					if(row2.OriginStateFips != null) { //              
                 				row_tLogRow_1[26]=    						    
				                String.valueOf(row2.OriginStateFips)			
					          ;	
	    					} //   				
	    					if(row2.OriginStateName != null) { //              
                 				row_tLogRow_1[27]=    						    
				                String.valueOf(row2.OriginStateName)			
					          ;	
	    					} //   				
	    					if(row2.OriginWac != null) { //              
                 				row_tLogRow_1[28]=    						    
				                String.valueOf(row2.OriginWac)			
					          ;	
	    					} //   				
	    					if(row2.DestAirportID != null) { //              
                 				row_tLogRow_1[29]=    						    
				                String.valueOf(row2.DestAirportID)			
					          ;	
	    					} //   				
	    					if(row2.DestAirportSeqID != null) { //              
                 				row_tLogRow_1[30]=    						    
				                String.valueOf(row2.DestAirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.DestCityMarketID != null) { //              
                 				row_tLogRow_1[31]=    						    
				                String.valueOf(row2.DestCityMarketID)			
					          ;	
	    					} //   				
	    					if(row2.Dest != null) { //              
                 				row_tLogRow_1[32]=    						    
				                String.valueOf(row2.Dest)			
					          ;	
	    					} //   				
	    					if(row2.DestCityName != null) { //              
                 				row_tLogRow_1[33]=    						    
				                String.valueOf(row2.DestCityName)			
					          ;	
	    					} //   				
	    					if(row2.DestState != null) { //              
                 				row_tLogRow_1[34]=    						    
				                String.valueOf(row2.DestState)			
					          ;	
	    					} //   				
	    					if(row2.DestStateFips != null) { //              
                 				row_tLogRow_1[35]=    						    
				                String.valueOf(row2.DestStateFips)			
					          ;	
	    					} //   				
	    					if(row2.DestStateName != null) { //              
                 				row_tLogRow_1[36]=    						    
				                String.valueOf(row2.DestStateName)			
					          ;	
	    					} //   				
	    					if(row2.DestWac != null) { //              
                 				row_tLogRow_1[37]=    						    
				                String.valueOf(row2.DestWac)			
					          ;	
	    					} //   				
	    					if(row2.CRSDepTime != null) { //              
                 				row_tLogRow_1[38]=    						    
				                String.valueOf(row2.CRSDepTime)			
					          ;	
	    					} //   				
	    					if(row2.DepTime != null) { //              
                 				row_tLogRow_1[39]=    						    
				                String.valueOf(row2.DepTime)			
					          ;	
	    					} //   				
	    					if(row2.DepDelay != null) { //              
                 				row_tLogRow_1[40]=    						    
				                String.valueOf(row2.DepDelay)			
					          ;	
	    					} //   				
	    					if(row2.DepDelayMinutes != null) { //              
                 				row_tLogRow_1[41]=    						    
				                String.valueOf(row2.DepDelayMinutes)			
					          ;	
	    					} //   				
	    					if(row2.DepDel15 != null) { //              
                 				row_tLogRow_1[42]=    						    
				                String.valueOf(row2.DepDel15)			
					          ;	
	    					} //   				
	    					if(row2.DepartureDelayGroups != null) { //              
                 				row_tLogRow_1[43]=    						    
				                String.valueOf(row2.DepartureDelayGroups)			
					          ;	
	    					} //   				
	    					if(row2.DepTimeBlk != null) { //              
                 				row_tLogRow_1[44]=    						    
				                String.valueOf(row2.DepTimeBlk)			
					          ;	
	    					} //   				
	    					if(row2.TaxiOut != null) { //              
                 				row_tLogRow_1[45]=    						    
				                String.valueOf(row2.TaxiOut)			
					          ;	
	    					} //   				
	    					if(row2.WheelsOff != null) { //              
                 				row_tLogRow_1[46]=    						    
				                String.valueOf(row2.WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.WheelsOn != null) { //              
                 				row_tLogRow_1[47]=    						    
				                String.valueOf(row2.WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.TaxiIn != null) { //              
                 				row_tLogRow_1[48]=    						    
				                String.valueOf(row2.TaxiIn)			
					          ;	
	    					} //   				
	    					if(row2.CRSArrTime != null) { //              
                 				row_tLogRow_1[49]=    						    
				                String.valueOf(row2.CRSArrTime)			
					          ;	
	    					} //   				
	    					if(row2.ArrTime != null) { //              
                 				row_tLogRow_1[50]=    						    
				                String.valueOf(row2.ArrTime)			
					          ;	
	    					} //   				
	    					if(row2.ArrDelay != null) { //              
                 				row_tLogRow_1[51]=    						    
				                String.valueOf(row2.ArrDelay)			
					          ;	
	    					} //   				
	    					if(row2.ArrDelayMinutes != null) { //              
                 				row_tLogRow_1[52]=    						    
				                String.valueOf(row2.ArrDelayMinutes)			
					          ;	
	    					} //   				
	    					if(row2.ArrDel15 != null) { //              
                 				row_tLogRow_1[53]=    						    
				                String.valueOf(row2.ArrDel15)			
					          ;	
	    					} //   				
	    					if(row2.ArrivalDelayGroups != null) { //              
                 				row_tLogRow_1[54]=    						    
				                String.valueOf(row2.ArrivalDelayGroups)			
					          ;	
	    					} //   				
	    					if(row2.ArrTimeBlk != null) { //              
                 				row_tLogRow_1[55]=    						    
				                String.valueOf(row2.ArrTimeBlk)			
					          ;	
	    					} //   				
	    					if(row2.Cancelled != null) { //              
                 				row_tLogRow_1[56]=    						
								FormatterUtils.formatUnwithE(row2.Cancelled)
					          ;	
	    					} //   				
	    					if(row2.CancellationCode != null) { //              
                 				row_tLogRow_1[57]=    						    
				                String.valueOf(row2.CancellationCode)			
					          ;	
	    					} //   				
	    					if(row2.Diverted != null) { //              
                 				row_tLogRow_1[58]=    						
								FormatterUtils.formatUnwithE(row2.Diverted)
					          ;	
	    					} //   				
	    					if(row2.CRSElapsedTime != null) { //              
                 				row_tLogRow_1[59]=    						
								FormatterUtils.formatUnwithE(row2.CRSElapsedTime)
					          ;	
	    					} //   				
	    					if(row2.ActualElapsedTime != null) { //              
                 				row_tLogRow_1[60]=    						    
				                String.valueOf(row2.ActualElapsedTime)			
					          ;	
	    					} //   				
	    					if(row2.AirTime != null) { //              
                 				row_tLogRow_1[61]=    						    
				                String.valueOf(row2.AirTime)			
					          ;	
	    					} //   				
	    					if(row2.Flights != null) { //              
                 				row_tLogRow_1[62]=    						
								FormatterUtils.formatUnwithE(row2.Flights)
					          ;	
	    					} //   				
	    					if(row2.Distance != null) { //              
                 				row_tLogRow_1[63]=    						
								FormatterUtils.formatUnwithE(row2.Distance)
					          ;	
	    					} //   				
	    					if(row2.DistanceGroup != null) { //              
                 				row_tLogRow_1[64]=    						    
				                String.valueOf(row2.DistanceGroup)			
					          ;	
	    					} //   				
	    					if(row2.CarrierDelay != null) { //              
                 				row_tLogRow_1[65]=    						    
				                String.valueOf(row2.CarrierDelay)			
					          ;	
	    					} //   				
	    					if(row2.WeatherDelay != null) { //              
                 				row_tLogRow_1[66]=    						    
				                String.valueOf(row2.WeatherDelay)			
					          ;	
	    					} //   				
	    					if(row2.NASDelay != null) { //              
                 				row_tLogRow_1[67]=    						    
				                String.valueOf(row2.NASDelay)			
					          ;	
	    					} //   				
	    					if(row2.SecurityDelay != null) { //              
                 				row_tLogRow_1[68]=    						    
				                String.valueOf(row2.SecurityDelay)			
					          ;	
	    					} //   				
	    					if(row2.LateAircraftDelay != null) { //              
                 				row_tLogRow_1[69]=    						    
				                String.valueOf(row2.LateAircraftDelay)			
					          ;	
	    					} //   				
	    					if(row2.FirstDepTime != null) { //              
                 				row_tLogRow_1[70]=    						    
				                String.valueOf(row2.FirstDepTime)			
					          ;	
	    					} //   				
	    					if(row2.TotalAddGTime != null) { //              
                 				row_tLogRow_1[71]=    						    
				                String.valueOf(row2.TotalAddGTime)			
					          ;	
	    					} //   				
	    					if(row2.LongestAddGTime != null) { //              
                 				row_tLogRow_1[72]=    						    
				                String.valueOf(row2.LongestAddGTime)			
					          ;	
	    					} //   				
	    					if(row2.DivAirportLandings != null) { //              
                 				row_tLogRow_1[73]=    						    
				                String.valueOf(row2.DivAirportLandings)			
					          ;	
	    					} //   				
	    					if(row2.DivReachedDest != null) { //              
                 				row_tLogRow_1[74]=    						    
				                String.valueOf(row2.DivReachedDest)			
					          ;	
	    					} //   				
	    					if(row2.DivActualElapsedTime != null) { //              
                 				row_tLogRow_1[75]=    						    
				                String.valueOf(row2.DivActualElapsedTime)			
					          ;	
	    					} //   				
	    					if(row2.DivArrDelay != null) { //              
                 				row_tLogRow_1[76]=    						    
				                String.valueOf(row2.DivArrDelay)			
					          ;	
	    					} //   				
	    					if(row2.DivDistance != null) { //              
                 				row_tLogRow_1[77]=    						    
				                String.valueOf(row2.DivDistance)			
					          ;	
	    					} //   				
	    					if(row2.Div1Airport != null) { //              
                 				row_tLogRow_1[78]=    						    
				                String.valueOf(row2.Div1Airport)			
					          ;	
	    					} //   				
	    					if(row2.Div1AirportID != null) { //              
                 				row_tLogRow_1[79]=    						    
				                String.valueOf(row2.Div1AirportID)			
					          ;	
	    					} //   				
	    					if(row2.Div1AirportSeqID != null) { //              
                 				row_tLogRow_1[80]=    						    
				                String.valueOf(row2.Div1AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.Div1WheelsOn != null) { //              
                 				row_tLogRow_1[81]=    						    
				                String.valueOf(row2.Div1WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.Div1TotalGTime != null) { //              
                 				row_tLogRow_1[82]=    						    
				                String.valueOf(row2.Div1TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div1LongestGTime != null) { //              
                 				row_tLogRow_1[83]=    						    
				                String.valueOf(row2.Div1LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div1WheelsOff != null) { //              
                 				row_tLogRow_1[84]=    						    
				                String.valueOf(row2.Div1WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.Div1TailNum != null) { //              
                 				row_tLogRow_1[85]=    						    
				                String.valueOf(row2.Div1TailNum)			
					          ;	
	    					} //   				
	    					if(row2.Div2Airport != null) { //              
                 				row_tLogRow_1[86]=    						    
				                String.valueOf(row2.Div2Airport)			
					          ;	
	    					} //   				
	    					if(row2.Div2AirportID != null) { //              
                 				row_tLogRow_1[87]=    						    
				                String.valueOf(row2.Div2AirportID)			
					          ;	
	    					} //   				
	    					if(row2.Div2AirportSeqID != null) { //              
                 				row_tLogRow_1[88]=    						    
				                String.valueOf(row2.Div2AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.Div2WheelsOn != null) { //              
                 				row_tLogRow_1[89]=    						    
				                String.valueOf(row2.Div2WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.Div2TotalGTime != null) { //              
                 				row_tLogRow_1[90]=    						    
				                String.valueOf(row2.Div2TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div2LongestGTime != null) { //              
                 				row_tLogRow_1[91]=    						    
				                String.valueOf(row2.Div2LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div2WheelsOff != null) { //              
                 				row_tLogRow_1[92]=    						    
				                String.valueOf(row2.Div2WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.Div2TailNum != null) { //              
                 				row_tLogRow_1[93]=    						    
				                String.valueOf(row2.Div2TailNum)			
					          ;	
	    					} //   				
	    					if(row2.Div3Airport != null) { //              
                 				row_tLogRow_1[94]=    						    
				                String.valueOf(row2.Div3Airport)			
					          ;	
	    					} //   				
	    					if(row2.Div3AirportID != null) { //              
                 				row_tLogRow_1[95]=    						    
				                String.valueOf(row2.Div3AirportID)			
					          ;	
	    					} //   				
	    					if(row2.Div3AirportSeqID != null) { //              
                 				row_tLogRow_1[96]=    						    
				                String.valueOf(row2.Div3AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.Div3WheelsOn != null) { //              
                 				row_tLogRow_1[97]=    						    
				                String.valueOf(row2.Div3WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.Div3TotalGTime != null) { //              
                 				row_tLogRow_1[98]=    						    
				                String.valueOf(row2.Div3TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div3LongestGTime != null) { //              
                 				row_tLogRow_1[99]=    						    
				                String.valueOf(row2.Div3LongestGTime)			
					          ;	
	    					} //
						}
						public void putTableVerticalValue_1(final row2Struct row2,String[] row_tLogRow_1){   				
	    					if(row2.Div3WheelsOff != null) { //              
                 				row_tLogRow_1[100]=    						    
				                String.valueOf(row2.Div3WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.Div3TailNum != null) { //              
                 				row_tLogRow_1[101]=    						    
				                String.valueOf(row2.Div3TailNum)			
					          ;	
	    					} //   				
	    					if(row2.Div4Airport != null) { //              
                 				row_tLogRow_1[102]=    						    
				                String.valueOf(row2.Div4Airport)			
					          ;	
	    					} //   				
	    					if(row2.Div4AirportID != null) { //              
                 				row_tLogRow_1[103]=    						    
				                String.valueOf(row2.Div4AirportID)			
					          ;	
	    					} //   				
	    					if(row2.Div4AirportSeqID != null) { //              
                 				row_tLogRow_1[104]=    						    
				                String.valueOf(row2.Div4AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.Div4WheelsOn != null) { //              
                 				row_tLogRow_1[105]=    						    
				                String.valueOf(row2.Div4WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.Div4TotalGTime != null) { //              
                 				row_tLogRow_1[106]=    						    
				                String.valueOf(row2.Div4TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div4LongestGTime != null) { //              
                 				row_tLogRow_1[107]=    						    
				                String.valueOf(row2.Div4LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div4WheelsOff != null) { //              
                 				row_tLogRow_1[108]=    						    
				                String.valueOf(row2.Div4WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.Div4TailNum != null) { //              
                 				row_tLogRow_1[109]=    						    
				                String.valueOf(row2.Div4TailNum)			
					          ;	
	    					} //   				
	    					if(row2.Div5Airport != null) { //              
                 				row_tLogRow_1[110]=    						    
				                String.valueOf(row2.Div5Airport)			
					          ;	
	    					} //   				
	    					if(row2.Div5AirportID != null) { //              
                 				row_tLogRow_1[111]=    						    
				                String.valueOf(row2.Div5AirportID)			
					          ;	
	    					} //   				
	    					if(row2.Div5AirportSeqID != null) { //              
                 				row_tLogRow_1[112]=    						    
				                String.valueOf(row2.Div5AirportSeqID)			
					          ;	
	    					} //   				
	    					if(row2.Div5WheelsOn != null) { //              
                 				row_tLogRow_1[113]=    						    
				                String.valueOf(row2.Div5WheelsOn)			
					          ;	
	    					} //   				
	    					if(row2.Div5TotalGTime != null) { //              
                 				row_tLogRow_1[114]=    						    
				                String.valueOf(row2.Div5TotalGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div5LongestGTime != null) { //              
                 				row_tLogRow_1[115]=    						    
				                String.valueOf(row2.Div5LongestGTime)			
					          ;	
	    					} //   				
	    					if(row2.Div5WheelsOff != null) { //              
                 				row_tLogRow_1[116]=    						    
				                String.valueOf(row2.Div5WheelsOff)			
					          ;	
	    					} //   				
	    					if(row2.Div5TailNum != null) { //              
                 				row_tLogRow_1[117]=    						    
				                String.valueOf(row2.Div5TailNum)			
					          ;	
	    					} //   				
	    					if(row2.Duplicate != null) { //              
                 				row_tLogRow_1[118]=    						    
				                String.valueOf(row2.Duplicate)			
					          ;	
	    					} //
						}
			}
			LogRowUtil_tLogRow_1 logRowUtil_tLogRow_1=new LogRowUtil_tLogRow_1();


 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					Integer OriginAirportID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.OriginAirportID == null) ? 0 : this.OriginAirportID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.OriginAirportID == null) {
										if (other.OriginAirportID != null) 
											return false;
								
									} else if (!this.OriginAirportID.equals(other.OriginAirportID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Year = null;
					
							row1.Quarter = null;
					
							row1.Month = null;
					
							row1.DayofMonth = null;
					
							row1.DayOfWeek = null;
					
							row1.FlightDate = null;
					
							row1.Marketing_Airline_Network = null;
					
							row1.Operated_or_Branded_Code_Share_Partners = null;
					
							row1.DOT_ID_Marketing_Airline = null;
					
							row1.IATA_Code_Marketing_Airline = null;
					
							row1.Flight_Number_Marketing_Airline = null;
					
							row1.Originally_Scheduled_Code_Share_Airline = null;
					
							row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Operating_Airline = null;
					
							row1.DOT_ID_Operating_Airline = null;
					
							row1.IATA_Code_Operating_Airline = null;
					
							row1.Tail_Number = null;
					
							row1.Flight_Number_Operating_Airline = null;
					
							row1.OriginAirportID = null;
					
							row1.OriginAirportSeqID = null;
					
							row1.OriginCityMarketID = null;
					
							row1.Origin = null;
					
							row1.OriginCityName = null;
					
							row1.OriginState = null;
					
							row1.OriginStateFips = null;
					
							row1.OriginStateName = null;
					
							row1.OriginWac = null;
					
							row1.DestAirportID = null;
					
							row1.DestAirportSeqID = null;
					
							row1.DestCityMarketID = null;
					
							row1.Dest = null;
					
							row1.DestCityName = null;
					
							row1.DestState = null;
					
							row1.DestStateFips = null;
					
							row1.DestStateName = null;
					
							row1.DestWac = null;
					
							row1.CRSDepTime = null;
					
							row1.DepTime = null;
					
							row1.DepDelay = null;
					
							row1.DepDelayMinutes = null;
					
							row1.DepDel15 = null;
					
							row1.DepartureDelayGroups = null;
					
							row1.DepTimeBlk = null;
					
							row1.TaxiOut = null;
					
							row1.WheelsOff = null;
					
							row1.WheelsOn = null;
					
							row1.TaxiIn = null;
					
							row1.CRSArrTime = null;
					
							row1.ArrTime = null;
					
							row1.ArrDelay = null;
					
							row1.ArrDelayMinutes = null;
					
							row1.ArrDel15 = null;
					
							row1.ArrivalDelayGroups = null;
					
							row1.ArrTimeBlk = null;
					
							row1.Cancelled = null;
					
							row1.CancellationCode = null;
					
							row1.Diverted = null;
					
							row1.CRSElapsedTime = null;
					
							row1.ActualElapsedTime = null;
					
							row1.AirTime = null;
					
							row1.Flights = null;
					
							row1.Distance = null;
					
							row1.DistanceGroup = null;
					
							row1.CarrierDelay = null;
					
							row1.WeatherDelay = null;
					
							row1.NASDelay = null;
					
							row1.SecurityDelay = null;
					
							row1.LateAircraftDelay = null;
					
							row1.FirstDepTime = null;
					
							row1.TotalAddGTime = null;
					
							row1.LongestAddGTime = null;
					
							row1.DivAirportLandings = null;
					
							row1.DivReachedDest = null;
					
							row1.DivActualElapsedTime = null;
					
							row1.DivArrDelay = null;
					
							row1.DivDistance = null;
					
							row1.Div1Airport = null;
					
							row1.Div1AirportID = null;
					
							row1.Div1AirportSeqID = null;
					
							row1.Div1WheelsOn = null;
					
							row1.Div1TotalGTime = null;
					
							row1.Div1LongestGTime = null;
					
							row1.Div1WheelsOff = null;
					
							row1.Div1TailNum = null;
					
							row1.Div2Airport = null;
					
							row1.Div2AirportID = null;
					
							row1.Div2AirportSeqID = null;
					
							row1.Div2WheelsOn = null;
					
							row1.Div2TotalGTime = null;
					
							row1.Div2LongestGTime = null;
					
							row1.Div2WheelsOff = null;
					
							row1.Div2TailNum = null;
					
							row1.Div3Airport = null;
					
							row1.Div3AirportID = null;
					
							row1.Div3AirportSeqID = null;
					
							row1.Div3WheelsOn = null;
					
							row1.Div3TotalGTime = null;
					
							row1.Div3LongestGTime = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Year", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Quarter", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Month", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayofMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayofMonth", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayofMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayofMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayOfWeek", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FlightDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FlightDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Marketing_Airline_Network = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Marketing_Airline_Network = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operated_or_Branded_Code_Share_Partners = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operated_or_Branded_Code_Share_Partners = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Marketing_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tail_Number = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tail_Number = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Origin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Origin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Dest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Dest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepartureDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepartureDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiOut = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiOut = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiIn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiIn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrivalDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrivalDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Cancelled = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Cancelled", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Cancelled = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Cancelled = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CancellationCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CancellationCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Diverted = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Diverted", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Diverted = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Diverted = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CRSElapsedTime = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CRSElapsedTime", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CRSElapsedTime = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CRSElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AirTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AirTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flights = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flights", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flights = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flights = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Distance = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Distance", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Distance = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Distance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DistanceGroup = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DistanceGroup", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DistanceGroup = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DistanceGroup = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CarrierDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CarrierDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WeatherDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WeatherDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NASDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NASDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SecurityDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SecurityDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LateAircraftDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LateAircraftDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FirstDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FirstDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TotalAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TotalAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LongestAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LongestAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DivAirportLandings = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DivAirportLandings", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DivAirportLandings = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DivAirportLandings = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivReachedDest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivReachedDest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivDistance = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivDistance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3LongestGTime = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Div3WheelsOff = null;
					
							row1.Div3TailNum = null;
					
							row1.Div4Airport = null;
					
							row1.Div4AirportID = null;
					
							row1.Div4AirportSeqID = null;
					
							row1.Div4WheelsOn = null;
					
							row1.Div4TotalGTime = null;
					
							row1.Div4LongestGTime = null;
					
							row1.Div4WheelsOff = null;
					
							row1.Div4TailNum = null;
					
							row1.Div5Airport = null;
					
							row1.Div5AirportID = null;
					
							row1.Div5AirportSeqID = null;
					
							row1.Div5WheelsOn = null;
					
							row1.Div5TotalGTime = null;
					
							row1.Div5LongestGTime = null;
					
							row1.Div5WheelsOff = null;
					
							row1.Div5TailNum = null;
					
							row1.Duplicate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Duplicate = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Duplicate", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Duplicate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Duplicate = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_1,row1 );
					
						valueToConn_1(rowtFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flightsStage.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
		        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
			rowHelper_tFileInputDelimited_1.valueToConn(rowtFileInputDelimited_1, row1 );
		
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
            							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row2 = null;			
finder_tUniqRow_1.OriginAirportID = row1.OriginAirportID;	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
new_tUniqRow_1.OriginAirportID = row1.OriginAirportID;
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.Year = row1.Year;			row2.Quarter = row1.Quarter;			row2.Month = row1.Month;			row2.DayofMonth = row1.DayofMonth;			row2.DayOfWeek = row1.DayOfWeek;			row2.FlightDate = row1.FlightDate;			row2.Marketing_Airline_Network = row1.Marketing_Airline_Network;			row2.Operated_or_Branded_Code_Share_Partners = row1.Operated_or_Branded_Code_Share_Partners;			row2.DOT_ID_Marketing_Airline = row1.DOT_ID_Marketing_Airline;			row2.IATA_Code_Marketing_Airline = row1.IATA_Code_Marketing_Airline;			row2.Flight_Number_Marketing_Airline = row1.Flight_Number_Marketing_Airline;			row2.Originally_Scheduled_Code_Share_Airline = row1.Originally_Scheduled_Code_Share_Airline;			row2.DOT_ID_Originally_Scheduled_Code_Share_Airline = row1.DOT_ID_Originally_Scheduled_Code_Share_Airline;			row2.IATA_Code_Originally_Scheduled_Code_Share_Airline = row1.IATA_Code_Originally_Scheduled_Code_Share_Airline;			row2.Flight_Num_Originally_Scheduled_Code_Share_Airline = row1.Flight_Num_Originally_Scheduled_Code_Share_Airline;			row2.Operating_Airline = row1.Operating_Airline;			row2.DOT_ID_Operating_Airline = row1.DOT_ID_Operating_Airline;			row2.IATA_Code_Operating_Airline = row1.IATA_Code_Operating_Airline;			row2.Tail_Number = row1.Tail_Number;			row2.Flight_Number_Operating_Airline = row1.Flight_Number_Operating_Airline;			row2.OriginAirportID = row1.OriginAirportID;			row2.OriginAirportSeqID = row1.OriginAirportSeqID;			row2.OriginCityMarketID = row1.OriginCityMarketID;			row2.Origin = row1.Origin;			row2.OriginCityName = row1.OriginCityName;			row2.OriginState = row1.OriginState;			row2.OriginStateFips = row1.OriginStateFips;			row2.OriginStateName = row1.OriginStateName;			row2.OriginWac = row1.OriginWac;			row2.DestAirportID = row1.DestAirportID;			row2.DestAirportSeqID = row1.DestAirportSeqID;			row2.DestCityMarketID = row1.DestCityMarketID;			row2.Dest = row1.Dest;			row2.DestCityName = row1.DestCityName;			row2.DestState = row1.DestState;			row2.DestStateFips = row1.DestStateFips;			row2.DestStateName = row1.DestStateName;			row2.DestWac = row1.DestWac;			row2.CRSDepTime = row1.CRSDepTime;			row2.DepTime = row1.DepTime;			row2.DepDelay = row1.DepDelay;			row2.DepDelayMinutes = row1.DepDelayMinutes;			row2.DepDel15 = row1.DepDel15;			row2.DepartureDelayGroups = row1.DepartureDelayGroups;			row2.DepTimeBlk = row1.DepTimeBlk;			row2.TaxiOut = row1.TaxiOut;			row2.WheelsOff = row1.WheelsOff;			row2.WheelsOn = row1.WheelsOn;			row2.TaxiIn = row1.TaxiIn;			row2.CRSArrTime = row1.CRSArrTime;			row2.ArrTime = row1.ArrTime;			row2.ArrDelay = row1.ArrDelay;			row2.ArrDelayMinutes = row1.ArrDelayMinutes;			row2.ArrDel15 = row1.ArrDel15;			row2.ArrivalDelayGroups = row1.ArrivalDelayGroups;			row2.ArrTimeBlk = row1.ArrTimeBlk;			row2.Cancelled = row1.Cancelled;			row2.CancellationCode = row1.CancellationCode;			row2.Diverted = row1.Diverted;			row2.CRSElapsedTime = row1.CRSElapsedTime;			row2.ActualElapsedTime = row1.ActualElapsedTime;			row2.AirTime = row1.AirTime;			row2.Flights = row1.Flights;			row2.Distance = row1.Distance;			row2.DistanceGroup = row1.DistanceGroup;			row2.CarrierDelay = row1.CarrierDelay;			row2.WeatherDelay = row1.WeatherDelay;			row2.NASDelay = row1.NASDelay;			row2.SecurityDelay = row1.SecurityDelay;			row2.LateAircraftDelay = row1.LateAircraftDelay;			row2.FirstDepTime = row1.FirstDepTime;			row2.TotalAddGTime = row1.TotalAddGTime;			row2.LongestAddGTime = row1.LongestAddGTime;			row2.DivAirportLandings = row1.DivAirportLandings;			row2.DivReachedDest = row1.DivReachedDest;			row2.DivActualElapsedTime = row1.DivActualElapsedTime;			row2.DivArrDelay = row1.DivArrDelay;			row2.DivDistance = row1.DivDistance;			row2.Div1Airport = row1.Div1Airport;			row2.Div1AirportID = row1.Div1AirportID;			row2.Div1AirportSeqID = row1.Div1AirportSeqID;			row2.Div1WheelsOn = row1.Div1WheelsOn;			row2.Div1TotalGTime = row1.Div1TotalGTime;			row2.Div1LongestGTime = row1.Div1LongestGTime;			row2.Div1WheelsOff = row1.Div1WheelsOff;			row2.Div1TailNum = row1.Div1TailNum;			row2.Div2Airport = row1.Div2Airport;			row2.Div2AirportID = row1.Div2AirportID;			row2.Div2AirportSeqID = row1.Div2AirportSeqID;			row2.Div2WheelsOn = row1.Div2WheelsOn;			row2.Div2TotalGTime = row1.Div2TotalGTime;			row2.Div2LongestGTime = row1.Div2LongestGTime;			row2.Div2WheelsOff = row1.Div2WheelsOff;			row2.Div2TailNum = row1.Div2TailNum;			row2.Div3Airport = row1.Div3Airport;			row2.Div3AirportID = row1.Div3AirportID;			row2.Div3AirportSeqID = row1.Div3AirportSeqID;			row2.Div3WheelsOn = row1.Div3WheelsOn;			row2.Div3TotalGTime = row1.Div3TotalGTime;			row2.Div3LongestGTime = row1.Div3LongestGTime;			row2.Div3WheelsOff = row1.Div3WheelsOff;			row2.Div3TailNum = row1.Div3TailNum;			row2.Div4Airport = row1.Div4Airport;			row2.Div4AirportID = row1.Div4AirportID;			row2.Div4AirportSeqID = row1.Div4AirportSeqID;			row2.Div4WheelsOn = row1.Div4WheelsOn;			row2.Div4TotalGTime = row1.Div4TotalGTime;			row2.Div4LongestGTime = row1.Div4LongestGTime;			row2.Div4WheelsOff = row1.Div4WheelsOff;			row2.Div4TailNum = row1.Div4TailNum;			row2.Div5Airport = row1.Div5Airport;			row2.Div5AirportID = row1.Div5AirportID;			row2.Div5AirportSeqID = row1.Div5AirportSeqID;			row2.Div5WheelsOn = row1.Div5WheelsOn;			row2.Div5TotalGTime = row1.Div5TotalGTime;			row2.Div5LongestGTime = row1.Div5LongestGTime;			row2.Div5WheelsOff = row1.Div5WheelsOff;			row2.Div5TailNum = row1.Div5TailNum;			row2.Duplicate = row1.Duplicate;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[119];

						logRowUtil_tLogRow_1.putTableVerticalValue_0(row2,row_tLogRow_1);
						logRowUtil_tLogRow_1.putTableVerticalValue_1(row2,row_tLogRow_1); 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

dimension = null;


// # Output table : 'dimension'
dimension_tmp.originId = Numeric.sequence("OriginSeq", 1, 1) ;
dimension_tmp.originKey = row3.OriginAirportID ;
dimension_tmp.originAirportSeqId = row3.OriginAirportSeqID ;
dimension_tmp.airportCode = row3.Origin ;
dimension_tmp.cityName = row3.OriginCityName ;
dimension_tmp.stateCode = row3.OriginState ;
dimension_tmp.stateName = row3.OriginStateName ;
dimension_tmp.worldAreaCode = row3.OriginWac ;
dimension = dimension_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "dimension"
if(dimension != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"dimension"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_2=new String[8];
                            rowtFileOutputDelimited_2[0]=dimension.originId == null ? null : String.valueOf(dimension.originId);
                            rowtFileOutputDelimited_2[1]=dimension.originKey == null ? null : String.valueOf(dimension.originKey);
                            rowtFileOutputDelimited_2[2]=dimension.originAirportSeqId == null ? null : String.valueOf(dimension.originAirportSeqId);
                            rowtFileOutputDelimited_2[3]=dimension.airportCode == null ? null : dimension.airportCode;
                            rowtFileOutputDelimited_2[4]=dimension.cityName == null ? null : dimension.cityName;
                            rowtFileOutputDelimited_2[5]=dimension.stateCode == null ? null : dimension.stateCode;
                            rowtFileOutputDelimited_2[6]=dimension.stateName == null ? null : dimension.stateName;
                            rowtFileOutputDelimited_2[7]=dimension.worldAreaCode == null ? null : String.valueOf(dimension.worldAreaCode);
                nb_line_tFileOutputDelimited_2++;
                resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
                                       CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "dimension"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_2!=null) {
				    	CsvWritertFileOutputDelimited_2.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"dimension");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tS3Connection_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_2");
					
						if(CsvWritertFileOutputDelimited_2!=null) {
					    	CsvWritertFileOutputDelimited_2.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oLZ7dhsp8ghUq5Wfz5ROy43jw/PqFip6BDKsAq6xTXH57QlVE1WWYn1gTe1kAtE3HWEYM2A0D1oaexFzZObTRvaYoPI=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PSSPPWBSHA",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "DimOrigin.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/DimOrigin.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/presentation", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("paravolar/presentation")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("paravolar/presentation", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("paravolar/presentation", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DimOrigin DimOriginClass = new DimOrigin();

        int exitCode = DimOriginClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DimOrigin.class.getClassLoader().getResourceAsStream("paravolar/dimorigin_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DimOrigin.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DimOrigin");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     434216 characters generated by Talend Open Studio for Data Integration 
 *     on the November 8, 2022 at 11:17:37 PM CST
 ************************************************************************************************/