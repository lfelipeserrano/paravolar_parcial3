// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package paravolar.process_flights_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: process_flights Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class process_flights implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(month != null){
				
					this.setProperty("month", month.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String month;
public String getMonth(){
	return this.month;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "process_flights";
	private final String projectName = "PARAVOLAR";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				process_flights.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(process_flights.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tS3Connection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Connection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Get_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Get_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Put_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tS3Put_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tS3Connection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Get_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tS3Put_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tS3Connection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Connection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Connection_1", false);
		start_Hash.put("tS3Connection_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Connection_1";

	
		int tos_count_tS3Connection_1 = 0;
		
	
	
	     
	final String decryptedPassword_tS3Connection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:WOjMpVK9p3BLMrC6p+YzMLlykX2G2Jdr6tSeYFEZxPp2BFJ7H0daqjFA5odbQFU74t1u/Mnle2uvppcTV/RXcBBGXvw=");

            com.amazonaws.auth.AWSCredentials credentials_tS3Connection_1 = new com.amazonaws.auth.BasicAWSCredentials("AKIAVMNG53PSSPPWBSHA",decryptedPassword_tS3Connection_1);
            com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_tS3Connection_1 = new com.amazonaws.auth.AWSStaticCredentialsProvider(credentials_tS3Connection_1);
		
		com.amazonaws.ClientConfiguration cc_tS3Connection_1 = new com.amazonaws.ClientConfiguration();
		cc_tS3Connection_1.setUserAgent("APN/1.0 Talend/8.0 Studio/8.0 (Talend Open Studio)");
		
		
            com.amazonaws.services.s3.AmazonS3ClientBuilder builder_tS3Connection_1 = com.amazonaws.services.s3.AmazonS3ClientBuilder.standard();

        final boolean useRegionEndpoint_tS3Connection_1 = false;
        final String regionEndpoint_tS3Connection_1 = "s3.amazonaws.com";
        final boolean enableAccelerateMode_tS3Connection_1 = false;
        final boolean enablePathStyleAccess_tS3Connection_1 = false;
        
        if(useRegionEndpoint_tS3Connection_1 && regionEndpoint_tS3Connection_1 != null && !regionEndpoint_tS3Connection_1.isEmpty()) {
                builder_tS3Connection_1.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(regionEndpoint_tS3Connection_1,null))
                .withForceGlobalBucketAccessEnabled(true);
        } else {
                builder_tS3Connection_1.withRegion("us-east-1") // The first region to try your request against
                .withForceGlobalBucketAccessEnabled(true); // If a bucket is in a different region, try again in the correct region
        }
                
        if(enableAccelerateMode_tS3Connection_1) {
            builder_tS3Connection_1.withAccelerateModeEnabled(true);
        }
        
        builder_tS3Connection_1.withCredentials(credentialsProvider_tS3Connection_1).withClientConfiguration(cc_tS3Connection_1);
            
        if(useRegionEndpoint_tS3Connection_1 && enablePathStyleAccess_tS3Connection_1) {
            builder_tS3Connection_1.enablePathStyleAccess();
        }
        
        com.amazonaws.services.s3.AmazonS3 conn_tS3Connection_1 = builder_tS3Connection_1.build();
		
	
	//This method is just for test connection.
	conn_tS3Connection_1.getS3AccountOwner();
	
	
	globalMap.put("conn_" + "tS3Connection_1",conn_tS3Connection_1);
	

 



/**
 * [tS3Connection_1 begin ] stop
 */
	
	/**
	 * [tS3Connection_1 main ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 


	tos_count_tS3Connection_1++;

/**
 * [tS3Connection_1 main ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Connection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Connection_1 end ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 

ok_Hash.put("tS3Connection_1", true);
end_Hash.put("tS3Connection_1", System.currentTimeMillis());




/**
 * [tS3Connection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Connection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tS3Get_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Connection_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Connection_1";

	

 



/**
 * [tS3Connection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Connection_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Get_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Get_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tS3Get_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Get_1", false);
		start_Hash.put("tS3Get_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Get_1";

	
		int tos_count_tS3Get_1 = 0;
		
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Get_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Get_1 = null;
	
	try{
		
		tm_tS3Get_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
				.standard()
				.withS3Client(conn_tS3Get_1)
				.build();
		
				
		com.amazonaws.services.s3.model.GetObjectRequest getObjectRequest_tS3Get_1 = new com.amazonaws.services.s3.model.GetObjectRequest("paravolar/stage", "config.txt");

		com.amazonaws.services.s3.transfer.Download download_tS3Get_1 = tm_tS3Get_1.download(
			getObjectRequest_tS3Get_1, 
			new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage_config.txt"), 
			null, 
			0l, 
			true);
			
		download_tS3Get_1.waitForCompletion();
		
		
	}catch(java.lang.Exception e_tS3Get_1){
globalMap.put("tS3Get_1_ERROR_MESSAGE",e_tS3Get_1.getMessage());
		
		System.err.println(e_tS3Get_1.getMessage());
		
	}finally{
	
		if(tm_tS3Get_1 != null){
	         tm_tS3Get_1.shutdownNow(false);
	    }
	}
	

 



/**
 * [tS3Get_1 begin ] stop
 */
	
	/**
	 * [tS3Get_1 main ] start
	 */

	

	
	
	currentComponent="tS3Get_1";

	

 


	tos_count_tS3Get_1++;

/**
 * [tS3Get_1 main ] stop
 */
	
	/**
	 * [tS3Get_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Get_1";

	

 



/**
 * [tS3Get_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Get_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Get_1";

	

 



/**
 * [tS3Get_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Get_1 end ] start
	 */

	

	
	
	currentComponent="tS3Get_1";

	

 

ok_Hash.put("tS3Get_1", true);
end_Hash.put("tS3Get_1", System.currentTimeMillis());




/**
 * [tS3Get_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tS3Get_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputDelimited_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Get_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Get_1";

	

 



/**
 * [tS3Get_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Get_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage_config.txt";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage_config.txt", "ISO-8859-15","=","\n",true,0,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
							row6.key = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row6.value = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row6.key != null){
                          tmp_key_tContextLoad_1 = row6.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row6.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row6.key != null) {
                    key_tContextLoad_1 =
                        row6.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row6.value != null) {
                    value_tContextLoad_1 =
                        row6.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
				

                        System.out.println("tContextLoad_1 set key \"" + key_tContextLoad_1 + "\" with value \"" + currentValue_tContextLoad_1 + "\"");
  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "month".equals(key_tContextLoad_1))
        {
           context.month=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
globalMap.put("tContextLoad_1_ERROR_MESSAGE",e.getMessage());
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stage_config.txt") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class deltaStruct implements routines.system.IPersistableRow<deltaStruct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(deltaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];

	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PARAVOLAR_process_flights.length) {
				if(length < 1024 && commonByteArray_PARAVOLAR_process_flights.length == 0) {
   					commonByteArray_PARAVOLAR_process_flights = new byte[1024];
				} else {
   					commonByteArray_PARAVOLAR_process_flights = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PARAVOLAR_process_flights, 0, length);
			strReturn = new String(commonByteArray_PARAVOLAR_process_flights, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Year = readInteger(dis);
					
						this.Quarter = readInteger(dis);
					
						this.Month = readInteger(dis);
					
						this.DayofMonth = readInteger(dis);
					
						this.DayOfWeek = readInteger(dis);
					
					this.FlightDate = readString(dis);
					
					this.Marketing_Airline_Network = readString(dis);
					
					this.Operated_or_Branded_Code_Share_Partners = readString(dis);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis);
					
					this.IATA_Code_Marketing_Airline = readString(dis);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis);
					
					this.Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis);
					
					this.Operating_Airline = readString(dis);
					
						this.DOT_ID_Operating_Airline = readInteger(dis);
					
					this.IATA_Code_Operating_Airline = readString(dis);
					
					this.Tail_Number = readString(dis);
					
						this.Flight_Number_Operating_Airline = readInteger(dis);
					
						this.OriginAirportID = readInteger(dis);
					
						this.OriginAirportSeqID = readInteger(dis);
					
						this.OriginCityMarketID = readInteger(dis);
					
					this.Origin = readString(dis);
					
					this.OriginCityName = readString(dis);
					
					this.OriginState = readString(dis);
					
					this.OriginStateFips = readString(dis);
					
					this.OriginStateName = readString(dis);
					
						this.OriginWac = readInteger(dis);
					
						this.DestAirportID = readInteger(dis);
					
						this.DestAirportSeqID = readInteger(dis);
					
						this.DestCityMarketID = readInteger(dis);
					
					this.Dest = readString(dis);
					
					this.DestCityName = readString(dis);
					
					this.DestState = readString(dis);
					
					this.DestStateFips = readString(dis);
					
					this.DestStateName = readString(dis);
					
						this.DestWac = readInteger(dis);
					
					this.CRSDepTime = readString(dis);
					
					this.DepTime = readString(dis);
					
					this.DepDelay = readString(dis);
					
					this.DepDelayMinutes = readString(dis);
					
					this.DepDel15 = readString(dis);
					
					this.DepartureDelayGroups = readString(dis);
					
					this.DepTimeBlk = readString(dis);
					
					this.TaxiOut = readString(dis);
					
					this.WheelsOff = readString(dis);
					
					this.WheelsOn = readString(dis);
					
					this.TaxiIn = readString(dis);
					
					this.CRSArrTime = readString(dis);
					
					this.ArrTime = readString(dis);
					
					this.ArrDelay = readString(dis);
					
					this.ArrDelayMinutes = readString(dis);
					
					this.ArrDel15 = readString(dis);
					
					this.ArrivalDelayGroups = readString(dis);
					
					this.ArrTimeBlk = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
					this.CancellationCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
					this.ActualElapsedTime = readString(dis);
					
					this.AirTime = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis);
					
					this.CarrierDelay = readString(dis);
					
					this.WeatherDelay = readString(dis);
					
					this.NASDelay = readString(dis);
					
					this.SecurityDelay = readString(dis);
					
					this.LateAircraftDelay = readString(dis);
					
					this.FirstDepTime = readString(dis);
					
					this.TotalAddGTime = readString(dis);
					
					this.LongestAddGTime = readString(dis);
					
						this.DivAirportLandings = readInteger(dis);
					
					this.DivReachedDest = readString(dis);
					
					this.DivActualElapsedTime = readString(dis);
					
					this.DivArrDelay = readString(dis);
					
					this.DivDistance = readString(dis);
					
					this.Div1Airport = readString(dis);
					
					this.Div1AirportID = readString(dis);
					
					this.Div1AirportSeqID = readString(dis);
					
					this.Div1WheelsOn = readString(dis);
					
					this.Div1TotalGTime = readString(dis);
					
					this.Div1LongestGTime = readString(dis);
					
					this.Div1WheelsOff = readString(dis);
					
					this.Div1TailNum = readString(dis);
					
					this.Div2Airport = readString(dis);
					
					this.Div2AirportID = readString(dis);
					
					this.Div2AirportSeqID = readString(dis);
					
					this.Div2WheelsOn = readString(dis);
					
					this.Div2TotalGTime = readString(dis);
					
					this.Div2LongestGTime = readString(dis);
					
					this.Div2WheelsOff = readString(dis);
					
					this.Div2TailNum = readString(dis);
					
					this.Div3Airport = readString(dis);
					
					this.Div3AirportID = readString(dis);
					
					this.Div3AirportSeqID = readString(dis);
					
					this.Div3WheelsOn = readString(dis);
					
					this.Div3TotalGTime = readString(dis);
					
					this.Div3LongestGTime = readString(dis);
					
					this.Div3WheelsOff = readString(dis);
					
					this.Div3TailNum = readString(dis);
					
					this.Div4Airport = readString(dis);
					
					this.Div4AirportID = readString(dis);
					
					this.Div4AirportSeqID = readString(dis);
					
					this.Div4WheelsOn = readString(dis);
					
					this.Div4TotalGTime = readString(dis);
					
					this.Div4LongestGTime = readString(dis);
					
					this.Div4WheelsOff = readString(dis);
					
					this.Div4TailNum = readString(dis);
					
					this.Div5Airport = readString(dis);
					
					this.Div5AirportID = readString(dis);
					
					this.Div5AirportSeqID = readString(dis);
					
					this.Div5WheelsOn = readString(dis);
					
					this.Div5TotalGTime = readString(dis);
					
					this.Div5LongestGTime = readString(dis);
					
					this.Div5WheelsOff = readString(dis);
					
					this.Div5TailNum = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Year,dos);
					
					// Integer
				
						writeInteger(this.Quarter,dos);
					
					// Integer
				
						writeInteger(this.Month,dos);
					
					// Integer
				
						writeInteger(this.DayofMonth,dos);
					
					// Integer
				
						writeInteger(this.DayOfWeek,dos);
					
					// String
				
						writeString(this.FlightDate,dos);
					
					// String
				
						writeString(this.Marketing_Airline_Network,dos);
					
					// String
				
						writeString(this.Operated_or_Branded_Code_Share_Partners,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Marketing_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Marketing_Airline,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Marketing_Airline,dos);
					
					// String
				
						writeString(this.Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline,dos);
					
					// String
				
						writeString(this.Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.DOT_ID_Operating_Airline,dos);
					
					// String
				
						writeString(this.IATA_Code_Operating_Airline,dos);
					
					// String
				
						writeString(this.Tail_Number,dos);
					
					// Integer
				
						writeInteger(this.Flight_Number_Operating_Airline,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportID,dos);
					
					// Integer
				
						writeInteger(this.OriginAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.OriginCityMarketID,dos);
					
					// String
				
						writeString(this.Origin,dos);
					
					// String
				
						writeString(this.OriginCityName,dos);
					
					// String
				
						writeString(this.OriginState,dos);
					
					// String
				
						writeString(this.OriginStateFips,dos);
					
					// String
				
						writeString(this.OriginStateName,dos);
					
					// Integer
				
						writeInteger(this.OriginWac,dos);
					
					// Integer
				
						writeInteger(this.DestAirportID,dos);
					
					// Integer
				
						writeInteger(this.DestAirportSeqID,dos);
					
					// Integer
				
						writeInteger(this.DestCityMarketID,dos);
					
					// String
				
						writeString(this.Dest,dos);
					
					// String
				
						writeString(this.DestCityName,dos);
					
					// String
				
						writeString(this.DestState,dos);
					
					// String
				
						writeString(this.DestStateFips,dos);
					
					// String
				
						writeString(this.DestStateName,dos);
					
					// Integer
				
						writeInteger(this.DestWac,dos);
					
					// String
				
						writeString(this.CRSDepTime,dos);
					
					// String
				
						writeString(this.DepTime,dos);
					
					// String
				
						writeString(this.DepDelay,dos);
					
					// String
				
						writeString(this.DepDelayMinutes,dos);
					
					// String
				
						writeString(this.DepDel15,dos);
					
					// String
				
						writeString(this.DepartureDelayGroups,dos);
					
					// String
				
						writeString(this.DepTimeBlk,dos);
					
					// String
				
						writeString(this.TaxiOut,dos);
					
					// String
				
						writeString(this.WheelsOff,dos);
					
					// String
				
						writeString(this.WheelsOn,dos);
					
					// String
				
						writeString(this.TaxiIn,dos);
					
					// String
				
						writeString(this.CRSArrTime,dos);
					
					// String
				
						writeString(this.ArrTime,dos);
					
					// String
				
						writeString(this.ArrDelay,dos);
					
					// String
				
						writeString(this.ArrDelayMinutes,dos);
					
					// String
				
						writeString(this.ArrDel15,dos);
					
					// String
				
						writeString(this.ArrivalDelayGroups,dos);
					
					// String
				
						writeString(this.ArrTimeBlk,dos);
					
					// Float
				
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
					// String
				
						writeString(this.CancellationCode,dos);
					
					// Float
				
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
					// Float
				
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
					// String
				
						writeString(this.ActualElapsedTime,dos);
					
					// String
				
						writeString(this.AirTime,dos);
					
					// Float
				
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
					// Float
				
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					// Integer
				
						writeInteger(this.DistanceGroup,dos);
					
					// String
				
						writeString(this.CarrierDelay,dos);
					
					// String
				
						writeString(this.WeatherDelay,dos);
					
					// String
				
						writeString(this.NASDelay,dos);
					
					// String
				
						writeString(this.SecurityDelay,dos);
					
					// String
				
						writeString(this.LateAircraftDelay,dos);
					
					// String
				
						writeString(this.FirstDepTime,dos);
					
					// String
				
						writeString(this.TotalAddGTime,dos);
					
					// String
				
						writeString(this.LongestAddGTime,dos);
					
					// Integer
				
						writeInteger(this.DivAirportLandings,dos);
					
					// String
				
						writeString(this.DivReachedDest,dos);
					
					// String
				
						writeString(this.DivActualElapsedTime,dos);
					
					// String
				
						writeString(this.DivArrDelay,dos);
					
					// String
				
						writeString(this.DivDistance,dos);
					
					// String
				
						writeString(this.Div1Airport,dos);
					
					// String
				
						writeString(this.Div1AirportID,dos);
					
					// String
				
						writeString(this.Div1AirportSeqID,dos);
					
					// String
				
						writeString(this.Div1WheelsOn,dos);
					
					// String
				
						writeString(this.Div1TotalGTime,dos);
					
					// String
				
						writeString(this.Div1LongestGTime,dos);
					
					// String
				
						writeString(this.Div1WheelsOff,dos);
					
					// String
				
						writeString(this.Div1TailNum,dos);
					
					// String
				
						writeString(this.Div2Airport,dos);
					
					// String
				
						writeString(this.Div2AirportID,dos);
					
					// String
				
						writeString(this.Div2AirportSeqID,dos);
					
					// String
				
						writeString(this.Div2WheelsOn,dos);
					
					// String
				
						writeString(this.Div2TotalGTime,dos);
					
					// String
				
						writeString(this.Div2LongestGTime,dos);
					
					// String
				
						writeString(this.Div2WheelsOff,dos);
					
					// String
				
						writeString(this.Div2TailNum,dos);
					
					// String
				
						writeString(this.Div3Airport,dos);
					
					// String
				
						writeString(this.Div3AirportID,dos);
					
					// String
				
						writeString(this.Div3AirportSeqID,dos);
					
					// String
				
						writeString(this.Div3WheelsOn,dos);
					
					// String
				
						writeString(this.Div3TotalGTime,dos);
					
					// String
				
						writeString(this.Div3LongestGTime,dos);
					
					// String
				
						writeString(this.Div3WheelsOff,dos);
					
					// String
				
						writeString(this.Div3TailNum,dos);
					
					// String
				
						writeString(this.Div4Airport,dos);
					
					// String
				
						writeString(this.Div4AirportID,dos);
					
					// String
				
						writeString(this.Div4AirportSeqID,dos);
					
					// String
				
						writeString(this.Div4WheelsOn,dos);
					
					// String
				
						writeString(this.Div4TotalGTime,dos);
					
					// String
				
						writeString(this.Div4LongestGTime,dos);
					
					// String
				
						writeString(this.Div4WheelsOff,dos);
					
					// String
				
						writeString(this.Div4TailNum,dos);
					
					// String
				
						writeString(this.Div5Airport,dos);
					
					// String
				
						writeString(this.Div5AirportID,dos);
					
					// String
				
						writeString(this.Div5AirportSeqID,dos);
					
					// String
				
						writeString(this.Div5WheelsOn,dos);
					
					// String
				
						writeString(this.Div5TotalGTime,dos);
					
					// String
				
						writeString(this.Div5LongestGTime,dos);
					
					// String
				
						writeString(this.Div5WheelsOff,dos);
					
					// String
				
						writeString(this.Div5TailNum,dos);
					
					// Character
				
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row1Struct row1 = new row1Struct();
deltaStruct delta = new deltaStruct();
deltaStruct row3 = delta;

		row4Struct row4 = new row4Struct();

			row5Struct row5 = new row5Struct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_2{
                                    public void putHeaderValue_0(String[] headColutFileOutputDelimited_2)throws java.lang.Exception{
                                        headColutFileOutputDelimited_2[0]="Year";
                                        headColutFileOutputDelimited_2[1]="Quarter";
                                        headColutFileOutputDelimited_2[2]="Month";
                                        headColutFileOutputDelimited_2[3]="DayofMonth";
                                        headColutFileOutputDelimited_2[4]="DayOfWeek";
                                        headColutFileOutputDelimited_2[5]="FlightDate";
                                        headColutFileOutputDelimited_2[6]="Marketing_Airline_Network";
                                        headColutFileOutputDelimited_2[7]="Operated_or_Branded_Code_Share_Partners";
                                        headColutFileOutputDelimited_2[8]="DOT_ID_Marketing_Airline";
                                        headColutFileOutputDelimited_2[9]="IATA_Code_Marketing_Airline";
                                        headColutFileOutputDelimited_2[10]="Flight_Number_Marketing_Airline";
                                        headColutFileOutputDelimited_2[11]="Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_2[12]="DOT_ID_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_2[13]="IATA_Code_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_2[14]="Flight_Num_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_2[15]="Operating_Airline";
                                        headColutFileOutputDelimited_2[16]="DOT_ID_Operating_Airline";
                                        headColutFileOutputDelimited_2[17]="IATA_Code_Operating_Airline";
                                        headColutFileOutputDelimited_2[18]="Tail_Number";
                                        headColutFileOutputDelimited_2[19]="Flight_Number_Operating_Airline";
                                        headColutFileOutputDelimited_2[20]="OriginAirportID";
                                        headColutFileOutputDelimited_2[21]="OriginAirportSeqID";
                                        headColutFileOutputDelimited_2[22]="OriginCityMarketID";
                                        headColutFileOutputDelimited_2[23]="Origin";
                                        headColutFileOutputDelimited_2[24]="OriginCityName";
                                        headColutFileOutputDelimited_2[25]="OriginState";
                                        headColutFileOutputDelimited_2[26]="OriginStateFips";
                                        headColutFileOutputDelimited_2[27]="OriginStateName";
                                        headColutFileOutputDelimited_2[28]="OriginWac";
                                        headColutFileOutputDelimited_2[29]="DestAirportID";
                                        headColutFileOutputDelimited_2[30]="DestAirportSeqID";
                                        headColutFileOutputDelimited_2[31]="DestCityMarketID";
                                        headColutFileOutputDelimited_2[32]="Dest";
                                        headColutFileOutputDelimited_2[33]="DestCityName";
                                        headColutFileOutputDelimited_2[34]="DestState";
                                        headColutFileOutputDelimited_2[35]="DestStateFips";
                                        headColutFileOutputDelimited_2[36]="DestStateName";
                                        headColutFileOutputDelimited_2[37]="DestWac";
                                        headColutFileOutputDelimited_2[38]="CRSDepTime";
                                        headColutFileOutputDelimited_2[39]="DepTime";
                                        headColutFileOutputDelimited_2[40]="DepDelay";
                                        headColutFileOutputDelimited_2[41]="DepDelayMinutes";
                                        headColutFileOutputDelimited_2[42]="DepDel15";
                                        headColutFileOutputDelimited_2[43]="DepartureDelayGroups";
                                        headColutFileOutputDelimited_2[44]="DepTimeBlk";
                                        headColutFileOutputDelimited_2[45]="TaxiOut";
                                        headColutFileOutputDelimited_2[46]="WheelsOff";
                                        headColutFileOutputDelimited_2[47]="WheelsOn";
                                        headColutFileOutputDelimited_2[48]="TaxiIn";
                                        headColutFileOutputDelimited_2[49]="CRSArrTime";
                                        headColutFileOutputDelimited_2[50]="ArrTime";
                                        headColutFileOutputDelimited_2[51]="ArrDelay";
                                        headColutFileOutputDelimited_2[52]="ArrDelayMinutes";
                                        headColutFileOutputDelimited_2[53]="ArrDel15";
                                        headColutFileOutputDelimited_2[54]="ArrivalDelayGroups";
                                        headColutFileOutputDelimited_2[55]="ArrTimeBlk";
                                        headColutFileOutputDelimited_2[56]="Cancelled";
                                        headColutFileOutputDelimited_2[57]="CancellationCode";
                                        headColutFileOutputDelimited_2[58]="Diverted";
                                        headColutFileOutputDelimited_2[59]="CRSElapsedTime";
                                        headColutFileOutputDelimited_2[60]="ActualElapsedTime";
                                        headColutFileOutputDelimited_2[61]="AirTime";
                                        headColutFileOutputDelimited_2[62]="Flights";
                                        headColutFileOutputDelimited_2[63]="Distance";
                                        headColutFileOutputDelimited_2[64]="DistanceGroup";
                                        headColutFileOutputDelimited_2[65]="CarrierDelay";
                                        headColutFileOutputDelimited_2[66]="WeatherDelay";
                                        headColutFileOutputDelimited_2[67]="NASDelay";
                                        headColutFileOutputDelimited_2[68]="SecurityDelay";
                                        headColutFileOutputDelimited_2[69]="LateAircraftDelay";
                                        headColutFileOutputDelimited_2[70]="FirstDepTime";
                                        headColutFileOutputDelimited_2[71]="TotalAddGTime";
                                        headColutFileOutputDelimited_2[72]="LongestAddGTime";
                                        headColutFileOutputDelimited_2[73]="DivAirportLandings";
                                        headColutFileOutputDelimited_2[74]="DivReachedDest";
                                        headColutFileOutputDelimited_2[75]="DivActualElapsedTime";
                                        headColutFileOutputDelimited_2[76]="DivArrDelay";
                                        headColutFileOutputDelimited_2[77]="DivDistance";
                                        headColutFileOutputDelimited_2[78]="Div1Airport";
                                        headColutFileOutputDelimited_2[79]="Div1AirportID";
                                        headColutFileOutputDelimited_2[80]="Div1AirportSeqID";
                                        headColutFileOutputDelimited_2[81]="Div1WheelsOn";
                                        headColutFileOutputDelimited_2[82]="Div1TotalGTime";
                                        headColutFileOutputDelimited_2[83]="Div1LongestGTime";
                                        headColutFileOutputDelimited_2[84]="Div1WheelsOff";
                                        headColutFileOutputDelimited_2[85]="Div1TailNum";
                                        headColutFileOutputDelimited_2[86]="Div2Airport";
                                        headColutFileOutputDelimited_2[87]="Div2AirportID";
                                        headColutFileOutputDelimited_2[88]="Div2AirportSeqID";
                                        headColutFileOutputDelimited_2[89]="Div2WheelsOn";
                                    }
                                    public void putHeaderValue_1(String[] headColutFileOutputDelimited_2)throws java.lang.Exception{
                                        headColutFileOutputDelimited_2[90]="Div2TotalGTime";
                                        headColutFileOutputDelimited_2[91]="Div2LongestGTime";
                                        headColutFileOutputDelimited_2[92]="Div2WheelsOff";
                                        headColutFileOutputDelimited_2[93]="Div2TailNum";
                                        headColutFileOutputDelimited_2[94]="Div3Airport";
                                        headColutFileOutputDelimited_2[95]="Div3AirportID";
                                        headColutFileOutputDelimited_2[96]="Div3AirportSeqID";
                                        headColutFileOutputDelimited_2[97]="Div3WheelsOn";
                                        headColutFileOutputDelimited_2[98]="Div3TotalGTime";
                                        headColutFileOutputDelimited_2[99]="Div3LongestGTime";
                                        headColutFileOutputDelimited_2[100]="Div3WheelsOff";
                                        headColutFileOutputDelimited_2[101]="Div3TailNum";
                                        headColutFileOutputDelimited_2[102]="Div4Airport";
                                        headColutFileOutputDelimited_2[103]="Div4AirportID";
                                        headColutFileOutputDelimited_2[104]="Div4AirportSeqID";
                                        headColutFileOutputDelimited_2[105]="Div4WheelsOn";
                                        headColutFileOutputDelimited_2[106]="Div4TotalGTime";
                                        headColutFileOutputDelimited_2[107]="Div4LongestGTime";
                                        headColutFileOutputDelimited_2[108]="Div4WheelsOff";
                                        headColutFileOutputDelimited_2[109]="Div4TailNum";
                                        headColutFileOutputDelimited_2[110]="Div5Airport";
                                        headColutFileOutputDelimited_2[111]="Div5AirportID";
                                        headColutFileOutputDelimited_2[112]="Div5AirportSeqID";
                                        headColutFileOutputDelimited_2[113]="Div5WheelsOn";
                                        headColutFileOutputDelimited_2[114]="Div5TotalGTime";
                                        headColutFileOutputDelimited_2[115]="Div5LongestGTime";
                                        headColutFileOutputDelimited_2[116]="Div5WheelsOff";
                                        headColutFileOutputDelimited_2[117]="Div5TailNum";
                                        headColutFileOutputDelimited_2[118]="Duplicate";
                                }
                                public void putValue_0(final row5Struct row5,String[] rowtFileOutputDelimited_2){
                                    rowtFileOutputDelimited_2[0]=row5.Year == null ? null : 
                                    String.valueOf(row5.Year);
                                    rowtFileOutputDelimited_2[1]=row5.Quarter == null ? null : 
                                    String.valueOf(row5.Quarter);
                                    rowtFileOutputDelimited_2[2]=row5.Month == null ? null : 
                                    String.valueOf(row5.Month);
                                    rowtFileOutputDelimited_2[3]=row5.DayofMonth == null ? null : 
                                    String.valueOf(row5.DayofMonth);
                                    rowtFileOutputDelimited_2[4]=row5.DayOfWeek == null ? null : 
                                    String.valueOf(row5.DayOfWeek);
                                    rowtFileOutputDelimited_2[5]=row5.FlightDate == null ? null : 
                                    row5.FlightDate;
                                    rowtFileOutputDelimited_2[6]=row5.Marketing_Airline_Network == null ? null : 
                                    row5.Marketing_Airline_Network;
                                    rowtFileOutputDelimited_2[7]=row5.Operated_or_Branded_Code_Share_Partners == null ? null : 
                                    row5.Operated_or_Branded_Code_Share_Partners;
                                    rowtFileOutputDelimited_2[8]=row5.DOT_ID_Marketing_Airline == null ? null : 
                                    String.valueOf(row5.DOT_ID_Marketing_Airline);
                                    rowtFileOutputDelimited_2[9]=row5.IATA_Code_Marketing_Airline == null ? null : 
                                    row5.IATA_Code_Marketing_Airline;
                                    rowtFileOutputDelimited_2[10]=row5.Flight_Number_Marketing_Airline == null ? null : 
                                    String.valueOf(row5.Flight_Number_Marketing_Airline);
                                    rowtFileOutputDelimited_2[11]=row5.Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    row5.Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_2[12]=row5.DOT_ID_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    row5.DOT_ID_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_2[13]=row5.IATA_Code_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    row5.IATA_Code_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_2[14]=row5.Flight_Num_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    row5.Flight_Num_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_2[15]=row5.Operating_Airline == null ? null : 
                                    row5.Operating_Airline;
                                    rowtFileOutputDelimited_2[16]=row5.DOT_ID_Operating_Airline == null ? null : 
                                    String.valueOf(row5.DOT_ID_Operating_Airline);
                                    rowtFileOutputDelimited_2[17]=row5.IATA_Code_Operating_Airline == null ? null : 
                                    row5.IATA_Code_Operating_Airline;
                                    rowtFileOutputDelimited_2[18]=row5.Tail_Number == null ? null : 
                                    row5.Tail_Number;
                                    rowtFileOutputDelimited_2[19]=row5.Flight_Number_Operating_Airline == null ? null : 
                                    String.valueOf(row5.Flight_Number_Operating_Airline);
                                    rowtFileOutputDelimited_2[20]=row5.OriginAirportID == null ? null : 
                                    String.valueOf(row5.OriginAirportID);
                                    rowtFileOutputDelimited_2[21]=row5.OriginAirportSeqID == null ? null : 
                                    String.valueOf(row5.OriginAirportSeqID);
                                    rowtFileOutputDelimited_2[22]=row5.OriginCityMarketID == null ? null : 
                                    String.valueOf(row5.OriginCityMarketID);
                                    rowtFileOutputDelimited_2[23]=row5.Origin == null ? null : 
                                    row5.Origin;
                                    rowtFileOutputDelimited_2[24]=row5.OriginCityName == null ? null : 
                                    row5.OriginCityName;
                                    rowtFileOutputDelimited_2[25]=row5.OriginState == null ? null : 
                                    row5.OriginState;
                                    rowtFileOutputDelimited_2[26]=row5.OriginStateFips == null ? null : 
                                    row5.OriginStateFips;
                                    rowtFileOutputDelimited_2[27]=row5.OriginStateName == null ? null : 
                                    row5.OriginStateName;
                                    rowtFileOutputDelimited_2[28]=row5.OriginWac == null ? null : 
                                    String.valueOf(row5.OriginWac);
                                    rowtFileOutputDelimited_2[29]=row5.DestAirportID == null ? null : 
                                    String.valueOf(row5.DestAirportID);
                                    rowtFileOutputDelimited_2[30]=row5.DestAirportSeqID == null ? null : 
                                    String.valueOf(row5.DestAirportSeqID);
                                    rowtFileOutputDelimited_2[31]=row5.DestCityMarketID == null ? null : 
                                    String.valueOf(row5.DestCityMarketID);
                                    rowtFileOutputDelimited_2[32]=row5.Dest == null ? null : 
                                    row5.Dest;
                                    rowtFileOutputDelimited_2[33]=row5.DestCityName == null ? null : 
                                    row5.DestCityName;
                                    rowtFileOutputDelimited_2[34]=row5.DestState == null ? null : 
                                    row5.DestState;
                                    rowtFileOutputDelimited_2[35]=row5.DestStateFips == null ? null : 
                                    row5.DestStateFips;
                                    rowtFileOutputDelimited_2[36]=row5.DestStateName == null ? null : 
                                    row5.DestStateName;
                                    rowtFileOutputDelimited_2[37]=row5.DestWac == null ? null : 
                                    String.valueOf(row5.DestWac);
                                    rowtFileOutputDelimited_2[38]=row5.CRSDepTime == null ? null : 
                                    row5.CRSDepTime;
                                    rowtFileOutputDelimited_2[39]=row5.DepTime == null ? null : 
                                    row5.DepTime;
                                    rowtFileOutputDelimited_2[40]=row5.DepDelay == null ? null : 
                                    row5.DepDelay;
                                    rowtFileOutputDelimited_2[41]=row5.DepDelayMinutes == null ? null : 
                                    row5.DepDelayMinutes;
                                    rowtFileOutputDelimited_2[42]=row5.DepDel15 == null ? null : 
                                    row5.DepDel15;
                                    rowtFileOutputDelimited_2[43]=row5.DepartureDelayGroups == null ? null : 
                                    row5.DepartureDelayGroups;
                                    rowtFileOutputDelimited_2[44]=row5.DepTimeBlk == null ? null : 
                                    row5.DepTimeBlk;
                                    rowtFileOutputDelimited_2[45]=row5.TaxiOut == null ? null : 
                                    row5.TaxiOut;
                                    rowtFileOutputDelimited_2[46]=row5.WheelsOff == null ? null : 
                                    row5.WheelsOff;
                                    rowtFileOutputDelimited_2[47]=row5.WheelsOn == null ? null : 
                                    row5.WheelsOn;
                                    rowtFileOutputDelimited_2[48]=row5.TaxiIn == null ? null : 
                                    row5.TaxiIn;
                                    rowtFileOutputDelimited_2[49]=row5.CRSArrTime == null ? null : 
                                    row5.CRSArrTime;
                                    rowtFileOutputDelimited_2[50]=row5.ArrTime == null ? null : 
                                    row5.ArrTime;
                                    rowtFileOutputDelimited_2[51]=row5.ArrDelay == null ? null : 
                                    row5.ArrDelay;
                                    rowtFileOutputDelimited_2[52]=row5.ArrDelayMinutes == null ? null : 
                                    row5.ArrDelayMinutes;
                                    rowtFileOutputDelimited_2[53]=row5.ArrDel15 == null ? null : 
                                    row5.ArrDel15;
                                    rowtFileOutputDelimited_2[54]=row5.ArrivalDelayGroups == null ? null : 
                                    row5.ArrivalDelayGroups;
                                    rowtFileOutputDelimited_2[55]=row5.ArrTimeBlk == null ? null : 
                                    row5.ArrTimeBlk;
                                    rowtFileOutputDelimited_2[56]=row5.Cancelled == null ? null : 
                                    String.valueOf(row5.Cancelled);
                                    rowtFileOutputDelimited_2[57]=row5.CancellationCode == null ? null : 
                                    row5.CancellationCode;
                                    rowtFileOutputDelimited_2[58]=row5.Diverted == null ? null : 
                                    String.valueOf(row5.Diverted);
                                    rowtFileOutputDelimited_2[59]=row5.CRSElapsedTime == null ? null : 
                                    String.valueOf(row5.CRSElapsedTime);
                                    rowtFileOutputDelimited_2[60]=row5.ActualElapsedTime == null ? null : 
                                    row5.ActualElapsedTime;
                                    rowtFileOutputDelimited_2[61]=row5.AirTime == null ? null : 
                                    row5.AirTime;
                                    rowtFileOutputDelimited_2[62]=row5.Flights == null ? null : 
                                    String.valueOf(row5.Flights);
                                    rowtFileOutputDelimited_2[63]=row5.Distance == null ? null : 
                                    String.valueOf(row5.Distance);
                                    rowtFileOutputDelimited_2[64]=row5.DistanceGroup == null ? null : 
                                    String.valueOf(row5.DistanceGroup);
                                    rowtFileOutputDelimited_2[65]=row5.CarrierDelay == null ? null : 
                                    row5.CarrierDelay;
                                    rowtFileOutputDelimited_2[66]=row5.WeatherDelay == null ? null : 
                                    row5.WeatherDelay;
                                    rowtFileOutputDelimited_2[67]=row5.NASDelay == null ? null : 
                                    row5.NASDelay;
                                    rowtFileOutputDelimited_2[68]=row5.SecurityDelay == null ? null : 
                                    row5.SecurityDelay;
                                    rowtFileOutputDelimited_2[69]=row5.LateAircraftDelay == null ? null : 
                                    row5.LateAircraftDelay;
                                    rowtFileOutputDelimited_2[70]=row5.FirstDepTime == null ? null : 
                                    row5.FirstDepTime;
                                    rowtFileOutputDelimited_2[71]=row5.TotalAddGTime == null ? null : 
                                    row5.TotalAddGTime;
                                    rowtFileOutputDelimited_2[72]=row5.LongestAddGTime == null ? null : 
                                    row5.LongestAddGTime;
                                    rowtFileOutputDelimited_2[73]=row5.DivAirportLandings == null ? null : 
                                    String.valueOf(row5.DivAirportLandings);
                                    rowtFileOutputDelimited_2[74]=row5.DivReachedDest == null ? null : 
                                    row5.DivReachedDest;
                                    rowtFileOutputDelimited_2[75]=row5.DivActualElapsedTime == null ? null : 
                                    row5.DivActualElapsedTime;
                                    rowtFileOutputDelimited_2[76]=row5.DivArrDelay == null ? null : 
                                    row5.DivArrDelay;
                                    rowtFileOutputDelimited_2[77]=row5.DivDistance == null ? null : 
                                    row5.DivDistance;
                                    rowtFileOutputDelimited_2[78]=row5.Div1Airport == null ? null : 
                                    row5.Div1Airport;
                                    rowtFileOutputDelimited_2[79]=row5.Div1AirportID == null ? null : 
                                    row5.Div1AirportID;
                                    rowtFileOutputDelimited_2[80]=row5.Div1AirportSeqID == null ? null : 
                                    row5.Div1AirportSeqID;
                                    rowtFileOutputDelimited_2[81]=row5.Div1WheelsOn == null ? null : 
                                    row5.Div1WheelsOn;
                                    rowtFileOutputDelimited_2[82]=row5.Div1TotalGTime == null ? null : 
                                    row5.Div1TotalGTime;
                                    rowtFileOutputDelimited_2[83]=row5.Div1LongestGTime == null ? null : 
                                    row5.Div1LongestGTime;
                                    rowtFileOutputDelimited_2[84]=row5.Div1WheelsOff == null ? null : 
                                    row5.Div1WheelsOff;
                                    rowtFileOutputDelimited_2[85]=row5.Div1TailNum == null ? null : 
                                    row5.Div1TailNum;
                                    rowtFileOutputDelimited_2[86]=row5.Div2Airport == null ? null : 
                                    row5.Div2Airport;
                                    rowtFileOutputDelimited_2[87]=row5.Div2AirportID == null ? null : 
                                    row5.Div2AirportID;
                                    rowtFileOutputDelimited_2[88]=row5.Div2AirportSeqID == null ? null : 
                                    row5.Div2AirportSeqID;
                                    rowtFileOutputDelimited_2[89]=row5.Div2WheelsOn == null ? null : 
                                    row5.Div2WheelsOn;
                                }
                                public void putValue_1(final row5Struct row5,String[] rowtFileOutputDelimited_2){
                                    rowtFileOutputDelimited_2[90]=row5.Div2TotalGTime == null ? null : 
                                    row5.Div2TotalGTime;
                                    rowtFileOutputDelimited_2[91]=row5.Div2LongestGTime == null ? null : 
                                    row5.Div2LongestGTime;
                                    rowtFileOutputDelimited_2[92]=row5.Div2WheelsOff == null ? null : 
                                    row5.Div2WheelsOff;
                                    rowtFileOutputDelimited_2[93]=row5.Div2TailNum == null ? null : 
                                    row5.Div2TailNum;
                                    rowtFileOutputDelimited_2[94]=row5.Div3Airport == null ? null : 
                                    row5.Div3Airport;
                                    rowtFileOutputDelimited_2[95]=row5.Div3AirportID == null ? null : 
                                    row5.Div3AirportID;
                                    rowtFileOutputDelimited_2[96]=row5.Div3AirportSeqID == null ? null : 
                                    row5.Div3AirportSeqID;
                                    rowtFileOutputDelimited_2[97]=row5.Div3WheelsOn == null ? null : 
                                    row5.Div3WheelsOn;
                                    rowtFileOutputDelimited_2[98]=row5.Div3TotalGTime == null ? null : 
                                    row5.Div3TotalGTime;
                                    rowtFileOutputDelimited_2[99]=row5.Div3LongestGTime == null ? null : 
                                    row5.Div3LongestGTime;
                                    rowtFileOutputDelimited_2[100]=row5.Div3WheelsOff == null ? null : 
                                    row5.Div3WheelsOff;
                                    rowtFileOutputDelimited_2[101]=row5.Div3TailNum == null ? null : 
                                    row5.Div3TailNum;
                                    rowtFileOutputDelimited_2[102]=row5.Div4Airport == null ? null : 
                                    row5.Div4Airport;
                                    rowtFileOutputDelimited_2[103]=row5.Div4AirportID == null ? null : 
                                    row5.Div4AirportID;
                                    rowtFileOutputDelimited_2[104]=row5.Div4AirportSeqID == null ? null : 
                                    row5.Div4AirportSeqID;
                                    rowtFileOutputDelimited_2[105]=row5.Div4WheelsOn == null ? null : 
                                    row5.Div4WheelsOn;
                                    rowtFileOutputDelimited_2[106]=row5.Div4TotalGTime == null ? null : 
                                    row5.Div4TotalGTime;
                                    rowtFileOutputDelimited_2[107]=row5.Div4LongestGTime == null ? null : 
                                    row5.Div4LongestGTime;
                                    rowtFileOutputDelimited_2[108]=row5.Div4WheelsOff == null ? null : 
                                    row5.Div4WheelsOff;
                                    rowtFileOutputDelimited_2[109]=row5.Div4TailNum == null ? null : 
                                    row5.Div4TailNum;
                                    rowtFileOutputDelimited_2[110]=row5.Div5Airport == null ? null : 
                                    row5.Div5Airport;
                                    rowtFileOutputDelimited_2[111]=row5.Div5AirportID == null ? null : 
                                    row5.Div5AirportID;
                                    rowtFileOutputDelimited_2[112]=row5.Div5AirportSeqID == null ? null : 
                                    row5.Div5AirportSeqID;
                                    rowtFileOutputDelimited_2[113]=row5.Div5WheelsOn == null ? null : 
                                    row5.Div5WheelsOn;
                                    rowtFileOutputDelimited_2[114]=row5.Div5TotalGTime == null ? null : 
                                    row5.Div5TotalGTime;
                                    rowtFileOutputDelimited_2[115]=row5.Div5LongestGTime == null ? null : 
                                    row5.Div5LongestGTime;
                                    rowtFileOutputDelimited_2[116]=row5.Div5WheelsOff == null ? null : 
                                    row5.Div5WheelsOff;
                                    rowtFileOutputDelimited_2[117]=row5.Div5TailNum == null ? null : 
                                    row5.Div5TailNum;
                                    rowtFileOutputDelimited_2[118]=row5.Duplicate == null ? null : 
                                    String.valueOf(row5.Duplicate);
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_2 fileOutputDelimitedUtil_tFileOutputDelimited_2=new FileOutputDelimitedUtil_tFileOutputDelimited_2();
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageUpdated.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
                String[] headColutFileOutputDelimited_2=new String[119];
            class CSVBasicSet_tFileOutputDelimited_2{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_2[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_2 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_2[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_2 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_2[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_2[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_2 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 =0;
            int currentRow_tFileOutputDelimited_2 = 0;


            CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
            csvSettings_tFileOutputDelimited_2.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                            if(fileToDelete_tFileOutputDelimited_2.exists()) {
                                fileToDelete_tFileOutputDelimited_2.delete();
                            }
                            CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_2.setSeparator(csvSettings_tFileOutputDelimited_2.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_2.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_2.setLineEnd(""+csvSettings_tFileOutputDelimited_2.getRowDelim());
                    }
                        if(filetFileOutputDelimited_2.length()==0){
                                        fileOutputDelimitedUtil_tFileOutputDelimited_2.putHeaderValue_0(headColutFileOutputDelimited_2);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_2.putHeaderValue_1(headColutFileOutputDelimited_2);
                            CsvWritertFileOutputDelimited_2.writeNext(headColutFileOutputDelimited_2);
                            CsvWritertFileOutputDelimited_2.flush();
                        }
                CsvWritertFileOutputDelimited_2.setEscapeChar(csvSettings_tFileOutputDelimited_2.getEscapeChar());
                CsvWritertFileOutputDelimited_2.setQuoteChar(csvSettings_tFileOutputDelimited_2.getTextEnclosure());
                CsvWritertFileOutputDelimited_2.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_2", CsvWritertFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4","row3");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */


	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"delta");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
                class FileOutputDelimitedUtil_tFileOutputDelimited_1{
                                    public void putHeaderValue_0(String[] headColutFileOutputDelimited_1)throws java.lang.Exception{
                                        headColutFileOutputDelimited_1[0]="Year";
                                        headColutFileOutputDelimited_1[1]="Quarter";
                                        headColutFileOutputDelimited_1[2]="Month";
                                        headColutFileOutputDelimited_1[3]="DayofMonth";
                                        headColutFileOutputDelimited_1[4]="DayOfWeek";
                                        headColutFileOutputDelimited_1[5]="FlightDate";
                                        headColutFileOutputDelimited_1[6]="Marketing_Airline_Network";
                                        headColutFileOutputDelimited_1[7]="Operated_or_Branded_Code_Share_Partners";
                                        headColutFileOutputDelimited_1[8]="DOT_ID_Marketing_Airline";
                                        headColutFileOutputDelimited_1[9]="IATA_Code_Marketing_Airline";
                                        headColutFileOutputDelimited_1[10]="Flight_Number_Marketing_Airline";
                                        headColutFileOutputDelimited_1[11]="Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_1[12]="DOT_ID_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_1[13]="IATA_Code_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_1[14]="Flight_Num_Originally_Scheduled_Code_Share_Airline";
                                        headColutFileOutputDelimited_1[15]="Operating_Airline";
                                        headColutFileOutputDelimited_1[16]="DOT_ID_Operating_Airline";
                                        headColutFileOutputDelimited_1[17]="IATA_Code_Operating_Airline";
                                        headColutFileOutputDelimited_1[18]="Tail_Number";
                                        headColutFileOutputDelimited_1[19]="Flight_Number_Operating_Airline";
                                        headColutFileOutputDelimited_1[20]="OriginAirportID";
                                        headColutFileOutputDelimited_1[21]="OriginAirportSeqID";
                                        headColutFileOutputDelimited_1[22]="OriginCityMarketID";
                                        headColutFileOutputDelimited_1[23]="Origin";
                                        headColutFileOutputDelimited_1[24]="OriginCityName";
                                        headColutFileOutputDelimited_1[25]="OriginState";
                                        headColutFileOutputDelimited_1[26]="OriginStateFips";
                                        headColutFileOutputDelimited_1[27]="OriginStateName";
                                        headColutFileOutputDelimited_1[28]="OriginWac";
                                        headColutFileOutputDelimited_1[29]="DestAirportID";
                                        headColutFileOutputDelimited_1[30]="DestAirportSeqID";
                                        headColutFileOutputDelimited_1[31]="DestCityMarketID";
                                        headColutFileOutputDelimited_1[32]="Dest";
                                        headColutFileOutputDelimited_1[33]="DestCityName";
                                        headColutFileOutputDelimited_1[34]="DestState";
                                        headColutFileOutputDelimited_1[35]="DestStateFips";
                                        headColutFileOutputDelimited_1[36]="DestStateName";
                                        headColutFileOutputDelimited_1[37]="DestWac";
                                        headColutFileOutputDelimited_1[38]="CRSDepTime";
                                        headColutFileOutputDelimited_1[39]="DepTime";
                                        headColutFileOutputDelimited_1[40]="DepDelay";
                                        headColutFileOutputDelimited_1[41]="DepDelayMinutes";
                                        headColutFileOutputDelimited_1[42]="DepDel15";
                                        headColutFileOutputDelimited_1[43]="DepartureDelayGroups";
                                        headColutFileOutputDelimited_1[44]="DepTimeBlk";
                                        headColutFileOutputDelimited_1[45]="TaxiOut";
                                        headColutFileOutputDelimited_1[46]="WheelsOff";
                                        headColutFileOutputDelimited_1[47]="WheelsOn";
                                        headColutFileOutputDelimited_1[48]="TaxiIn";
                                        headColutFileOutputDelimited_1[49]="CRSArrTime";
                                        headColutFileOutputDelimited_1[50]="ArrTime";
                                        headColutFileOutputDelimited_1[51]="ArrDelay";
                                        headColutFileOutputDelimited_1[52]="ArrDelayMinutes";
                                        headColutFileOutputDelimited_1[53]="ArrDel15";
                                        headColutFileOutputDelimited_1[54]="ArrivalDelayGroups";
                                        headColutFileOutputDelimited_1[55]="ArrTimeBlk";
                                        headColutFileOutputDelimited_1[56]="Cancelled";
                                        headColutFileOutputDelimited_1[57]="CancellationCode";
                                        headColutFileOutputDelimited_1[58]="Diverted";
                                        headColutFileOutputDelimited_1[59]="CRSElapsedTime";
                                        headColutFileOutputDelimited_1[60]="ActualElapsedTime";
                                        headColutFileOutputDelimited_1[61]="AirTime";
                                        headColutFileOutputDelimited_1[62]="Flights";
                                        headColutFileOutputDelimited_1[63]="Distance";
                                        headColutFileOutputDelimited_1[64]="DistanceGroup";
                                        headColutFileOutputDelimited_1[65]="CarrierDelay";
                                        headColutFileOutputDelimited_1[66]="WeatherDelay";
                                        headColutFileOutputDelimited_1[67]="NASDelay";
                                        headColutFileOutputDelimited_1[68]="SecurityDelay";
                                        headColutFileOutputDelimited_1[69]="LateAircraftDelay";
                                        headColutFileOutputDelimited_1[70]="FirstDepTime";
                                        headColutFileOutputDelimited_1[71]="TotalAddGTime";
                                        headColutFileOutputDelimited_1[72]="LongestAddGTime";
                                        headColutFileOutputDelimited_1[73]="DivAirportLandings";
                                        headColutFileOutputDelimited_1[74]="DivReachedDest";
                                        headColutFileOutputDelimited_1[75]="DivActualElapsedTime";
                                        headColutFileOutputDelimited_1[76]="DivArrDelay";
                                        headColutFileOutputDelimited_1[77]="DivDistance";
                                        headColutFileOutputDelimited_1[78]="Div1Airport";
                                        headColutFileOutputDelimited_1[79]="Div1AirportID";
                                        headColutFileOutputDelimited_1[80]="Div1AirportSeqID";
                                        headColutFileOutputDelimited_1[81]="Div1WheelsOn";
                                        headColutFileOutputDelimited_1[82]="Div1TotalGTime";
                                        headColutFileOutputDelimited_1[83]="Div1LongestGTime";
                                        headColutFileOutputDelimited_1[84]="Div1WheelsOff";
                                        headColutFileOutputDelimited_1[85]="Div1TailNum";
                                        headColutFileOutputDelimited_1[86]="Div2Airport";
                                        headColutFileOutputDelimited_1[87]="Div2AirportID";
                                        headColutFileOutputDelimited_1[88]="Div2AirportSeqID";
                                        headColutFileOutputDelimited_1[89]="Div2WheelsOn";
                                    }
                                    public void putHeaderValue_1(String[] headColutFileOutputDelimited_1)throws java.lang.Exception{
                                        headColutFileOutputDelimited_1[90]="Div2TotalGTime";
                                        headColutFileOutputDelimited_1[91]="Div2LongestGTime";
                                        headColutFileOutputDelimited_1[92]="Div2WheelsOff";
                                        headColutFileOutputDelimited_1[93]="Div2TailNum";
                                        headColutFileOutputDelimited_1[94]="Div3Airport";
                                        headColutFileOutputDelimited_1[95]="Div3AirportID";
                                        headColutFileOutputDelimited_1[96]="Div3AirportSeqID";
                                        headColutFileOutputDelimited_1[97]="Div3WheelsOn";
                                        headColutFileOutputDelimited_1[98]="Div3TotalGTime";
                                        headColutFileOutputDelimited_1[99]="Div3LongestGTime";
                                        headColutFileOutputDelimited_1[100]="Div3WheelsOff";
                                        headColutFileOutputDelimited_1[101]="Div3TailNum";
                                        headColutFileOutputDelimited_1[102]="Div4Airport";
                                        headColutFileOutputDelimited_1[103]="Div4AirportID";
                                        headColutFileOutputDelimited_1[104]="Div4AirportSeqID";
                                        headColutFileOutputDelimited_1[105]="Div4WheelsOn";
                                        headColutFileOutputDelimited_1[106]="Div4TotalGTime";
                                        headColutFileOutputDelimited_1[107]="Div4LongestGTime";
                                        headColutFileOutputDelimited_1[108]="Div4WheelsOff";
                                        headColutFileOutputDelimited_1[109]="Div4TailNum";
                                        headColutFileOutputDelimited_1[110]="Div5Airport";
                                        headColutFileOutputDelimited_1[111]="Div5AirportID";
                                        headColutFileOutputDelimited_1[112]="Div5AirportSeqID";
                                        headColutFileOutputDelimited_1[113]="Div5WheelsOn";
                                        headColutFileOutputDelimited_1[114]="Div5TotalGTime";
                                        headColutFileOutputDelimited_1[115]="Div5LongestGTime";
                                        headColutFileOutputDelimited_1[116]="Div5WheelsOff";
                                        headColutFileOutputDelimited_1[117]="Div5TailNum";
                                        headColutFileOutputDelimited_1[118]="Duplicate";
                                }
                                public void putValue_0(final deltaStruct delta,String[] rowtFileOutputDelimited_1){
                                    rowtFileOutputDelimited_1[0]=delta.Year == null ? null : 
                                    String.valueOf(delta.Year);
                                    rowtFileOutputDelimited_1[1]=delta.Quarter == null ? null : 
                                    String.valueOf(delta.Quarter);
                                    rowtFileOutputDelimited_1[2]=delta.Month == null ? null : 
                                    String.valueOf(delta.Month);
                                    rowtFileOutputDelimited_1[3]=delta.DayofMonth == null ? null : 
                                    String.valueOf(delta.DayofMonth);
                                    rowtFileOutputDelimited_1[4]=delta.DayOfWeek == null ? null : 
                                    String.valueOf(delta.DayOfWeek);
                                    rowtFileOutputDelimited_1[5]=delta.FlightDate == null ? null : 
                                    delta.FlightDate;
                                    rowtFileOutputDelimited_1[6]=delta.Marketing_Airline_Network == null ? null : 
                                    delta.Marketing_Airline_Network;
                                    rowtFileOutputDelimited_1[7]=delta.Operated_or_Branded_Code_Share_Partners == null ? null : 
                                    delta.Operated_or_Branded_Code_Share_Partners;
                                    rowtFileOutputDelimited_1[8]=delta.DOT_ID_Marketing_Airline == null ? null : 
                                    String.valueOf(delta.DOT_ID_Marketing_Airline);
                                    rowtFileOutputDelimited_1[9]=delta.IATA_Code_Marketing_Airline == null ? null : 
                                    delta.IATA_Code_Marketing_Airline;
                                    rowtFileOutputDelimited_1[10]=delta.Flight_Number_Marketing_Airline == null ? null : 
                                    String.valueOf(delta.Flight_Number_Marketing_Airline);
                                    rowtFileOutputDelimited_1[11]=delta.Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    delta.Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_1[12]=delta.DOT_ID_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    delta.DOT_ID_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_1[13]=delta.IATA_Code_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    delta.IATA_Code_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_1[14]=delta.Flight_Num_Originally_Scheduled_Code_Share_Airline == null ? null : 
                                    delta.Flight_Num_Originally_Scheduled_Code_Share_Airline;
                                    rowtFileOutputDelimited_1[15]=delta.Operating_Airline == null ? null : 
                                    delta.Operating_Airline;
                                    rowtFileOutputDelimited_1[16]=delta.DOT_ID_Operating_Airline == null ? null : 
                                    String.valueOf(delta.DOT_ID_Operating_Airline);
                                    rowtFileOutputDelimited_1[17]=delta.IATA_Code_Operating_Airline == null ? null : 
                                    delta.IATA_Code_Operating_Airline;
                                    rowtFileOutputDelimited_1[18]=delta.Tail_Number == null ? null : 
                                    delta.Tail_Number;
                                    rowtFileOutputDelimited_1[19]=delta.Flight_Number_Operating_Airline == null ? null : 
                                    String.valueOf(delta.Flight_Number_Operating_Airline);
                                    rowtFileOutputDelimited_1[20]=delta.OriginAirportID == null ? null : 
                                    String.valueOf(delta.OriginAirportID);
                                    rowtFileOutputDelimited_1[21]=delta.OriginAirportSeqID == null ? null : 
                                    String.valueOf(delta.OriginAirportSeqID);
                                    rowtFileOutputDelimited_1[22]=delta.OriginCityMarketID == null ? null : 
                                    String.valueOf(delta.OriginCityMarketID);
                                    rowtFileOutputDelimited_1[23]=delta.Origin == null ? null : 
                                    delta.Origin;
                                    rowtFileOutputDelimited_1[24]=delta.OriginCityName == null ? null : 
                                    delta.OriginCityName;
                                    rowtFileOutputDelimited_1[25]=delta.OriginState == null ? null : 
                                    delta.OriginState;
                                    rowtFileOutputDelimited_1[26]=delta.OriginStateFips == null ? null : 
                                    delta.OriginStateFips;
                                    rowtFileOutputDelimited_1[27]=delta.OriginStateName == null ? null : 
                                    delta.OriginStateName;
                                    rowtFileOutputDelimited_1[28]=delta.OriginWac == null ? null : 
                                    String.valueOf(delta.OriginWac);
                                    rowtFileOutputDelimited_1[29]=delta.DestAirportID == null ? null : 
                                    String.valueOf(delta.DestAirportID);
                                    rowtFileOutputDelimited_1[30]=delta.DestAirportSeqID == null ? null : 
                                    String.valueOf(delta.DestAirportSeqID);
                                    rowtFileOutputDelimited_1[31]=delta.DestCityMarketID == null ? null : 
                                    String.valueOf(delta.DestCityMarketID);
                                    rowtFileOutputDelimited_1[32]=delta.Dest == null ? null : 
                                    delta.Dest;
                                    rowtFileOutputDelimited_1[33]=delta.DestCityName == null ? null : 
                                    delta.DestCityName;
                                    rowtFileOutputDelimited_1[34]=delta.DestState == null ? null : 
                                    delta.DestState;
                                    rowtFileOutputDelimited_1[35]=delta.DestStateFips == null ? null : 
                                    delta.DestStateFips;
                                    rowtFileOutputDelimited_1[36]=delta.DestStateName == null ? null : 
                                    delta.DestStateName;
                                    rowtFileOutputDelimited_1[37]=delta.DestWac == null ? null : 
                                    String.valueOf(delta.DestWac);
                                    rowtFileOutputDelimited_1[38]=delta.CRSDepTime == null ? null : 
                                    delta.CRSDepTime;
                                    rowtFileOutputDelimited_1[39]=delta.DepTime == null ? null : 
                                    delta.DepTime;
                                    rowtFileOutputDelimited_1[40]=delta.DepDelay == null ? null : 
                                    delta.DepDelay;
                                    rowtFileOutputDelimited_1[41]=delta.DepDelayMinutes == null ? null : 
                                    delta.DepDelayMinutes;
                                    rowtFileOutputDelimited_1[42]=delta.DepDel15 == null ? null : 
                                    delta.DepDel15;
                                    rowtFileOutputDelimited_1[43]=delta.DepartureDelayGroups == null ? null : 
                                    delta.DepartureDelayGroups;
                                    rowtFileOutputDelimited_1[44]=delta.DepTimeBlk == null ? null : 
                                    delta.DepTimeBlk;
                                    rowtFileOutputDelimited_1[45]=delta.TaxiOut == null ? null : 
                                    delta.TaxiOut;
                                    rowtFileOutputDelimited_1[46]=delta.WheelsOff == null ? null : 
                                    delta.WheelsOff;
                                    rowtFileOutputDelimited_1[47]=delta.WheelsOn == null ? null : 
                                    delta.WheelsOn;
                                    rowtFileOutputDelimited_1[48]=delta.TaxiIn == null ? null : 
                                    delta.TaxiIn;
                                    rowtFileOutputDelimited_1[49]=delta.CRSArrTime == null ? null : 
                                    delta.CRSArrTime;
                                    rowtFileOutputDelimited_1[50]=delta.ArrTime == null ? null : 
                                    delta.ArrTime;
                                    rowtFileOutputDelimited_1[51]=delta.ArrDelay == null ? null : 
                                    delta.ArrDelay;
                                    rowtFileOutputDelimited_1[52]=delta.ArrDelayMinutes == null ? null : 
                                    delta.ArrDelayMinutes;
                                    rowtFileOutputDelimited_1[53]=delta.ArrDel15 == null ? null : 
                                    delta.ArrDel15;
                                    rowtFileOutputDelimited_1[54]=delta.ArrivalDelayGroups == null ? null : 
                                    delta.ArrivalDelayGroups;
                                    rowtFileOutputDelimited_1[55]=delta.ArrTimeBlk == null ? null : 
                                    delta.ArrTimeBlk;
                                    rowtFileOutputDelimited_1[56]=delta.Cancelled == null ? null : 
                                    String.valueOf(delta.Cancelled);
                                    rowtFileOutputDelimited_1[57]=delta.CancellationCode == null ? null : 
                                    delta.CancellationCode;
                                    rowtFileOutputDelimited_1[58]=delta.Diverted == null ? null : 
                                    String.valueOf(delta.Diverted);
                                    rowtFileOutputDelimited_1[59]=delta.CRSElapsedTime == null ? null : 
                                    String.valueOf(delta.CRSElapsedTime);
                                    rowtFileOutputDelimited_1[60]=delta.ActualElapsedTime == null ? null : 
                                    delta.ActualElapsedTime;
                                    rowtFileOutputDelimited_1[61]=delta.AirTime == null ? null : 
                                    delta.AirTime;
                                    rowtFileOutputDelimited_1[62]=delta.Flights == null ? null : 
                                    String.valueOf(delta.Flights);
                                    rowtFileOutputDelimited_1[63]=delta.Distance == null ? null : 
                                    String.valueOf(delta.Distance);
                                    rowtFileOutputDelimited_1[64]=delta.DistanceGroup == null ? null : 
                                    String.valueOf(delta.DistanceGroup);
                                    rowtFileOutputDelimited_1[65]=delta.CarrierDelay == null ? null : 
                                    delta.CarrierDelay;
                                    rowtFileOutputDelimited_1[66]=delta.WeatherDelay == null ? null : 
                                    delta.WeatherDelay;
                                    rowtFileOutputDelimited_1[67]=delta.NASDelay == null ? null : 
                                    delta.NASDelay;
                                    rowtFileOutputDelimited_1[68]=delta.SecurityDelay == null ? null : 
                                    delta.SecurityDelay;
                                    rowtFileOutputDelimited_1[69]=delta.LateAircraftDelay == null ? null : 
                                    delta.LateAircraftDelay;
                                    rowtFileOutputDelimited_1[70]=delta.FirstDepTime == null ? null : 
                                    delta.FirstDepTime;
                                    rowtFileOutputDelimited_1[71]=delta.TotalAddGTime == null ? null : 
                                    delta.TotalAddGTime;
                                    rowtFileOutputDelimited_1[72]=delta.LongestAddGTime == null ? null : 
                                    delta.LongestAddGTime;
                                    rowtFileOutputDelimited_1[73]=delta.DivAirportLandings == null ? null : 
                                    String.valueOf(delta.DivAirportLandings);
                                    rowtFileOutputDelimited_1[74]=delta.DivReachedDest == null ? null : 
                                    delta.DivReachedDest;
                                    rowtFileOutputDelimited_1[75]=delta.DivActualElapsedTime == null ? null : 
                                    delta.DivActualElapsedTime;
                                    rowtFileOutputDelimited_1[76]=delta.DivArrDelay == null ? null : 
                                    delta.DivArrDelay;
                                    rowtFileOutputDelimited_1[77]=delta.DivDistance == null ? null : 
                                    delta.DivDistance;
                                    rowtFileOutputDelimited_1[78]=delta.Div1Airport == null ? null : 
                                    delta.Div1Airport;
                                    rowtFileOutputDelimited_1[79]=delta.Div1AirportID == null ? null : 
                                    delta.Div1AirportID;
                                    rowtFileOutputDelimited_1[80]=delta.Div1AirportSeqID == null ? null : 
                                    delta.Div1AirportSeqID;
                                    rowtFileOutputDelimited_1[81]=delta.Div1WheelsOn == null ? null : 
                                    delta.Div1WheelsOn;
                                    rowtFileOutputDelimited_1[82]=delta.Div1TotalGTime == null ? null : 
                                    delta.Div1TotalGTime;
                                    rowtFileOutputDelimited_1[83]=delta.Div1LongestGTime == null ? null : 
                                    delta.Div1LongestGTime;
                                    rowtFileOutputDelimited_1[84]=delta.Div1WheelsOff == null ? null : 
                                    delta.Div1WheelsOff;
                                    rowtFileOutputDelimited_1[85]=delta.Div1TailNum == null ? null : 
                                    delta.Div1TailNum;
                                    rowtFileOutputDelimited_1[86]=delta.Div2Airport == null ? null : 
                                    delta.Div2Airport;
                                    rowtFileOutputDelimited_1[87]=delta.Div2AirportID == null ? null : 
                                    delta.Div2AirportID;
                                    rowtFileOutputDelimited_1[88]=delta.Div2AirportSeqID == null ? null : 
                                    delta.Div2AirportSeqID;
                                    rowtFileOutputDelimited_1[89]=delta.Div2WheelsOn == null ? null : 
                                    delta.Div2WheelsOn;
                                }
                                public void putValue_1(final deltaStruct delta,String[] rowtFileOutputDelimited_1){
                                    rowtFileOutputDelimited_1[90]=delta.Div2TotalGTime == null ? null : 
                                    delta.Div2TotalGTime;
                                    rowtFileOutputDelimited_1[91]=delta.Div2LongestGTime == null ? null : 
                                    delta.Div2LongestGTime;
                                    rowtFileOutputDelimited_1[92]=delta.Div2WheelsOff == null ? null : 
                                    delta.Div2WheelsOff;
                                    rowtFileOutputDelimited_1[93]=delta.Div2TailNum == null ? null : 
                                    delta.Div2TailNum;
                                    rowtFileOutputDelimited_1[94]=delta.Div3Airport == null ? null : 
                                    delta.Div3Airport;
                                    rowtFileOutputDelimited_1[95]=delta.Div3AirportID == null ? null : 
                                    delta.Div3AirportID;
                                    rowtFileOutputDelimited_1[96]=delta.Div3AirportSeqID == null ? null : 
                                    delta.Div3AirportSeqID;
                                    rowtFileOutputDelimited_1[97]=delta.Div3WheelsOn == null ? null : 
                                    delta.Div3WheelsOn;
                                    rowtFileOutputDelimited_1[98]=delta.Div3TotalGTime == null ? null : 
                                    delta.Div3TotalGTime;
                                    rowtFileOutputDelimited_1[99]=delta.Div3LongestGTime == null ? null : 
                                    delta.Div3LongestGTime;
                                    rowtFileOutputDelimited_1[100]=delta.Div3WheelsOff == null ? null : 
                                    delta.Div3WheelsOff;
                                    rowtFileOutputDelimited_1[101]=delta.Div3TailNum == null ? null : 
                                    delta.Div3TailNum;
                                    rowtFileOutputDelimited_1[102]=delta.Div4Airport == null ? null : 
                                    delta.Div4Airport;
                                    rowtFileOutputDelimited_1[103]=delta.Div4AirportID == null ? null : 
                                    delta.Div4AirportID;
                                    rowtFileOutputDelimited_1[104]=delta.Div4AirportSeqID == null ? null : 
                                    delta.Div4AirportSeqID;
                                    rowtFileOutputDelimited_1[105]=delta.Div4WheelsOn == null ? null : 
                                    delta.Div4WheelsOn;
                                    rowtFileOutputDelimited_1[106]=delta.Div4TotalGTime == null ? null : 
                                    delta.Div4TotalGTime;
                                    rowtFileOutputDelimited_1[107]=delta.Div4LongestGTime == null ? null : 
                                    delta.Div4LongestGTime;
                                    rowtFileOutputDelimited_1[108]=delta.Div4WheelsOff == null ? null : 
                                    delta.Div4WheelsOff;
                                    rowtFileOutputDelimited_1[109]=delta.Div4TailNum == null ? null : 
                                    delta.Div4TailNum;
                                    rowtFileOutputDelimited_1[110]=delta.Div5Airport == null ? null : 
                                    delta.Div5Airport;
                                    rowtFileOutputDelimited_1[111]=delta.Div5AirportID == null ? null : 
                                    delta.Div5AirportID;
                                    rowtFileOutputDelimited_1[112]=delta.Div5AirportSeqID == null ? null : 
                                    delta.Div5AirportSeqID;
                                    rowtFileOutputDelimited_1[113]=delta.Div5WheelsOn == null ? null : 
                                    delta.Div5WheelsOn;
                                    rowtFileOutputDelimited_1[114]=delta.Div5TotalGTime == null ? null : 
                                    delta.Div5TotalGTime;
                                    rowtFileOutputDelimited_1[115]=delta.Div5LongestGTime == null ? null : 
                                    delta.Div5LongestGTime;
                                    rowtFileOutputDelimited_1[116]=delta.Div5WheelsOff == null ? null : 
                                    delta.Div5WheelsOff;
                                    rowtFileOutputDelimited_1[117]=delta.Div5TailNum == null ? null : 
                                    delta.Div5TailNum;
                                    rowtFileOutputDelimited_1[118]=delta.Duplicate == null ? null : 
                                    String.valueOf(delta.Duplicate);
                            }
                }
                FileOutputDelimitedUtil_tFileOutputDelimited_1 fileOutputDelimitedUtil_tFileOutputDelimited_1=new FileOutputDelimitedUtil_tFileOutputDelimited_1();
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/out.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[119];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                        fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_0(headColutFileOutputDelimited_1);
                                        fileOutputDelimitedUtil_tFileOutputDelimited_1.putHeaderValue_1(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
deltaStruct delta_tmp = new deltaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Year = null;
					
							row1.Quarter = null;
					
							row1.Month = null;
					
							row1.DayofMonth = null;
					
							row1.DayOfWeek = null;
					
							row1.FlightDate = null;
					
							row1.Marketing_Airline_Network = null;
					
							row1.Operated_or_Branded_Code_Share_Partners = null;
					
							row1.DOT_ID_Marketing_Airline = null;
					
							row1.IATA_Code_Marketing_Airline = null;
					
							row1.Flight_Number_Marketing_Airline = null;
					
							row1.Originally_Scheduled_Code_Share_Airline = null;
					
							row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
					
							row1.Operating_Airline = null;
					
							row1.DOT_ID_Operating_Airline = null;
					
							row1.IATA_Code_Operating_Airline = null;
					
							row1.Tail_Number = null;
					
							row1.Flight_Number_Operating_Airline = null;
					
							row1.OriginAirportID = null;
					
							row1.OriginAirportSeqID = null;
					
							row1.OriginCityMarketID = null;
					
							row1.Origin = null;
					
							row1.OriginCityName = null;
					
							row1.OriginState = null;
					
							row1.OriginStateFips = null;
					
							row1.OriginStateName = null;
					
							row1.OriginWac = null;
					
							row1.DestAirportID = null;
					
							row1.DestAirportSeqID = null;
					
							row1.DestCityMarketID = null;
					
							row1.Dest = null;
					
							row1.DestCityName = null;
					
							row1.DestState = null;
					
							row1.DestStateFips = null;
					
							row1.DestStateName = null;
					
							row1.DestWac = null;
					
							row1.CRSDepTime = null;
					
							row1.DepTime = null;
					
							row1.DepDelay = null;
					
							row1.DepDelayMinutes = null;
					
							row1.DepDel15 = null;
					
							row1.DepartureDelayGroups = null;
					
							row1.DepTimeBlk = null;
					
							row1.TaxiOut = null;
					
							row1.WheelsOff = null;
					
							row1.WheelsOn = null;
					
							row1.TaxiIn = null;
					
							row1.CRSArrTime = null;
					
							row1.ArrTime = null;
					
							row1.ArrDelay = null;
					
							row1.ArrDelayMinutes = null;
					
							row1.ArrDel15 = null;
					
							row1.ArrivalDelayGroups = null;
					
							row1.ArrTimeBlk = null;
					
							row1.Cancelled = null;
					
							row1.CancellationCode = null;
					
							row1.Diverted = null;
					
							row1.CRSElapsedTime = null;
					
							row1.ActualElapsedTime = null;
					
							row1.AirTime = null;
					
							row1.Flights = null;
					
							row1.Distance = null;
					
							row1.DistanceGroup = null;
					
							row1.CarrierDelay = null;
					
							row1.WeatherDelay = null;
					
							row1.NASDelay = null;
					
							row1.SecurityDelay = null;
					
							row1.LateAircraftDelay = null;
					
							row1.FirstDepTime = null;
					
							row1.TotalAddGTime = null;
					
							row1.LongestAddGTime = null;
					
							row1.DivAirportLandings = null;
					
							row1.DivReachedDest = null;
					
							row1.DivActualElapsedTime = null;
					
							row1.DivArrDelay = null;
					
							row1.DivDistance = null;
					
							row1.Div1Airport = null;
					
							row1.Div1AirportID = null;
					
							row1.Div1AirportSeqID = null;
					
							row1.Div1WheelsOn = null;
					
							row1.Div1TotalGTime = null;
					
							row1.Div1LongestGTime = null;
					
							row1.Div1WheelsOff = null;
					
							row1.Div1TailNum = null;
					
							row1.Div2Airport = null;
					
							row1.Div2AirportID = null;
					
							row1.Div2AirportSeqID = null;
					
							row1.Div2WheelsOn = null;
					
							row1.Div2TotalGTime = null;
					
							row1.Div2LongestGTime = null;
					
							row1.Div2WheelsOff = null;
					
							row1.Div2TailNum = null;
					
							row1.Div3Airport = null;
					
							row1.Div3AirportID = null;
					
							row1.Div3AirportSeqID = null;
					
							row1.Div3WheelsOn = null;
					
							row1.Div3TotalGTime = null;
					
							row1.Div3LongestGTime = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Year", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Quarter", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Month", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayofMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayofMonth", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayofMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayofMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayOfWeek", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FlightDate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FlightDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Marketing_Airline_Network = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Marketing_Airline_Network = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operated_or_Branded_Code_Share_Partners = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operated_or_Branded_Code_Share_Partners = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Marketing_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Marketing_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DOT_ID_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DOT_ID_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IATA_Code_Operating_Airline = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IATA_Code_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tail_Number = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tail_Number = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flight_Number_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Operating_Airline", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flight_Number_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flight_Number_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Origin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Origin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OriginStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OriginStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.OriginWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.OriginWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.OriginWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportSeqID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestCityMarketID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Dest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Dest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestCityName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestState = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateFips = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DestStateName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DestStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DestWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestWac", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DestWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DestWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepartureDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepartureDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DepTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DepTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiOut = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiOut = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TaxiIn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TaxiIn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CRSArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CRSArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDelayMinutes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrDel15 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrivalDelayGroups = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrivalDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ArrTimeBlk = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ArrTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Cancelled = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Cancelled", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Cancelled = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Cancelled = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CancellationCode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CancellationCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Diverted = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Diverted", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Diverted = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Diverted = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CRSElapsedTime = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CRSElapsedTime", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CRSElapsedTime = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CRSElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AirTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AirTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Flights = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flights", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Flights = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Flights = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Distance = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Distance", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Distance = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Distance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DistanceGroup = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DistanceGroup", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DistanceGroup = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DistanceGroup = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CarrierDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CarrierDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.WeatherDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.WeatherDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NASDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NASDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SecurityDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SecurityDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LateAircraftDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LateAircraftDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FirstDepTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FirstDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TotalAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TotalAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.LongestAddGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.LongestAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.DivAirportLandings = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DivAirportLandings", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DivAirportLandings = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DivAirportLandings = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivReachedDest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivReachedDest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivActualElapsedTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivArrDelay = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DivDistance = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DivDistance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div1TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div1TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div2TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div2TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3LongestGTime = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Div3WheelsOff = null;
					
							row1.Div3TailNum = null;
					
							row1.Div4Airport = null;
					
							row1.Div4AirportID = null;
					
							row1.Div4AirportSeqID = null;
					
							row1.Div4WheelsOn = null;
					
							row1.Div4TotalGTime = null;
					
							row1.Div4LongestGTime = null;
					
							row1.Div4WheelsOff = null;
					
							row1.Div4TailNum = null;
					
							row1.Div5Airport = null;
					
							row1.Div5AirportID = null;
					
							row1.Div5AirportSeqID = null;
					
							row1.Div5WheelsOn = null;
					
							row1.Div5TotalGTime = null;
					
							row1.Div5LongestGTime = null;
					
							row1.Div5WheelsOff = null;
					
							row1.Div5TailNum = null;
					
							row1.Duplicate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div3TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div3TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div4TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div4TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5Airport = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5AirportSeqID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOn = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TotalGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5LongestGTime = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5WheelsOff = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Div5TailNum = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Div5TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Duplicate = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Duplicate", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Duplicate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Duplicate = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_1,row1Struct row1 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_1,row1 );
					
						valueToConn_1(rowtFileInputDelimited_1,row1 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"C:/Users/felip/Downloads/archive/raw/Flights_2022_"+(Integer.parseInt(context.month)+1)+".csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
		        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
			rowHelper_tFileInputDelimited_1.valueToConn(rowtFileInputDelimited_1, row1 );
		
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
            							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.Month = row1.Month ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.Month = '" + row2HashKey.Month + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

delta = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'delta'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
delta_tmp.Year = row1.Year ;
delta_tmp.Quarter = row1.Quarter ;
delta_tmp.Month = row1.Month ;
delta_tmp.DayofMonth = row1.DayofMonth ;
delta_tmp.DayOfWeek = row1.DayOfWeek ;
delta_tmp.FlightDate = row1.FlightDate ;
delta_tmp.Marketing_Airline_Network = row1.Marketing_Airline_Network ;
delta_tmp.Operated_or_Branded_Code_Share_Partners = row1.Operated_or_Branded_Code_Share_Partners ;
delta_tmp.DOT_ID_Marketing_Airline = row1.DOT_ID_Marketing_Airline ;
delta_tmp.IATA_Code_Marketing_Airline = row1.IATA_Code_Marketing_Airline ;
delta_tmp.Flight_Number_Marketing_Airline = row1.Flight_Number_Marketing_Airline ;
delta_tmp.Originally_Scheduled_Code_Share_Airline = row1.Originally_Scheduled_Code_Share_Airline ;
delta_tmp.DOT_ID_Originally_Scheduled_Code_Share_Airline = row1.DOT_ID_Originally_Scheduled_Code_Share_Airline ;
delta_tmp.IATA_Code_Originally_Scheduled_Code_Share_Airline = row1.IATA_Code_Originally_Scheduled_Code_Share_Airline ;
delta_tmp.Flight_Num_Originally_Scheduled_Code_Share_Airline = row1.Flight_Num_Originally_Scheduled_Code_Share_Airline ;
delta_tmp.Operating_Airline = row1.Operating_Airline ;
delta_tmp.DOT_ID_Operating_Airline = row1.DOT_ID_Operating_Airline ;
delta_tmp.IATA_Code_Operating_Airline = row1.IATA_Code_Operating_Airline ;
delta_tmp.Tail_Number = row1.Tail_Number ;
delta_tmp.Flight_Number_Operating_Airline = row1.Flight_Number_Operating_Airline ;
delta_tmp.OriginAirportID = row1.OriginAirportID ;
delta_tmp.OriginAirportSeqID = row1.OriginAirportSeqID ;
delta_tmp.OriginCityMarketID = row1.OriginCityMarketID ;
delta_tmp.Origin = row1.Origin ;
delta_tmp.OriginCityName = row1.OriginCityName ;
delta_tmp.OriginState = row1.OriginState ;
delta_tmp.OriginStateFips = row1.OriginStateFips ;
delta_tmp.OriginStateName = row1.OriginStateName ;
delta_tmp.OriginWac = row1.OriginWac ;
delta_tmp.DestAirportID = row1.DestAirportID ;
delta_tmp.DestAirportSeqID = row1.DestAirportSeqID ;
delta_tmp.DestCityMarketID = row1.DestCityMarketID ;
delta_tmp.Dest = row1.Dest ;
delta_tmp.DestCityName = row1.DestCityName ;
delta_tmp.DestState = row1.DestState ;
delta_tmp.DestStateFips = row1.DestStateFips ;
delta_tmp.DestStateName = row1.DestStateName ;
delta_tmp.DestWac = row1.DestWac ;
delta_tmp.CRSDepTime = row1.CRSDepTime ;
delta_tmp.DepTime = row1.DepTime ;
delta_tmp.DepDelay = row1.DepDelay ;
delta_tmp.DepDelayMinutes = row1.DepDelayMinutes ;
delta_tmp.DepDel15 = row1.DepDel15 ;
delta_tmp.DepartureDelayGroups = row1.DepartureDelayGroups ;
delta_tmp.DepTimeBlk = row1.DepTimeBlk ;
delta_tmp.TaxiOut = row1.TaxiOut ;
delta_tmp.WheelsOff = row1.WheelsOff ;
delta_tmp.WheelsOn = row1.WheelsOn ;
delta_tmp.TaxiIn = row1.TaxiIn ;
delta_tmp.CRSArrTime = row1.CRSArrTime ;
delta_tmp.ArrTime = row1.ArrTime ;
delta_tmp.ArrDelay = row1.ArrDelay ;
delta_tmp.ArrDelayMinutes = row1.ArrDelayMinutes ;
delta_tmp.ArrDel15 = row1.ArrDel15 ;
delta_tmp.ArrivalDelayGroups = row1.ArrivalDelayGroups ;
delta_tmp.ArrTimeBlk = row1.ArrTimeBlk ;
delta_tmp.Cancelled = row1.Cancelled ;
delta_tmp.CancellationCode = row1.CancellationCode ;
delta_tmp.Diverted = row1.Diverted ;
delta_tmp.CRSElapsedTime = row1.CRSElapsedTime ;
delta_tmp.ActualElapsedTime = row1.ActualElapsedTime ;
delta_tmp.AirTime = row1.AirTime ;
delta_tmp.Flights = row1.Flights ;
delta_tmp.Distance = row1.Distance ;
delta_tmp.DistanceGroup = row1.DistanceGroup ;
delta_tmp.CarrierDelay = row1.CarrierDelay ;
delta_tmp.WeatherDelay = row1.WeatherDelay ;
delta_tmp.NASDelay = row1.NASDelay ;
delta_tmp.SecurityDelay = row1.SecurityDelay ;
delta_tmp.LateAircraftDelay = row1.LateAircraftDelay ;
delta_tmp.FirstDepTime = row1.FirstDepTime ;
delta_tmp.TotalAddGTime = row1.TotalAddGTime ;
delta_tmp.LongestAddGTime = row1.LongestAddGTime ;
delta_tmp.DivAirportLandings = row1.DivAirportLandings ;
delta_tmp.DivReachedDest = row1.DivReachedDest ;
delta_tmp.DivActualElapsedTime = row1.DivActualElapsedTime ;
delta_tmp.DivArrDelay = row1.DivArrDelay ;
delta_tmp.DivDistance = row1.DivDistance ;
delta_tmp.Div1Airport = row1.Div1Airport ;
delta_tmp.Div1AirportID = row1.Div1AirportID ;
delta_tmp.Div1AirportSeqID = row1.Div1AirportSeqID ;
delta_tmp.Div1WheelsOn = row1.Div1WheelsOn ;
delta_tmp.Div1TotalGTime = row1.Div1TotalGTime ;
delta_tmp.Div1LongestGTime = row1.Div1LongestGTime ;
delta_tmp.Div1WheelsOff = row1.Div1WheelsOff ;
delta_tmp.Div1TailNum = row1.Div1TailNum ;
delta_tmp.Div2Airport = row1.Div2Airport ;
delta_tmp.Div2AirportID = row1.Div2AirportID ;
delta_tmp.Div2AirportSeqID = row1.Div2AirportSeqID ;
delta_tmp.Div2WheelsOn = row1.Div2WheelsOn ;
delta_tmp.Div2TotalGTime = row1.Div2TotalGTime ;
delta_tmp.Div2LongestGTime = row1.Div2LongestGTime ;
delta_tmp.Div2WheelsOff = row1.Div2WheelsOff ;
delta_tmp.Div2TailNum = row1.Div2TailNum ;
delta_tmp.Div3Airport = row1.Div3Airport ;
delta_tmp.Div3AirportID = row1.Div3AirportID ;
delta_tmp.Div3AirportSeqID = row1.Div3AirportSeqID ;
delta_tmp.Div3WheelsOn = row1.Div3WheelsOn ;
delta_tmp.Div3TotalGTime = row1.Div3TotalGTime ;
delta_tmp.Div3LongestGTime = row1.Div3LongestGTime ;
delta_tmp.Div3WheelsOff = row1.Div3WheelsOff ;
delta_tmp.Div3TailNum = row1.Div3TailNum ;
delta_tmp.Div4Airport = row1.Div4Airport ;
delta_tmp.Div4AirportID = row1.Div4AirportID ;
delta_tmp.Div4AirportSeqID = row1.Div4AirportSeqID ;
delta_tmp.Div4WheelsOn = row1.Div4WheelsOn ;
delta_tmp.Div4TotalGTime = row1.Div4TotalGTime ;
delta_tmp.Div4LongestGTime = row1.Div4LongestGTime ;
delta_tmp.Div4WheelsOff = row1.Div4WheelsOff ;
delta_tmp.Div4TailNum = row1.Div4TailNum ;
delta_tmp.Div5Airport = row1.Div5Airport ;
delta_tmp.Div5AirportID = row1.Div5AirportID ;
delta_tmp.Div5AirportSeqID = row1.Div5AirportSeqID ;
delta_tmp.Div5WheelsOn = row1.Div5WheelsOn ;
delta_tmp.Div5TotalGTime = row1.Div5TotalGTime ;
delta_tmp.Div5LongestGTime = row1.Div5LongestGTime ;
delta_tmp.Div5WheelsOff = row1.Div5WheelsOff ;
delta_tmp.Div5TailNum = row1.Div5TailNum ;
delta_tmp.Duplicate = row1.Duplicate ;
delta = delta_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "delta"
if(delta != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"delta"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_1=new String[119];
                                fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_0(delta,rowtFileOutputDelimited_1);
                                fileOutputDelimitedUtil_tFileOutputDelimited_1.putValue_1(delta,rowtFileOutputDelimited_1);
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 
     row3 = delta;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row3"
									
							);
						}
						
//////////
 

// for output
			row5 = new row5Struct();
								
			row5.Year = row3.Year;								
			row5.Quarter = row3.Quarter;								
			row5.Month = row3.Month;								
			row5.DayofMonth = row3.DayofMonth;								
			row5.DayOfWeek = row3.DayOfWeek;								
			row5.FlightDate = row3.FlightDate;								
			row5.Marketing_Airline_Network = row3.Marketing_Airline_Network;								
			row5.Operated_or_Branded_Code_Share_Partners = row3.Operated_or_Branded_Code_Share_Partners;								
			row5.DOT_ID_Marketing_Airline = row3.DOT_ID_Marketing_Airline;								
			row5.IATA_Code_Marketing_Airline = row3.IATA_Code_Marketing_Airline;								
			row5.Flight_Number_Marketing_Airline = row3.Flight_Number_Marketing_Airline;								
			row5.Originally_Scheduled_Code_Share_Airline = row3.Originally_Scheduled_Code_Share_Airline;								
			row5.DOT_ID_Originally_Scheduled_Code_Share_Airline = row3.DOT_ID_Originally_Scheduled_Code_Share_Airline;								
			row5.IATA_Code_Originally_Scheduled_Code_Share_Airline = row3.IATA_Code_Originally_Scheduled_Code_Share_Airline;								
			row5.Flight_Num_Originally_Scheduled_Code_Share_Airline = row3.Flight_Num_Originally_Scheduled_Code_Share_Airline;								
			row5.Operating_Airline = row3.Operating_Airline;								
			row5.DOT_ID_Operating_Airline = row3.DOT_ID_Operating_Airline;								
			row5.IATA_Code_Operating_Airline = row3.IATA_Code_Operating_Airline;								
			row5.Tail_Number = row3.Tail_Number;								
			row5.Flight_Number_Operating_Airline = row3.Flight_Number_Operating_Airline;								
			row5.OriginAirportID = row3.OriginAirportID;								
			row5.OriginAirportSeqID = row3.OriginAirportSeqID;								
			row5.OriginCityMarketID = row3.OriginCityMarketID;								
			row5.Origin = row3.Origin;								
			row5.OriginCityName = row3.OriginCityName;								
			row5.OriginState = row3.OriginState;								
			row5.OriginStateFips = row3.OriginStateFips;								
			row5.OriginStateName = row3.OriginStateName;								
			row5.OriginWac = row3.OriginWac;								
			row5.DestAirportID = row3.DestAirportID;								
			row5.DestAirportSeqID = row3.DestAirportSeqID;								
			row5.DestCityMarketID = row3.DestCityMarketID;								
			row5.Dest = row3.Dest;								
			row5.DestCityName = row3.DestCityName;								
			row5.DestState = row3.DestState;								
			row5.DestStateFips = row3.DestStateFips;								
			row5.DestStateName = row3.DestStateName;								
			row5.DestWac = row3.DestWac;								
			row5.CRSDepTime = row3.CRSDepTime;								
			row5.DepTime = row3.DepTime;								
			row5.DepDelay = row3.DepDelay;								
			row5.DepDelayMinutes = row3.DepDelayMinutes;								
			row5.DepDel15 = row3.DepDel15;								
			row5.DepartureDelayGroups = row3.DepartureDelayGroups;								
			row5.DepTimeBlk = row3.DepTimeBlk;								
			row5.TaxiOut = row3.TaxiOut;								
			row5.WheelsOff = row3.WheelsOff;								
			row5.WheelsOn = row3.WheelsOn;								
			row5.TaxiIn = row3.TaxiIn;								
			row5.CRSArrTime = row3.CRSArrTime;								
			row5.ArrTime = row3.ArrTime;								
			row5.ArrDelay = row3.ArrDelay;								
			row5.ArrDelayMinutes = row3.ArrDelayMinutes;								
			row5.ArrDel15 = row3.ArrDel15;								
			row5.ArrivalDelayGroups = row3.ArrivalDelayGroups;								
			row5.ArrTimeBlk = row3.ArrTimeBlk;								
			row5.Cancelled = row3.Cancelled;								
			row5.CancellationCode = row3.CancellationCode;								
			row5.Diverted = row3.Diverted;								
			row5.CRSElapsedTime = row3.CRSElapsedTime;								
			row5.ActualElapsedTime = row3.ActualElapsedTime;								
			row5.AirTime = row3.AirTime;								
			row5.Flights = row3.Flights;								
			row5.Distance = row3.Distance;								
			row5.DistanceGroup = row3.DistanceGroup;								
			row5.CarrierDelay = row3.CarrierDelay;								
			row5.WeatherDelay = row3.WeatherDelay;								
			row5.NASDelay = row3.NASDelay;								
			row5.SecurityDelay = row3.SecurityDelay;								
			row5.LateAircraftDelay = row3.LateAircraftDelay;								
			row5.FirstDepTime = row3.FirstDepTime;								
			row5.TotalAddGTime = row3.TotalAddGTime;								
			row5.LongestAddGTime = row3.LongestAddGTime;								
			row5.DivAirportLandings = row3.DivAirportLandings;								
			row5.DivReachedDest = row3.DivReachedDest;								
			row5.DivActualElapsedTime = row3.DivActualElapsedTime;								
			row5.DivArrDelay = row3.DivArrDelay;								
			row5.DivDistance = row3.DivDistance;								
			row5.Div1Airport = row3.Div1Airport;								
			row5.Div1AirportID = row3.Div1AirportID;								
			row5.Div1AirportSeqID = row3.Div1AirportSeqID;								
			row5.Div1WheelsOn = row3.Div1WheelsOn;								
			row5.Div1TotalGTime = row3.Div1TotalGTime;								
			row5.Div1LongestGTime = row3.Div1LongestGTime;								
			row5.Div1WheelsOff = row3.Div1WheelsOff;								
			row5.Div1TailNum = row3.Div1TailNum;								
			row5.Div2Airport = row3.Div2Airport;								
			row5.Div2AirportID = row3.Div2AirportID;								
			row5.Div2AirportSeqID = row3.Div2AirportSeqID;								
			row5.Div2WheelsOn = row3.Div2WheelsOn;								
			row5.Div2TotalGTime = row3.Div2TotalGTime;								
			row5.Div2LongestGTime = row3.Div2LongestGTime;								
			row5.Div2WheelsOff = row3.Div2WheelsOff;								
			row5.Div2TailNum = row3.Div2TailNum;								
			row5.Div3Airport = row3.Div3Airport;								
			row5.Div3AirportID = row3.Div3AirportID;								
			row5.Div3AirportSeqID = row3.Div3AirportSeqID;								
			row5.Div3WheelsOn = row3.Div3WheelsOn;								
			row5.Div3TotalGTime = row3.Div3TotalGTime;								
			row5.Div3LongestGTime = row3.Div3LongestGTime;								
			row5.Div3WheelsOff = row3.Div3WheelsOff;								
			row5.Div3TailNum = row3.Div3TailNum;								
			row5.Div4Airport = row3.Div4Airport;								
			row5.Div4AirportID = row3.Div4AirportID;								
			row5.Div4AirportSeqID = row3.Div4AirportSeqID;								
			row5.Div4WheelsOn = row3.Div4WheelsOn;								
			row5.Div4TotalGTime = row3.Div4TotalGTime;								
			row5.Div4LongestGTime = row3.Div4LongestGTime;								
			row5.Div4WheelsOff = row3.Div4WheelsOff;								
			row5.Div4TailNum = row3.Div4TailNum;								
			row5.Div5Airport = row3.Div5Airport;								
			row5.Div5AirportID = row3.Div5AirportID;								
			row5.Div5AirportSeqID = row3.Div5AirportSeqID;								
			row5.Div5WheelsOn = row3.Div5WheelsOn;								
			row5.Div5TotalGTime = row3.Div5TotalGTime;								
			row5.Div5LongestGTime = row3.Div5LongestGTime;								
			row5.Div5WheelsOff = row3.Div5WheelsOff;								
			row5.Div5TailNum = row3.Div5TailNum;								
			row5.Duplicate = row3.Duplicate;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_2=new String[119];
                                fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_0(row5,rowtFileOutputDelimited_2);
                                fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_1(row5,rowtFileOutputDelimited_2);
                nb_line_tFileOutputDelimited_2++;
                resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
                                       CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "delta"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"delta");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_3{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_3,row4Struct row4 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row4.Year = null;
					
							row4.Quarter = null;
					
							row4.Month = null;
					
							row4.DayofMonth = null;
					
							row4.DayOfWeek = null;
					
							row4.FlightDate = null;
					
							row4.Marketing_Airline_Network = null;
					
							row4.Operated_or_Branded_Code_Share_Partners = null;
					
							row4.DOT_ID_Marketing_Airline = null;
					
							row4.IATA_Code_Marketing_Airline = null;
					
							row4.Flight_Number_Marketing_Airline = null;
					
							row4.Originally_Scheduled_Code_Share_Airline = null;
					
							row4.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
					
							row4.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
					
							row4.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
					
							row4.Operating_Airline = null;
					
							row4.DOT_ID_Operating_Airline = null;
					
							row4.IATA_Code_Operating_Airline = null;
					
							row4.Tail_Number = null;
					
							row4.Flight_Number_Operating_Airline = null;
					
							row4.OriginAirportID = null;
					
							row4.OriginAirportSeqID = null;
					
							row4.OriginCityMarketID = null;
					
							row4.Origin = null;
					
							row4.OriginCityName = null;
					
							row4.OriginState = null;
					
							row4.OriginStateFips = null;
					
							row4.OriginStateName = null;
					
							row4.OriginWac = null;
					
							row4.DestAirportID = null;
					
							row4.DestAirportSeqID = null;
					
							row4.DestCityMarketID = null;
					
							row4.Dest = null;
					
							row4.DestCityName = null;
					
							row4.DestState = null;
					
							row4.DestStateFips = null;
					
							row4.DestStateName = null;
					
							row4.DestWac = null;
					
							row4.CRSDepTime = null;
					
							row4.DepTime = null;
					
							row4.DepDelay = null;
					
							row4.DepDelayMinutes = null;
					
							row4.DepDel15 = null;
					
							row4.DepartureDelayGroups = null;
					
							row4.DepTimeBlk = null;
					
							row4.TaxiOut = null;
					
							row4.WheelsOff = null;
					
							row4.WheelsOn = null;
					
							row4.TaxiIn = null;
					
							row4.CRSArrTime = null;
					
							row4.ArrTime = null;
					
							row4.ArrDelay = null;
					
							row4.ArrDelayMinutes = null;
					
							row4.ArrDel15 = null;
					
							row4.ArrivalDelayGroups = null;
					
							row4.ArrTimeBlk = null;
					
							row4.Cancelled = null;
					
							row4.CancellationCode = null;
					
							row4.Diverted = null;
					
							row4.CRSElapsedTime = null;
					
							row4.ActualElapsedTime = null;
					
							row4.AirTime = null;
					
							row4.Flights = null;
					
							row4.Distance = null;
					
							row4.DistanceGroup = null;
					
							row4.CarrierDelay = null;
					
							row4.WeatherDelay = null;
					
							row4.NASDelay = null;
					
							row4.SecurityDelay = null;
					
							row4.LateAircraftDelay = null;
					
							row4.FirstDepTime = null;
					
							row4.TotalAddGTime = null;
					
							row4.LongestAddGTime = null;
					
							row4.DivAirportLandings = null;
					
							row4.DivReachedDest = null;
					
							row4.DivActualElapsedTime = null;
					
							row4.DivArrDelay = null;
					
							row4.DivDistance = null;
					
							row4.Div1Airport = null;
					
							row4.Div1AirportID = null;
					
							row4.Div1AirportSeqID = null;
					
							row4.Div1WheelsOn = null;
					
							row4.Div1TotalGTime = null;
					
							row4.Div1LongestGTime = null;
					
							row4.Div1WheelsOff = null;
					
							row4.Div1TailNum = null;
					
							row4.Div2Airport = null;
					
							row4.Div2AirportID = null;
					
							row4.Div2AirportSeqID = null;
					
							row4.Div2WheelsOn = null;
					
							row4.Div2TotalGTime = null;
					
							row4.Div2LongestGTime = null;
					
							row4.Div2WheelsOff = null;
					
							row4.Div2TailNum = null;
					
							row4.Div3Airport = null;
					
							row4.Div3AirportID = null;
					
							row4.Div3AirportSeqID = null;
					
							row4.Div3WheelsOn = null;
					
							row4.Div3TotalGTime = null;
					
							row4.Div3LongestGTime = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Year", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Quarter", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Month", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DayofMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayofMonth", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DayofMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DayofMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayOfWeek", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.FlightDate = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.FlightDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Marketing_Airline_Network = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Marketing_Airline_Network = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Operated_or_Branded_Code_Share_Partners = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Operated_or_Branded_Code_Share_Partners = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Marketing_Airline", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DOT_ID_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DOT_ID_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.IATA_Code_Marketing_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.IATA_Code_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Flight_Number_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Marketing_Airline", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Flight_Number_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Flight_Number_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DOT_ID_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.IATA_Code_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Flight_Num_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Operating_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Operating_Airline", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DOT_ID_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DOT_ID_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.IATA_Code_Operating_Airline = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.IATA_Code_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Tail_Number = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Tail_Number = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Flight_Number_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Operating_Airline", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Flight_Number_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Flight_Number_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.OriginAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.OriginAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.OriginAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.OriginAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportSeqID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.OriginAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.OriginAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.OriginCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginCityMarketID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.OriginCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.OriginCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Origin = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Origin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.OriginCityName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.OriginCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.OriginState = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.OriginState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.OriginStateFips = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.OriginStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.OriginStateName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.OriginStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.OriginWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginWac", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.OriginWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.OriginWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DestAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DestAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DestAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DestAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportSeqID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DestAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DestAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DestCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestCityMarketID", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DestCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DestCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Dest = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Dest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DestCityName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DestCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DestState = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DestState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DestStateFips = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DestStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DestStateName = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DestStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DestWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestWac", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DestWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DestWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.CRSDepTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.CRSDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepDelayMinutes = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepDel15 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepartureDelayGroups = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepartureDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DepTimeBlk = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DepTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.TaxiOut = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.TaxiOut = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.TaxiIn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.TaxiIn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.CRSArrTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.CRSArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrDelayMinutes = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrDel15 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrivalDelayGroups = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrivalDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ArrTimeBlk = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ArrTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Cancelled = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Cancelled", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Cancelled = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Cancelled = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.CancellationCode = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.CancellationCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Diverted = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Diverted", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Diverted = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Diverted = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.CRSElapsedTime = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CRSElapsedTime", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.CRSElapsedTime = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.CRSElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.ActualElapsedTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.ActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.AirTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.AirTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Flights = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flights", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Flights = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Flights = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Distance = ParserUtils.parseTo_Float(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Distance", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Distance = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Distance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DistanceGroup = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DistanceGroup", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DistanceGroup = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DistanceGroup = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.CarrierDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.CarrierDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.WeatherDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.WeatherDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.NASDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.NASDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.SecurityDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.SecurityDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.LateAircraftDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.LateAircraftDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.FirstDepTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.FirstDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.TotalAddGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.TotalAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.LongestAddGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.LongestAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.DivAirportLandings = ParserUtils.parseTo_Integer(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DivAirportLandings", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.DivAirportLandings = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.DivAirportLandings = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DivReachedDest = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DivReachedDest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DivActualElapsedTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DivActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DivArrDelay = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DivArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.DivDistance = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.DivDistance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1Airport = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1AirportID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1AirportSeqID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1TotalGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1LongestGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div1TailNum = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div1TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2Airport = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2AirportID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2AirportSeqID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2TotalGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2LongestGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div2TailNum = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div2TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3Airport = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3AirportID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3AirportSeqID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3TotalGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3LongestGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3LongestGTime = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_3,row4Struct row4 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
					
							row4.Div3WheelsOff = null;
					
							row4.Div3TailNum = null;
					
							row4.Div4Airport = null;
					
							row4.Div4AirportID = null;
					
							row4.Div4AirportSeqID = null;
					
							row4.Div4WheelsOn = null;
					
							row4.Div4TotalGTime = null;
					
							row4.Div4LongestGTime = null;
					
							row4.Div4WheelsOff = null;
					
							row4.Div4TailNum = null;
					
							row4.Div5Airport = null;
					
							row4.Div5AirportID = null;
					
							row4.Div5AirportSeqID = null;
					
							row4.Div5WheelsOn = null;
					
							row4.Div5TotalGTime = null;
					
							row4.Div5LongestGTime = null;
					
							row4.Div5WheelsOff = null;
					
							row4.Div5TailNum = null;
					
							row4.Duplicate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_3 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_3 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div3TailNum = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div3TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4Airport = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4AirportID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4AirportSeqID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4TotalGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4LongestGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div4TailNum = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div4TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5Airport = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5AirportID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5AirportSeqID = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5WheelsOn = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5TotalGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5LongestGTime = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5WheelsOff = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
									row4.Div5TailNum = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];
									
							
						
						}else{
						
							
								row4.Div5TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_3 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length){
						
						
							
								
									if(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {
									
										row4.Duplicate = ParserUtils.parseTo_Character(rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Duplicate", "row4", rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3], ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
										}
    								}else{
    									
											
												row4.Duplicate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row4.Duplicate = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_3,row4Struct row4 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_3,row4 );
					
						valueToConn_1(rowtFileInputDelimited_3,row4 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_3 rowHelper_tFileInputDelimited_3  = new RowHelper_tFileInputDelimited_3();
			
				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;	
				
				char fieldSeparator_tFileInputDelimited_3[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_3 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_3[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_3 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flights_stage"/** End field tFileInputDelimited_3:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;
	
				try{
					
						String[] rowtFileInputDelimited_3=null;
						int currentLinetFileInputDelimited_3 = 0;
	        			int outputLinetFileInputDelimited_3 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0;
			if(footer_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_3),fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_3.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )
	        			csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
	        				csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_3 > 0){
						for(totalLinetFileInputDelimited_3=0;totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++){
							csvReadertFileInputDelimited_3.readNext();
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_3.readNext()) {
							
								rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
								if(!(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_3++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3   < 0? 0 : totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3 ;
	            		if(lastLinetFileInputDelimited_3 > 0){
	                		lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3 : lastLineTemptFileInputDelimited_3; 
	            		}else {
	                		lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
	            		}
	         
			          	csvReadertFileInputDelimited_3.close();
				        if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_3, fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_3=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_3),fieldSeparator_tFileInputDelimited_3[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_3[0] != '\n') && (rowSeparator_tFileInputDelimited_3[0] != '\r') )	
	        				csvReadertFileInputDelimited_3.setLineEnd(""+rowSeparator_tFileInputDelimited_3[0]);
						
							csvReadertFileInputDelimited_3.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_3 != 0){
			        	for(currentLinetFileInputDelimited_3=0;currentLinetFileInputDelimited_3 < 1;currentLinetFileInputDelimited_3++){
			        		csvReadertFileInputDelimited_3.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_3.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3!=null && csvReadertFileInputDelimited_3.readNext() ) { 
	        		rowstate_tFileInputDelimited_3.reset();
	        
		        	rowtFileInputDelimited_3=csvReadertFileInputDelimited_3.getValues();
		        	
					
	        			if(rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_3++;
	            
		            if(lastLinetFileInputDelimited_3 > -1 && currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_3++;
	            	if (limittFileInputDelimited_3 > 0 && outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
	                	break;
	            	}  
	                                                                      
					
	    							row4 = null;			
								
								boolean whetherReject_tFileInputDelimited_3 = false;
								row4 = new row4Struct();
								try {			
									
			rowHelper_tFileInputDelimited_3.valueToConn(rowtFileInputDelimited_3, row4 );
		
									
									if(rowstate_tFileInputDelimited_3.getException()!=null) {
										throw rowstate_tFileInputDelimited_3.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_3 = true;
        							
                							System.err.println(e.getMessage());
                							row4 = null;
                						
            							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row4"
									
							);
						}
						
//////////
 

// for output
			row5 = new row5Struct();
								
			row5.Year = row4.Year;								
			row5.Quarter = row4.Quarter;								
			row5.Month = row4.Month;								
			row5.DayofMonth = row4.DayofMonth;								
			row5.DayOfWeek = row4.DayOfWeek;								
			row5.FlightDate = row4.FlightDate;								
			row5.Marketing_Airline_Network = row4.Marketing_Airline_Network;								
			row5.Operated_or_Branded_Code_Share_Partners = row4.Operated_or_Branded_Code_Share_Partners;								
			row5.DOT_ID_Marketing_Airline = row4.DOT_ID_Marketing_Airline;								
			row5.IATA_Code_Marketing_Airline = row4.IATA_Code_Marketing_Airline;								
			row5.Flight_Number_Marketing_Airline = row4.Flight_Number_Marketing_Airline;								
			row5.Originally_Scheduled_Code_Share_Airline = row4.Originally_Scheduled_Code_Share_Airline;								
			row5.DOT_ID_Originally_Scheduled_Code_Share_Airline = row4.DOT_ID_Originally_Scheduled_Code_Share_Airline;								
			row5.IATA_Code_Originally_Scheduled_Code_Share_Airline = row4.IATA_Code_Originally_Scheduled_Code_Share_Airline;								
			row5.Flight_Num_Originally_Scheduled_Code_Share_Airline = row4.Flight_Num_Originally_Scheduled_Code_Share_Airline;								
			row5.Operating_Airline = row4.Operating_Airline;								
			row5.DOT_ID_Operating_Airline = row4.DOT_ID_Operating_Airline;								
			row5.IATA_Code_Operating_Airline = row4.IATA_Code_Operating_Airline;								
			row5.Tail_Number = row4.Tail_Number;								
			row5.Flight_Number_Operating_Airline = row4.Flight_Number_Operating_Airline;								
			row5.OriginAirportID = row4.OriginAirportID;								
			row5.OriginAirportSeqID = row4.OriginAirportSeqID;								
			row5.OriginCityMarketID = row4.OriginCityMarketID;								
			row5.Origin = row4.Origin;								
			row5.OriginCityName = row4.OriginCityName;								
			row5.OriginState = row4.OriginState;								
			row5.OriginStateFips = row4.OriginStateFips;								
			row5.OriginStateName = row4.OriginStateName;								
			row5.OriginWac = row4.OriginWac;								
			row5.DestAirportID = row4.DestAirportID;								
			row5.DestAirportSeqID = row4.DestAirportSeqID;								
			row5.DestCityMarketID = row4.DestCityMarketID;								
			row5.Dest = row4.Dest;								
			row5.DestCityName = row4.DestCityName;								
			row5.DestState = row4.DestState;								
			row5.DestStateFips = row4.DestStateFips;								
			row5.DestStateName = row4.DestStateName;								
			row5.DestWac = row4.DestWac;								
			row5.CRSDepTime = row4.CRSDepTime;								
			row5.DepTime = row4.DepTime;								
			row5.DepDelay = row4.DepDelay;								
			row5.DepDelayMinutes = row4.DepDelayMinutes;								
			row5.DepDel15 = row4.DepDel15;								
			row5.DepartureDelayGroups = row4.DepartureDelayGroups;								
			row5.DepTimeBlk = row4.DepTimeBlk;								
			row5.TaxiOut = row4.TaxiOut;								
			row5.WheelsOff = row4.WheelsOff;								
			row5.WheelsOn = row4.WheelsOn;								
			row5.TaxiIn = row4.TaxiIn;								
			row5.CRSArrTime = row4.CRSArrTime;								
			row5.ArrTime = row4.ArrTime;								
			row5.ArrDelay = row4.ArrDelay;								
			row5.ArrDelayMinutes = row4.ArrDelayMinutes;								
			row5.ArrDel15 = row4.ArrDel15;								
			row5.ArrivalDelayGroups = row4.ArrivalDelayGroups;								
			row5.ArrTimeBlk = row4.ArrTimeBlk;								
			row5.Cancelled = row4.Cancelled;								
			row5.CancellationCode = row4.CancellationCode;								
			row5.Diverted = row4.Diverted;								
			row5.CRSElapsedTime = row4.CRSElapsedTime;								
			row5.ActualElapsedTime = row4.ActualElapsedTime;								
			row5.AirTime = row4.AirTime;								
			row5.Flights = row4.Flights;								
			row5.Distance = row4.Distance;								
			row5.DistanceGroup = row4.DistanceGroup;								
			row5.CarrierDelay = row4.CarrierDelay;								
			row5.WeatherDelay = row4.WeatherDelay;								
			row5.NASDelay = row4.NASDelay;								
			row5.SecurityDelay = row4.SecurityDelay;								
			row5.LateAircraftDelay = row4.LateAircraftDelay;								
			row5.FirstDepTime = row4.FirstDepTime;								
			row5.TotalAddGTime = row4.TotalAddGTime;								
			row5.LongestAddGTime = row4.LongestAddGTime;								
			row5.DivAirportLandings = row4.DivAirportLandings;								
			row5.DivReachedDest = row4.DivReachedDest;								
			row5.DivActualElapsedTime = row4.DivActualElapsedTime;								
			row5.DivArrDelay = row4.DivArrDelay;								
			row5.DivDistance = row4.DivDistance;								
			row5.Div1Airport = row4.Div1Airport;								
			row5.Div1AirportID = row4.Div1AirportID;								
			row5.Div1AirportSeqID = row4.Div1AirportSeqID;								
			row5.Div1WheelsOn = row4.Div1WheelsOn;								
			row5.Div1TotalGTime = row4.Div1TotalGTime;								
			row5.Div1LongestGTime = row4.Div1LongestGTime;								
			row5.Div1WheelsOff = row4.Div1WheelsOff;								
			row5.Div1TailNum = row4.Div1TailNum;								
			row5.Div2Airport = row4.Div2Airport;								
			row5.Div2AirportID = row4.Div2AirportID;								
			row5.Div2AirportSeqID = row4.Div2AirportSeqID;								
			row5.Div2WheelsOn = row4.Div2WheelsOn;								
			row5.Div2TotalGTime = row4.Div2TotalGTime;								
			row5.Div2LongestGTime = row4.Div2LongestGTime;								
			row5.Div2WheelsOff = row4.Div2WheelsOff;								
			row5.Div2TailNum = row4.Div2TailNum;								
			row5.Div3Airport = row4.Div3Airport;								
			row5.Div3AirportID = row4.Div3AirportID;								
			row5.Div3AirportSeqID = row4.Div3AirportSeqID;								
			row5.Div3WheelsOn = row4.Div3WheelsOn;								
			row5.Div3TotalGTime = row4.Div3TotalGTime;								
			row5.Div3LongestGTime = row4.Div3LongestGTime;								
			row5.Div3WheelsOff = row4.Div3WheelsOff;								
			row5.Div3TailNum = row4.Div3TailNum;								
			row5.Div4Airport = row4.Div4Airport;								
			row5.Div4AirportID = row4.Div4AirportID;								
			row5.Div4AirportSeqID = row4.Div4AirportSeqID;								
			row5.Div4WheelsOn = row4.Div4WheelsOn;								
			row5.Div4TotalGTime = row4.Div4TotalGTime;								
			row5.Div4LongestGTime = row4.Div4LongestGTime;								
			row5.Div4WheelsOff = row4.Div4WheelsOff;								
			row5.Div4TailNum = row4.Div4TailNum;								
			row5.Div5Airport = row4.Div5Airport;								
			row5.Div5AirportID = row4.Div5AirportID;								
			row5.Div5AirportSeqID = row4.Div5AirportSeqID;								
			row5.Div5WheelsOn = row4.Div5WheelsOn;								
			row5.Div5TotalGTime = row4.Div5TotalGTime;								
			row5.Div5LongestGTime = row4.Div5LongestGTime;								
			row5.Div5WheelsOff = row4.Div5WheelsOff;								
			row5.Div5TailNum = row4.Div5TailNum;								
			row5.Duplicate = row4.Duplicate;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_2=new String[119];
                                fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_0(row5,rowtFileOutputDelimited_2);
                                fileOutputDelimitedUtil_tFileOutputDelimited_2.putValue_1(row5,rowtFileOutputDelimited_2);
                nb_line_tFileOutputDelimited_2++;
                resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
                                       CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	


				nb_line_tFileInputDelimited_3++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_3!=null){
    					csvReadertFileInputDelimited_3.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_3!=null){
    				globalMap.put("tFileInputDelimited_3_NB_LINE",nb_line_tFileInputDelimited_3);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4","row3");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_2!=null) {
				    	CsvWritertFileOutputDelimited_2.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tS3Put_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_2");
					
						if(CsvWritertFileOutputDelimited_2!=null) {
					    	CsvWritertFileOutputDelimited_2.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tS3Put_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tS3Put_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tS3Put_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tS3Put_1", false);
		start_Hash.put("tS3Put_1", System.currentTimeMillis());
		
	
	currentComponent="tS3Put_1";

	
		int tos_count_tS3Put_1 = 0;
		
	
	String millisecTime_tS3Put_1 = null;
	
	
		com.amazonaws.services.s3.AmazonS3Client conn_tS3Put_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
		
	String key_tS3Put_1 = "flights.csv";
	
	int partSizeInBytes_tS3Put_1 = 5 * 1024 * 1024;
	if(partSizeInBytes_tS3Put_1 < 5 << 20 ) {
		
		partSizeInBytes_tS3Put_1 = 5 << 20;
	}
	
	
	Object fileOrStream_tS3Put_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/stageUpdated.csv";
	
	boolean useStream_tS3Put_1 = false;
	java.io.InputStream uploadStream_tS3Put_1 = null;
	
	com.amazonaws.services.s3.transfer.TransferManager tm_tS3Put_1 = null;
	
	try{
		
		
		if(fileOrStream_tS3Put_1 instanceof String){
		    useStream_tS3Put_1 = false;
		}else if(fileOrStream_tS3Put_1 instanceof java.io.InputStream){
		    useStream_tS3Put_1 = true;
		}
		
    com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_tS3Put_1 = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		
  		
		
		if(!useStream_tS3Put_1) {
				java.io.File inputFile_tS3Put_1 = new java.io.File((String)fileOrStream_tS3Put_1);
				
				long multipart_upload_threshold_tS3Put_1 = 5 * 1024 * 1024;
				
    		tm_tS3Put_1 = com.amazonaws.services.s3.transfer.TransferManagerBuilder
    			.standard()
    			.withMinimumUploadPartSize((long)partSizeInBytes_tS3Put_1)
    			.withMultipartUploadThreshold(multipart_upload_threshold_tS3Put_1)
    			.withS3Client(conn_tS3Put_1)
    			.build();

  			com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/stage", key_tS3Put_1, inputFile_tS3Put_1).withMetadata(objectMetadata_tS3Put_1);
			
		    
			
  			



  			
  			com.amazonaws.services.s3.transfer.Upload upload_tS3Put_1 = tm_tS3Put_1.upload(putRequest_tS3Put_1);
  		
  			upload_tS3Put_1.waitForCompletion();
  			
		} else {
				java.io.InputStream sourceStream_tS3Put_1 = ((java.io.InputStream)fileOrStream_tS3Put_1);
				
  			class S3StreamUtil {
	    		//read content to buffer as many as possible
	    		public int readFully(final java.io.InputStream input, final byte[] buffer) throws java.io.IOException {
	    			return readFully(input, buffer, 0, buffer.length);
	    		}
	    		
	    		public int readFully(final java.io.InputStream input, final byte[] buffer, final int offset, final int length) throws java.io.IOException {
	    			if (length < 0) {
	    				throw new java.lang.IllegalArgumentException("Length must not be negative: " + length);
	    			}
	    		
	    			int remaining = length;
	    			while (remaining > 0) {
	    				final int location = length - remaining;
	    				final int count = input.read(buffer, offset + location, remaining);
	    				if (count == -1) {
	    					break;
	    				}
	    				remaining -= count;
	    			}
	    			return length - remaining;
	    		}
	      	}
      	
      	S3StreamUtil streamUtil_tS3Put_1 = new S3StreamUtil();
    		byte[] buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
    		long curPartSize_tS3Put_1 = streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1);
    		
    		boolean multiUpload_tS3Put_1 = curPartSize_tS3Put_1 == partSizeInBytes_tS3Put_1;
    		
    		if(!multiUpload_tS3Put_1) {
    				objectMetadata_tS3Put_1.setContentLength(curPartSize_tS3Put_1);
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1,0,Long.valueOf(curPartSize_tS3Put_1).intValue());
    				com.amazonaws.services.s3.model.PutObjectRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.PutObjectRequest("paravolar/stage", key_tS3Put_1, uploadStream_tS3Put_1, objectMetadata_tS3Put_1);
			
    				
    				



    				
    				conn_tS3Put_1.putObject(putRequest_tS3Put_1);
    		} else {
    				uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
      			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_tS3Put_1 = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
      			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest putRequest_tS3Put_1 = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest("paravolar/stage", key_tS3Put_1, objectMetadata_tS3Put_1);
      			
      			



      			
      			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_tS3Put_1 = conn_tS3Put_1.initiateMultipartUpload(putRequest_tS3Put_1);
      			String uploadId_tS3Put_1 = initResponse_tS3Put_1.getUploadId();
      			int partNumber_tS3Put_1 = 1;
      			boolean streamHasNext_tS3Put_1 = true;
      			byte[] probeAvailability_tS3Put_1 = new byte[1];
				try {
					while (streamHasNext_tS3Put_1) {
        						com.amazonaws.services.s3.model.UploadPartRequest uploadRequest_tS3Put_1 = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName("paravolar/stage")
                    	.withKey(key_tS3Put_1)
						.withUploadId(uploadId_tS3Put_1)
                    	.withPartNumber(partNumber_tS3Put_1)
						.withPartSize(curPartSize_tS3Put_1);
            		    uploadRequest_tS3Put_1.setInputStream(uploadStream_tS3Put_1);
            		    streamHasNext_tS3Put_1 = (1 == streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, probeAvailability_tS3Put_1));
            		    if(!streamHasNext_tS3Put_1){
                    	    uploadRequest_tS3Put_1.setLastPart(true);
                    	}

                		partTags_tS3Put_1.add(conn_tS3Put_1.uploadPart(uploadRequest_tS3Put_1).getPartETag());
                  	    partNumber_tS3Put_1++;

          		     	if(uploadStream_tS3Put_1!=null){
      		         			uploadStream_tS3Put_1.close();
          		     	}
          		     	buffer_tS3Put_1 = new byte[partSizeInBytes_tS3Put_1];
          		     	curPartSize_tS3Put_1 = 1 + streamUtil_tS3Put_1.readFully(sourceStream_tS3Put_1, buffer_tS3Put_1, 1, partSizeInBytes_tS3Put_1-1);
          		     	buffer_tS3Put_1[0] = probeAvailability_tS3Put_1[0];
          		     	probeAvailability_tS3Put_1 = new byte[1];
          		     	uploadStream_tS3Put_1 = new java.io.ByteArrayInputStream(buffer_tS3Put_1);
        				}
        				
            		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_tS3Put_1 = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest("paravolar/stage", key_tS3Put_1,
                        uploadId_tS3Put_1, partTags_tS3Put_1);
            		conn_tS3Put_1.completeMultipartUpload(compRequest_tS3Put_1);
            } catch (java.lang.Exception uploadException_tS3Put_1) {
globalMap.put("tS3Put_1_ERROR_MESSAGE",uploadException_tS3Put_1.getMessage());
  							conn_tS3Put_1.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest("paravolar/stage", key_tS3Put_1, uploadId_tS3Put_1));
    						throw uploadException_tS3Put_1;
            }
    		}
		}
		
		
	}catch(java.lang.Exception e_tS3Put_1){
globalMap.put("tS3Put_1_ERROR_MESSAGE",e_tS3Put_1.getMessage());
		
			System.err.println(e_tS3Put_1.getMessage());
		
	}finally{
		if(useStream_tS3Put_1 && uploadStream_tS3Put_1!=null){
    	uploadStream_tS3Put_1.close();
    }
    
    if(tm_tS3Put_1 != null){
        tm_tS3Put_1.shutdownNow(false);
    }
	    
		
	}     

 



/**
 * [tS3Put_1 begin ] stop
 */
	
	/**
	 * [tS3Put_1 main ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 


	tos_count_tS3Put_1++;

/**
 * [tS3Put_1 main ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_begin ] stop
 */
	
	/**
	 * [tS3Put_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 process_data_end ] stop
 */
	
	/**
	 * [tS3Put_1 end ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 

ok_Hash.put("tS3Put_1", true);
end_Hash.put("tS3Put_1", System.currentTimeMillis());




/**
 * [tS3Put_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tS3Put_1 finally ] start
	 */

	

	
	
	currentComponent="tS3Put_1";

	

 



/**
 * [tS3Put_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tS3Put_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_PARAVOLAR_process_flights = new byte[0];
    static byte[] commonByteArray_PARAVOLAR_process_flights = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer Year;

				public Integer getYear () {
					return this.Year;
				}
				
			    public Integer Quarter;

				public Integer getQuarter () {
					return this.Quarter;
				}
				
			    public Integer Month;

				public Integer getMonth () {
					return this.Month;
				}
				
			    public Integer DayofMonth;

				public Integer getDayofMonth () {
					return this.DayofMonth;
				}
				
			    public Integer DayOfWeek;

				public Integer getDayOfWeek () {
					return this.DayOfWeek;
				}
				
			    public String FlightDate;

				public String getFlightDate () {
					return this.FlightDate;
				}
				
			    public String Marketing_Airline_Network;

				public String getMarketing_Airline_Network () {
					return this.Marketing_Airline_Network;
				}
				
			    public String Operated_or_Branded_Code_Share_Partners;

				public String getOperated_or_Branded_Code_Share_Partners () {
					return this.Operated_or_Branded_Code_Share_Partners;
				}
				
			    public Integer DOT_ID_Marketing_Airline;

				public Integer getDOT_ID_Marketing_Airline () {
					return this.DOT_ID_Marketing_Airline;
				}
				
			    public String IATA_Code_Marketing_Airline;

				public String getIATA_Code_Marketing_Airline () {
					return this.IATA_Code_Marketing_Airline;
				}
				
			    public Integer Flight_Number_Marketing_Airline;

				public Integer getFlight_Number_Marketing_Airline () {
					return this.Flight_Number_Marketing_Airline;
				}
				
			    public String Originally_Scheduled_Code_Share_Airline;

				public String getOriginally_Scheduled_Code_Share_Airline () {
					return this.Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String DOT_ID_Originally_Scheduled_Code_Share_Airline;

				public String getDOT_ID_Originally_Scheduled_Code_Share_Airline () {
					return this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String IATA_Code_Originally_Scheduled_Code_Share_Airline;

				public String getIATA_Code_Originally_Scheduled_Code_Share_Airline () {
					return this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Flight_Num_Originally_Scheduled_Code_Share_Airline;

				public String getFlight_Num_Originally_Scheduled_Code_Share_Airline () {
					return this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				}
				
			    public String Operating_Airline;

				public String getOperating_Airline () {
					return this.Operating_Airline;
				}
				
			    public Integer DOT_ID_Operating_Airline;

				public Integer getDOT_ID_Operating_Airline () {
					return this.DOT_ID_Operating_Airline;
				}
				
			    public String IATA_Code_Operating_Airline;

				public String getIATA_Code_Operating_Airline () {
					return this.IATA_Code_Operating_Airline;
				}
				
			    public String Tail_Number;

				public String getTail_Number () {
					return this.Tail_Number;
				}
				
			    public Integer Flight_Number_Operating_Airline;

				public Integer getFlight_Number_Operating_Airline () {
					return this.Flight_Number_Operating_Airline;
				}
				
			    public Integer OriginAirportID;

				public Integer getOriginAirportID () {
					return this.OriginAirportID;
				}
				
			    public Integer OriginAirportSeqID;

				public Integer getOriginAirportSeqID () {
					return this.OriginAirportSeqID;
				}
				
			    public Integer OriginCityMarketID;

				public Integer getOriginCityMarketID () {
					return this.OriginCityMarketID;
				}
				
			    public String Origin;

				public String getOrigin () {
					return this.Origin;
				}
				
			    public String OriginCityName;

				public String getOriginCityName () {
					return this.OriginCityName;
				}
				
			    public String OriginState;

				public String getOriginState () {
					return this.OriginState;
				}
				
			    public String OriginStateFips;

				public String getOriginStateFips () {
					return this.OriginStateFips;
				}
				
			    public String OriginStateName;

				public String getOriginStateName () {
					return this.OriginStateName;
				}
				
			    public Integer OriginWac;

				public Integer getOriginWac () {
					return this.OriginWac;
				}
				
			    public Integer DestAirportID;

				public Integer getDestAirportID () {
					return this.DestAirportID;
				}
				
			    public Integer DestAirportSeqID;

				public Integer getDestAirportSeqID () {
					return this.DestAirportSeqID;
				}
				
			    public Integer DestCityMarketID;

				public Integer getDestCityMarketID () {
					return this.DestCityMarketID;
				}
				
			    public String Dest;

				public String getDest () {
					return this.Dest;
				}
				
			    public String DestCityName;

				public String getDestCityName () {
					return this.DestCityName;
				}
				
			    public String DestState;

				public String getDestState () {
					return this.DestState;
				}
				
			    public String DestStateFips;

				public String getDestStateFips () {
					return this.DestStateFips;
				}
				
			    public String DestStateName;

				public String getDestStateName () {
					return this.DestStateName;
				}
				
			    public Integer DestWac;

				public Integer getDestWac () {
					return this.DestWac;
				}
				
			    public String CRSDepTime;

				public String getCRSDepTime () {
					return this.CRSDepTime;
				}
				
			    public String DepTime;

				public String getDepTime () {
					return this.DepTime;
				}
				
			    public String DepDelay;

				public String getDepDelay () {
					return this.DepDelay;
				}
				
			    public String DepDelayMinutes;

				public String getDepDelayMinutes () {
					return this.DepDelayMinutes;
				}
				
			    public String DepDel15;

				public String getDepDel15 () {
					return this.DepDel15;
				}
				
			    public String DepartureDelayGroups;

				public String getDepartureDelayGroups () {
					return this.DepartureDelayGroups;
				}
				
			    public String DepTimeBlk;

				public String getDepTimeBlk () {
					return this.DepTimeBlk;
				}
				
			    public String TaxiOut;

				public String getTaxiOut () {
					return this.TaxiOut;
				}
				
			    public String WheelsOff;

				public String getWheelsOff () {
					return this.WheelsOff;
				}
				
			    public String WheelsOn;

				public String getWheelsOn () {
					return this.WheelsOn;
				}
				
			    public String TaxiIn;

				public String getTaxiIn () {
					return this.TaxiIn;
				}
				
			    public String CRSArrTime;

				public String getCRSArrTime () {
					return this.CRSArrTime;
				}
				
			    public String ArrTime;

				public String getArrTime () {
					return this.ArrTime;
				}
				
			    public String ArrDelay;

				public String getArrDelay () {
					return this.ArrDelay;
				}
				
			    public String ArrDelayMinutes;

				public String getArrDelayMinutes () {
					return this.ArrDelayMinutes;
				}
				
			    public String ArrDel15;

				public String getArrDel15 () {
					return this.ArrDel15;
				}
				
			    public String ArrivalDelayGroups;

				public String getArrivalDelayGroups () {
					return this.ArrivalDelayGroups;
				}
				
			    public String ArrTimeBlk;

				public String getArrTimeBlk () {
					return this.ArrTimeBlk;
				}
				
			    public Float Cancelled;

				public Float getCancelled () {
					return this.Cancelled;
				}
				
			    public String CancellationCode;

				public String getCancellationCode () {
					return this.CancellationCode;
				}
				
			    public Float Diverted;

				public Float getDiverted () {
					return this.Diverted;
				}
				
			    public Float CRSElapsedTime;

				public Float getCRSElapsedTime () {
					return this.CRSElapsedTime;
				}
				
			    public String ActualElapsedTime;

				public String getActualElapsedTime () {
					return this.ActualElapsedTime;
				}
				
			    public String AirTime;

				public String getAirTime () {
					return this.AirTime;
				}
				
			    public Float Flights;

				public Float getFlights () {
					return this.Flights;
				}
				
			    public Float Distance;

				public Float getDistance () {
					return this.Distance;
				}
				
			    public Integer DistanceGroup;

				public Integer getDistanceGroup () {
					return this.DistanceGroup;
				}
				
			    public String CarrierDelay;

				public String getCarrierDelay () {
					return this.CarrierDelay;
				}
				
			    public String WeatherDelay;

				public String getWeatherDelay () {
					return this.WeatherDelay;
				}
				
			    public String NASDelay;

				public String getNASDelay () {
					return this.NASDelay;
				}
				
			    public String SecurityDelay;

				public String getSecurityDelay () {
					return this.SecurityDelay;
				}
				
			    public String LateAircraftDelay;

				public String getLateAircraftDelay () {
					return this.LateAircraftDelay;
				}
				
			    public String FirstDepTime;

				public String getFirstDepTime () {
					return this.FirstDepTime;
				}
				
			    public String TotalAddGTime;

				public String getTotalAddGTime () {
					return this.TotalAddGTime;
				}
				
			    public String LongestAddGTime;

				public String getLongestAddGTime () {
					return this.LongestAddGTime;
				}
				
			    public Integer DivAirportLandings;

				public Integer getDivAirportLandings () {
					return this.DivAirportLandings;
				}
				
			    public String DivReachedDest;

				public String getDivReachedDest () {
					return this.DivReachedDest;
				}
				
			    public String DivActualElapsedTime;

				public String getDivActualElapsedTime () {
					return this.DivActualElapsedTime;
				}
				
			    public String DivArrDelay;

				public String getDivArrDelay () {
					return this.DivArrDelay;
				}
				
			    public String DivDistance;

				public String getDivDistance () {
					return this.DivDistance;
				}
				
			    public String Div1Airport;

				public String getDiv1Airport () {
					return this.Div1Airport;
				}
				
			    public String Div1AirportID;

				public String getDiv1AirportID () {
					return this.Div1AirportID;
				}
				
			    public String Div1AirportSeqID;

				public String getDiv1AirportSeqID () {
					return this.Div1AirportSeqID;
				}
				
			    public String Div1WheelsOn;

				public String getDiv1WheelsOn () {
					return this.Div1WheelsOn;
				}
				
			    public String Div1TotalGTime;

				public String getDiv1TotalGTime () {
					return this.Div1TotalGTime;
				}
				
			    public String Div1LongestGTime;

				public String getDiv1LongestGTime () {
					return this.Div1LongestGTime;
				}
				
			    public String Div1WheelsOff;

				public String getDiv1WheelsOff () {
					return this.Div1WheelsOff;
				}
				
			    public String Div1TailNum;

				public String getDiv1TailNum () {
					return this.Div1TailNum;
				}
				
			    public String Div2Airport;

				public String getDiv2Airport () {
					return this.Div2Airport;
				}
				
			    public String Div2AirportID;

				public String getDiv2AirportID () {
					return this.Div2AirportID;
				}
				
			    public String Div2AirportSeqID;

				public String getDiv2AirportSeqID () {
					return this.Div2AirportSeqID;
				}
				
			    public String Div2WheelsOn;

				public String getDiv2WheelsOn () {
					return this.Div2WheelsOn;
				}
				
			    public String Div2TotalGTime;

				public String getDiv2TotalGTime () {
					return this.Div2TotalGTime;
				}
				
			    public String Div2LongestGTime;

				public String getDiv2LongestGTime () {
					return this.Div2LongestGTime;
				}
				
			    public String Div2WheelsOff;

				public String getDiv2WheelsOff () {
					return this.Div2WheelsOff;
				}
				
			    public String Div2TailNum;

				public String getDiv2TailNum () {
					return this.Div2TailNum;
				}
				
			    public String Div3Airport;

				public String getDiv3Airport () {
					return this.Div3Airport;
				}
				
			    public String Div3AirportID;

				public String getDiv3AirportID () {
					return this.Div3AirportID;
				}
				
			    public String Div3AirportSeqID;

				public String getDiv3AirportSeqID () {
					return this.Div3AirportSeqID;
				}
				
			    public String Div3WheelsOn;

				public String getDiv3WheelsOn () {
					return this.Div3WheelsOn;
				}
				
			    public String Div3TotalGTime;

				public String getDiv3TotalGTime () {
					return this.Div3TotalGTime;
				}
				
			    public String Div3LongestGTime;

				public String getDiv3LongestGTime () {
					return this.Div3LongestGTime;
				}
				
			    public String Div3WheelsOff;

				public String getDiv3WheelsOff () {
					return this.Div3WheelsOff;
				}
				
			    public String Div3TailNum;

				public String getDiv3TailNum () {
					return this.Div3TailNum;
				}
				
			    public String Div4Airport;

				public String getDiv4Airport () {
					return this.Div4Airport;
				}
				
			    public String Div4AirportID;

				public String getDiv4AirportID () {
					return this.Div4AirportID;
				}
				
			    public String Div4AirportSeqID;

				public String getDiv4AirportSeqID () {
					return this.Div4AirportSeqID;
				}
				
			    public String Div4WheelsOn;

				public String getDiv4WheelsOn () {
					return this.Div4WheelsOn;
				}
				
			    public String Div4TotalGTime;

				public String getDiv4TotalGTime () {
					return this.Div4TotalGTime;
				}
				
			    public String Div4LongestGTime;

				public String getDiv4LongestGTime () {
					return this.Div4LongestGTime;
				}
				
			    public String Div4WheelsOff;

				public String getDiv4WheelsOff () {
					return this.Div4WheelsOff;
				}
				
			    public String Div4TailNum;

				public String getDiv4TailNum () {
					return this.Div4TailNum;
				}
				
			    public String Div5Airport;

				public String getDiv5Airport () {
					return this.Div5Airport;
				}
				
			    public String Div5AirportID;

				public String getDiv5AirportID () {
					return this.Div5AirportID;
				}
				
			    public String Div5AirportSeqID;

				public String getDiv5AirportSeqID () {
					return this.Div5AirportSeqID;
				}
				
			    public String Div5WheelsOn;

				public String getDiv5WheelsOn () {
					return this.Div5WheelsOn;
				}
				
			    public String Div5TotalGTime;

				public String getDiv5TotalGTime () {
					return this.Div5TotalGTime;
				}
				
			    public String Div5LongestGTime;

				public String getDiv5LongestGTime () {
					return this.Div5LongestGTime;
				}
				
			    public String Div5WheelsOff;

				public String getDiv5WheelsOff () {
					return this.Div5WheelsOff;
				}
				
			    public String Div5TailNum;

				public String getDiv5TailNum () {
					return this.Div5TailNum;
				}
				
			    public Character Duplicate;

				public Character getDuplicate () {
					return this.Duplicate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Month == null) ? 0 : this.Month.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.Month == null) {
							if (other.Month != null)
								return false;
						
						} else if (!this.Month.equals(other.Month))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.Year = this.Year;
	            other.Quarter = this.Quarter;
	            other.Month = this.Month;
	            other.DayofMonth = this.DayofMonth;
	            other.DayOfWeek = this.DayOfWeek;
	            other.FlightDate = this.FlightDate;
	            other.Marketing_Airline_Network = this.Marketing_Airline_Network;
	            other.Operated_or_Branded_Code_Share_Partners = this.Operated_or_Branded_Code_Share_Partners;
	            other.DOT_ID_Marketing_Airline = this.DOT_ID_Marketing_Airline;
	            other.IATA_Code_Marketing_Airline = this.IATA_Code_Marketing_Airline;
	            other.Flight_Number_Marketing_Airline = this.Flight_Number_Marketing_Airline;
	            other.Originally_Scheduled_Code_Share_Airline = this.Originally_Scheduled_Code_Share_Airline;
	            other.DOT_ID_Originally_Scheduled_Code_Share_Airline = this.DOT_ID_Originally_Scheduled_Code_Share_Airline;
	            other.IATA_Code_Originally_Scheduled_Code_Share_Airline = this.IATA_Code_Originally_Scheduled_Code_Share_Airline;
	            other.Flight_Num_Originally_Scheduled_Code_Share_Airline = this.Flight_Num_Originally_Scheduled_Code_Share_Airline;
	            other.Operating_Airline = this.Operating_Airline;
	            other.DOT_ID_Operating_Airline = this.DOT_ID_Operating_Airline;
	            other.IATA_Code_Operating_Airline = this.IATA_Code_Operating_Airline;
	            other.Tail_Number = this.Tail_Number;
	            other.Flight_Number_Operating_Airline = this.Flight_Number_Operating_Airline;
	            other.OriginAirportID = this.OriginAirportID;
	            other.OriginAirportSeqID = this.OriginAirportSeqID;
	            other.OriginCityMarketID = this.OriginCityMarketID;
	            other.Origin = this.Origin;
	            other.OriginCityName = this.OriginCityName;
	            other.OriginState = this.OriginState;
	            other.OriginStateFips = this.OriginStateFips;
	            other.OriginStateName = this.OriginStateName;
	            other.OriginWac = this.OriginWac;
	            other.DestAirportID = this.DestAirportID;
	            other.DestAirportSeqID = this.DestAirportSeqID;
	            other.DestCityMarketID = this.DestCityMarketID;
	            other.Dest = this.Dest;
	            other.DestCityName = this.DestCityName;
	            other.DestState = this.DestState;
	            other.DestStateFips = this.DestStateFips;
	            other.DestStateName = this.DestStateName;
	            other.DestWac = this.DestWac;
	            other.CRSDepTime = this.CRSDepTime;
	            other.DepTime = this.DepTime;
	            other.DepDelay = this.DepDelay;
	            other.DepDelayMinutes = this.DepDelayMinutes;
	            other.DepDel15 = this.DepDel15;
	            other.DepartureDelayGroups = this.DepartureDelayGroups;
	            other.DepTimeBlk = this.DepTimeBlk;
	            other.TaxiOut = this.TaxiOut;
	            other.WheelsOff = this.WheelsOff;
	            other.WheelsOn = this.WheelsOn;
	            other.TaxiIn = this.TaxiIn;
	            other.CRSArrTime = this.CRSArrTime;
	            other.ArrTime = this.ArrTime;
	            other.ArrDelay = this.ArrDelay;
	            other.ArrDelayMinutes = this.ArrDelayMinutes;
	            other.ArrDel15 = this.ArrDel15;
	            other.ArrivalDelayGroups = this.ArrivalDelayGroups;
	            other.ArrTimeBlk = this.ArrTimeBlk;
	            other.Cancelled = this.Cancelled;
	            other.CancellationCode = this.CancellationCode;
	            other.Diverted = this.Diverted;
	            other.CRSElapsedTime = this.CRSElapsedTime;
	            other.ActualElapsedTime = this.ActualElapsedTime;
	            other.AirTime = this.AirTime;
	            other.Flights = this.Flights;
	            other.Distance = this.Distance;
	            other.DistanceGroup = this.DistanceGroup;
	            other.CarrierDelay = this.CarrierDelay;
	            other.WeatherDelay = this.WeatherDelay;
	            other.NASDelay = this.NASDelay;
	            other.SecurityDelay = this.SecurityDelay;
	            other.LateAircraftDelay = this.LateAircraftDelay;
	            other.FirstDepTime = this.FirstDepTime;
	            other.TotalAddGTime = this.TotalAddGTime;
	            other.LongestAddGTime = this.LongestAddGTime;
	            other.DivAirportLandings = this.DivAirportLandings;
	            other.DivReachedDest = this.DivReachedDest;
	            other.DivActualElapsedTime = this.DivActualElapsedTime;
	            other.DivArrDelay = this.DivArrDelay;
	            other.DivDistance = this.DivDistance;
	            other.Div1Airport = this.Div1Airport;
	            other.Div1AirportID = this.Div1AirportID;
	            other.Div1AirportSeqID = this.Div1AirportSeqID;
	            other.Div1WheelsOn = this.Div1WheelsOn;
	            other.Div1TotalGTime = this.Div1TotalGTime;
	            other.Div1LongestGTime = this.Div1LongestGTime;
	            other.Div1WheelsOff = this.Div1WheelsOff;
	            other.Div1TailNum = this.Div1TailNum;
	            other.Div2Airport = this.Div2Airport;
	            other.Div2AirportID = this.Div2AirportID;
	            other.Div2AirportSeqID = this.Div2AirportSeqID;
	            other.Div2WheelsOn = this.Div2WheelsOn;
	            other.Div2TotalGTime = this.Div2TotalGTime;
	            other.Div2LongestGTime = this.Div2LongestGTime;
	            other.Div2WheelsOff = this.Div2WheelsOff;
	            other.Div2TailNum = this.Div2TailNum;
	            other.Div3Airport = this.Div3Airport;
	            other.Div3AirportID = this.Div3AirportID;
	            other.Div3AirportSeqID = this.Div3AirportSeqID;
	            other.Div3WheelsOn = this.Div3WheelsOn;
	            other.Div3TotalGTime = this.Div3TotalGTime;
	            other.Div3LongestGTime = this.Div3LongestGTime;
	            other.Div3WheelsOff = this.Div3WheelsOff;
	            other.Div3TailNum = this.Div3TailNum;
	            other.Div4Airport = this.Div4Airport;
	            other.Div4AirportID = this.Div4AirportID;
	            other.Div4AirportSeqID = this.Div4AirportSeqID;
	            other.Div4WheelsOn = this.Div4WheelsOn;
	            other.Div4TotalGTime = this.Div4TotalGTime;
	            other.Div4LongestGTime = this.Div4LongestGTime;
	            other.Div4WheelsOff = this.Div4WheelsOff;
	            other.Div4TailNum = this.Div4TailNum;
	            other.Div5Airport = this.Div5Airport;
	            other.Div5AirportID = this.Div5AirportID;
	            other.Div5AirportSeqID = this.Div5AirportSeqID;
	            other.Div5WheelsOn = this.Div5WheelsOn;
	            other.Div5TotalGTime = this.Div5TotalGTime;
	            other.Div5LongestGTime = this.Div5LongestGTime;
	            other.Div5WheelsOff = this.Div5WheelsOff;
	            other.Div5TailNum = this.Div5TailNum;
	            other.Duplicate = this.Duplicate;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.Month = this.Month;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Month = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PARAVOLAR_process_flights) {

        	try {

        		int length = 0;
		
						this.Month = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Month,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.Month,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Year = readInteger(dis,ois);
					
						this.Quarter = readInteger(dis,ois);
					
						this.DayofMonth = readInteger(dis,ois);
					
						this.DayOfWeek = readInteger(dis,ois);
					
						this.FlightDate = readString(dis,ois);
					
						this.Marketing_Airline_Network = readString(dis,ois);
					
						this.Operated_or_Branded_Code_Share_Partners = readString(dis,ois);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis,ois);
					
						this.IATA_Code_Marketing_Airline = readString(dis,ois);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis,ois);
					
						this.Originally_Scheduled_Code_Share_Airline = readString(dis,ois);
					
						this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis,ois);
					
						this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis,ois);
					
						this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis,ois);
					
						this.Operating_Airline = readString(dis,ois);
					
						this.DOT_ID_Operating_Airline = readInteger(dis,ois);
					
						this.IATA_Code_Operating_Airline = readString(dis,ois);
					
						this.Tail_Number = readString(dis,ois);
					
						this.Flight_Number_Operating_Airline = readInteger(dis,ois);
					
						this.OriginAirportID = readInteger(dis,ois);
					
						this.OriginAirportSeqID = readInteger(dis,ois);
					
						this.OriginCityMarketID = readInteger(dis,ois);
					
						this.Origin = readString(dis,ois);
					
						this.OriginCityName = readString(dis,ois);
					
						this.OriginState = readString(dis,ois);
					
						this.OriginStateFips = readString(dis,ois);
					
						this.OriginStateName = readString(dis,ois);
					
						this.OriginWac = readInteger(dis,ois);
					
						this.DestAirportID = readInteger(dis,ois);
					
						this.DestAirportSeqID = readInteger(dis,ois);
					
						this.DestCityMarketID = readInteger(dis,ois);
					
						this.Dest = readString(dis,ois);
					
						this.DestCityName = readString(dis,ois);
					
						this.DestState = readString(dis,ois);
					
						this.DestStateFips = readString(dis,ois);
					
						this.DestStateName = readString(dis,ois);
					
						this.DestWac = readInteger(dis,ois);
					
						this.CRSDepTime = readString(dis,ois);
					
						this.DepTime = readString(dis,ois);
					
						this.DepDelay = readString(dis,ois);
					
						this.DepDelayMinutes = readString(dis,ois);
					
						this.DepDel15 = readString(dis,ois);
					
						this.DepartureDelayGroups = readString(dis,ois);
					
						this.DepTimeBlk = readString(dis,ois);
					
						this.TaxiOut = readString(dis,ois);
					
						this.WheelsOff = readString(dis,ois);
					
						this.WheelsOn = readString(dis,ois);
					
						this.TaxiIn = readString(dis,ois);
					
						this.CRSArrTime = readString(dis,ois);
					
						this.ArrTime = readString(dis,ois);
					
						this.ArrDelay = readString(dis,ois);
					
						this.ArrDelayMinutes = readString(dis,ois);
					
						this.ArrDel15 = readString(dis,ois);
					
						this.ArrivalDelayGroups = readString(dis,ois);
					
						this.ArrTimeBlk = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = dis.readFloat();
           				}
					
						this.CancellationCode = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = dis.readFloat();
           				}
					
						this.ActualElapsedTime = readString(dis,ois);
					
						this.AirTime = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = dis.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis,ois);
					
						this.CarrierDelay = readString(dis,ois);
					
						this.WeatherDelay = readString(dis,ois);
					
						this.NASDelay = readString(dis,ois);
					
						this.SecurityDelay = readString(dis,ois);
					
						this.LateAircraftDelay = readString(dis,ois);
					
						this.FirstDepTime = readString(dis,ois);
					
						this.TotalAddGTime = readString(dis,ois);
					
						this.LongestAddGTime = readString(dis,ois);
					
						this.DivAirportLandings = readInteger(dis,ois);
					
						this.DivReachedDest = readString(dis,ois);
					
						this.DivActualElapsedTime = readString(dis,ois);
					
						this.DivArrDelay = readString(dis,ois);
					
						this.DivDistance = readString(dis,ois);
					
						this.Div1Airport = readString(dis,ois);
					
						this.Div1AirportID = readString(dis,ois);
					
						this.Div1AirportSeqID = readString(dis,ois);
					
						this.Div1WheelsOn = readString(dis,ois);
					
						this.Div1TotalGTime = readString(dis,ois);
					
						this.Div1LongestGTime = readString(dis,ois);
					
						this.Div1WheelsOff = readString(dis,ois);
					
						this.Div1TailNum = readString(dis,ois);
					
						this.Div2Airport = readString(dis,ois);
					
						this.Div2AirportID = readString(dis,ois);
					
						this.Div2AirportSeqID = readString(dis,ois);
					
						this.Div2WheelsOn = readString(dis,ois);
					
						this.Div2TotalGTime = readString(dis,ois);
					
						this.Div2LongestGTime = readString(dis,ois);
					
						this.Div2WheelsOff = readString(dis,ois);
					
						this.Div2TailNum = readString(dis,ois);
					
						this.Div3Airport = readString(dis,ois);
					
						this.Div3AirportID = readString(dis,ois);
					
						this.Div3AirportSeqID = readString(dis,ois);
					
						this.Div3WheelsOn = readString(dis,ois);
					
						this.Div3TotalGTime = readString(dis,ois);
					
						this.Div3LongestGTime = readString(dis,ois);
					
						this.Div3WheelsOff = readString(dis,ois);
					
						this.Div3TailNum = readString(dis,ois);
					
						this.Div4Airport = readString(dis,ois);
					
						this.Div4AirportID = readString(dis,ois);
					
						this.Div4AirportSeqID = readString(dis,ois);
					
						this.Div4WheelsOn = readString(dis,ois);
					
						this.Div4TotalGTime = readString(dis,ois);
					
						this.Div4LongestGTime = readString(dis,ois);
					
						this.Div4WheelsOff = readString(dis,ois);
					
						this.Div4TailNum = readString(dis,ois);
					
						this.Div5Airport = readString(dis,ois);
					
						this.Div5AirportID = readString(dis,ois);
					
						this.Div5AirportSeqID = readString(dis,ois);
					
						this.Div5WheelsOn = readString(dis,ois);
					
						this.Div5TotalGTime = readString(dis,ois);
					
						this.Div5LongestGTime = readString(dis,ois);
					
						this.Div5WheelsOff = readString(dis,ois);
					
						this.Div5TailNum = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = dis.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Year = readInteger(dis,objectIn);
					
						this.Quarter = readInteger(dis,objectIn);
					
						this.DayofMonth = readInteger(dis,objectIn);
					
						this.DayOfWeek = readInteger(dis,objectIn);
					
						this.FlightDate = readString(dis,objectIn);
					
						this.Marketing_Airline_Network = readString(dis,objectIn);
					
						this.Operated_or_Branded_Code_Share_Partners = readString(dis,objectIn);
					
						this.DOT_ID_Marketing_Airline = readInteger(dis,objectIn);
					
						this.IATA_Code_Marketing_Airline = readString(dis,objectIn);
					
						this.Flight_Number_Marketing_Airline = readInteger(dis,objectIn);
					
						this.Originally_Scheduled_Code_Share_Airline = readString(dis,objectIn);
					
						this.DOT_ID_Originally_Scheduled_Code_Share_Airline = readString(dis,objectIn);
					
						this.IATA_Code_Originally_Scheduled_Code_Share_Airline = readString(dis,objectIn);
					
						this.Flight_Num_Originally_Scheduled_Code_Share_Airline = readString(dis,objectIn);
					
						this.Operating_Airline = readString(dis,objectIn);
					
						this.DOT_ID_Operating_Airline = readInteger(dis,objectIn);
					
						this.IATA_Code_Operating_Airline = readString(dis,objectIn);
					
						this.Tail_Number = readString(dis,objectIn);
					
						this.Flight_Number_Operating_Airline = readInteger(dis,objectIn);
					
						this.OriginAirportID = readInteger(dis,objectIn);
					
						this.OriginAirportSeqID = readInteger(dis,objectIn);
					
						this.OriginCityMarketID = readInteger(dis,objectIn);
					
						this.Origin = readString(dis,objectIn);
					
						this.OriginCityName = readString(dis,objectIn);
					
						this.OriginState = readString(dis,objectIn);
					
						this.OriginStateFips = readString(dis,objectIn);
					
						this.OriginStateName = readString(dis,objectIn);
					
						this.OriginWac = readInteger(dis,objectIn);
					
						this.DestAirportID = readInteger(dis,objectIn);
					
						this.DestAirportSeqID = readInteger(dis,objectIn);
					
						this.DestCityMarketID = readInteger(dis,objectIn);
					
						this.Dest = readString(dis,objectIn);
					
						this.DestCityName = readString(dis,objectIn);
					
						this.DestState = readString(dis,objectIn);
					
						this.DestStateFips = readString(dis,objectIn);
					
						this.DestStateName = readString(dis,objectIn);
					
						this.DestWac = readInteger(dis,objectIn);
					
						this.CRSDepTime = readString(dis,objectIn);
					
						this.DepTime = readString(dis,objectIn);
					
						this.DepDelay = readString(dis,objectIn);
					
						this.DepDelayMinutes = readString(dis,objectIn);
					
						this.DepDel15 = readString(dis,objectIn);
					
						this.DepartureDelayGroups = readString(dis,objectIn);
					
						this.DepTimeBlk = readString(dis,objectIn);
					
						this.TaxiOut = readString(dis,objectIn);
					
						this.WheelsOff = readString(dis,objectIn);
					
						this.WheelsOn = readString(dis,objectIn);
					
						this.TaxiIn = readString(dis,objectIn);
					
						this.CRSArrTime = readString(dis,objectIn);
					
						this.ArrTime = readString(dis,objectIn);
					
						this.ArrDelay = readString(dis,objectIn);
					
						this.ArrDelayMinutes = readString(dis,objectIn);
					
						this.ArrDel15 = readString(dis,objectIn);
					
						this.ArrivalDelayGroups = readString(dis,objectIn);
					
						this.ArrTimeBlk = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Cancelled = null;
           				} else {
           			    	this.Cancelled = objectIn.readFloat();
           				}
					
						this.CancellationCode = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Diverted = null;
           				} else {
           			    	this.Diverted = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.CRSElapsedTime = null;
           				} else {
           			    	this.CRSElapsedTime = objectIn.readFloat();
           				}
					
						this.ActualElapsedTime = readString(dis,objectIn);
					
						this.AirTime = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Flights = null;
           				} else {
           			    	this.Flights = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Distance = null;
           				} else {
           			    	this.Distance = objectIn.readFloat();
           				}
					
						this.DistanceGroup = readInteger(dis,objectIn);
					
						this.CarrierDelay = readString(dis,objectIn);
					
						this.WeatherDelay = readString(dis,objectIn);
					
						this.NASDelay = readString(dis,objectIn);
					
						this.SecurityDelay = readString(dis,objectIn);
					
						this.LateAircraftDelay = readString(dis,objectIn);
					
						this.FirstDepTime = readString(dis,objectIn);
					
						this.TotalAddGTime = readString(dis,objectIn);
					
						this.LongestAddGTime = readString(dis,objectIn);
					
						this.DivAirportLandings = readInteger(dis,objectIn);
					
						this.DivReachedDest = readString(dis,objectIn);
					
						this.DivActualElapsedTime = readString(dis,objectIn);
					
						this.DivArrDelay = readString(dis,objectIn);
					
						this.DivDistance = readString(dis,objectIn);
					
						this.Div1Airport = readString(dis,objectIn);
					
						this.Div1AirportID = readString(dis,objectIn);
					
						this.Div1AirportSeqID = readString(dis,objectIn);
					
						this.Div1WheelsOn = readString(dis,objectIn);
					
						this.Div1TotalGTime = readString(dis,objectIn);
					
						this.Div1LongestGTime = readString(dis,objectIn);
					
						this.Div1WheelsOff = readString(dis,objectIn);
					
						this.Div1TailNum = readString(dis,objectIn);
					
						this.Div2Airport = readString(dis,objectIn);
					
						this.Div2AirportID = readString(dis,objectIn);
					
						this.Div2AirportSeqID = readString(dis,objectIn);
					
						this.Div2WheelsOn = readString(dis,objectIn);
					
						this.Div2TotalGTime = readString(dis,objectIn);
					
						this.Div2LongestGTime = readString(dis,objectIn);
					
						this.Div2WheelsOff = readString(dis,objectIn);
					
						this.Div2TailNum = readString(dis,objectIn);
					
						this.Div3Airport = readString(dis,objectIn);
					
						this.Div3AirportID = readString(dis,objectIn);
					
						this.Div3AirportSeqID = readString(dis,objectIn);
					
						this.Div3WheelsOn = readString(dis,objectIn);
					
						this.Div3TotalGTime = readString(dis,objectIn);
					
						this.Div3LongestGTime = readString(dis,objectIn);
					
						this.Div3WheelsOff = readString(dis,objectIn);
					
						this.Div3TailNum = readString(dis,objectIn);
					
						this.Div4Airport = readString(dis,objectIn);
					
						this.Div4AirportID = readString(dis,objectIn);
					
						this.Div4AirportSeqID = readString(dis,objectIn);
					
						this.Div4WheelsOn = readString(dis,objectIn);
					
						this.Div4TotalGTime = readString(dis,objectIn);
					
						this.Div4LongestGTime = readString(dis,objectIn);
					
						this.Div4WheelsOff = readString(dis,objectIn);
					
						this.Div4TailNum = readString(dis,objectIn);
					
						this.Div5Airport = readString(dis,objectIn);
					
						this.Div5AirportID = readString(dis,objectIn);
					
						this.Div5AirportSeqID = readString(dis,objectIn);
					
						this.Div5WheelsOn = readString(dis,objectIn);
					
						this.Div5TotalGTime = readString(dis,objectIn);
					
						this.Div5LongestGTime = readString(dis,objectIn);
					
						this.Div5WheelsOff = readString(dis,objectIn);
					
						this.Div5TailNum = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Duplicate = null;
           				} else {
           			    	this.Duplicate = objectIn.readChar();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.Year, dos, oos);
					
					writeInteger(this.Quarter, dos, oos);
					
					writeInteger(this.DayofMonth, dos, oos);
					
					writeInteger(this.DayOfWeek, dos, oos);
					
						writeString(this.FlightDate, dos, oos);
					
						writeString(this.Marketing_Airline_Network, dos, oos);
					
						writeString(this.Operated_or_Branded_Code_Share_Partners, dos, oos);
					
					writeInteger(this.DOT_ID_Marketing_Airline, dos, oos);
					
						writeString(this.IATA_Code_Marketing_Airline, dos, oos);
					
					writeInteger(this.Flight_Number_Marketing_Airline, dos, oos);
					
						writeString(this.Originally_Scheduled_Code_Share_Airline, dos, oos);
					
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos, oos);
					
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos, oos);
					
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos, oos);
					
						writeString(this.Operating_Airline, dos, oos);
					
					writeInteger(this.DOT_ID_Operating_Airline, dos, oos);
					
						writeString(this.IATA_Code_Operating_Airline, dos, oos);
					
						writeString(this.Tail_Number, dos, oos);
					
					writeInteger(this.Flight_Number_Operating_Airline, dos, oos);
					
					writeInteger(this.OriginAirportID, dos, oos);
					
					writeInteger(this.OriginAirportSeqID, dos, oos);
					
					writeInteger(this.OriginCityMarketID, dos, oos);
					
						writeString(this.Origin, dos, oos);
					
						writeString(this.OriginCityName, dos, oos);
					
						writeString(this.OriginState, dos, oos);
					
						writeString(this.OriginStateFips, dos, oos);
					
						writeString(this.OriginStateName, dos, oos);
					
					writeInteger(this.OriginWac, dos, oos);
					
					writeInteger(this.DestAirportID, dos, oos);
					
					writeInteger(this.DestAirportSeqID, dos, oos);
					
					writeInteger(this.DestCityMarketID, dos, oos);
					
						writeString(this.Dest, dos, oos);
					
						writeString(this.DestCityName, dos, oos);
					
						writeString(this.DestState, dos, oos);
					
						writeString(this.DestStateFips, dos, oos);
					
						writeString(this.DestStateName, dos, oos);
					
					writeInteger(this.DestWac, dos, oos);
					
						writeString(this.CRSDepTime, dos, oos);
					
						writeString(this.DepTime, dos, oos);
					
						writeString(this.DepDelay, dos, oos);
					
						writeString(this.DepDelayMinutes, dos, oos);
					
						writeString(this.DepDel15, dos, oos);
					
						writeString(this.DepartureDelayGroups, dos, oos);
					
						writeString(this.DepTimeBlk, dos, oos);
					
						writeString(this.TaxiOut, dos, oos);
					
						writeString(this.WheelsOff, dos, oos);
					
						writeString(this.WheelsOn, dos, oos);
					
						writeString(this.TaxiIn, dos, oos);
					
						writeString(this.CRSArrTime, dos, oos);
					
						writeString(this.ArrTime, dos, oos);
					
						writeString(this.ArrDelay, dos, oos);
					
						writeString(this.ArrDelayMinutes, dos, oos);
					
						writeString(this.ArrDel15, dos, oos);
					
						writeString(this.ArrivalDelayGroups, dos, oos);
					
						writeString(this.ArrTimeBlk, dos, oos);
					
						if(this.Cancelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Cancelled);
		            	}
					
						writeString(this.CancellationCode, dos, oos);
					
						if(this.Diverted == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Diverted);
		            	}
					
						if(this.CRSElapsedTime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CRSElapsedTime);
		            	}
					
						writeString(this.ActualElapsedTime, dos, oos);
					
						writeString(this.AirTime, dos, oos);
					
						if(this.Flights == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Flights);
		            	}
					
						if(this.Distance == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Distance);
		            	}
					
					writeInteger(this.DistanceGroup, dos, oos);
					
						writeString(this.CarrierDelay, dos, oos);
					
						writeString(this.WeatherDelay, dos, oos);
					
						writeString(this.NASDelay, dos, oos);
					
						writeString(this.SecurityDelay, dos, oos);
					
						writeString(this.LateAircraftDelay, dos, oos);
					
						writeString(this.FirstDepTime, dos, oos);
					
						writeString(this.TotalAddGTime, dos, oos);
					
						writeString(this.LongestAddGTime, dos, oos);
					
					writeInteger(this.DivAirportLandings, dos, oos);
					
						writeString(this.DivReachedDest, dos, oos);
					
						writeString(this.DivActualElapsedTime, dos, oos);
					
						writeString(this.DivArrDelay, dos, oos);
					
						writeString(this.DivDistance, dos, oos);
					
						writeString(this.Div1Airport, dos, oos);
					
						writeString(this.Div1AirportID, dos, oos);
					
						writeString(this.Div1AirportSeqID, dos, oos);
					
						writeString(this.Div1WheelsOn, dos, oos);
					
						writeString(this.Div1TotalGTime, dos, oos);
					
						writeString(this.Div1LongestGTime, dos, oos);
					
						writeString(this.Div1WheelsOff, dos, oos);
					
						writeString(this.Div1TailNum, dos, oos);
					
						writeString(this.Div2Airport, dos, oos);
					
						writeString(this.Div2AirportID, dos, oos);
					
						writeString(this.Div2AirportSeqID, dos, oos);
					
						writeString(this.Div2WheelsOn, dos, oos);
					
						writeString(this.Div2TotalGTime, dos, oos);
					
						writeString(this.Div2LongestGTime, dos, oos);
					
						writeString(this.Div2WheelsOff, dos, oos);
					
						writeString(this.Div2TailNum, dos, oos);
					
						writeString(this.Div3Airport, dos, oos);
					
						writeString(this.Div3AirportID, dos, oos);
					
						writeString(this.Div3AirportSeqID, dos, oos);
					
						writeString(this.Div3WheelsOn, dos, oos);
					
						writeString(this.Div3TotalGTime, dos, oos);
					
						writeString(this.Div3LongestGTime, dos, oos);
					
						writeString(this.Div3WheelsOff, dos, oos);
					
						writeString(this.Div3TailNum, dos, oos);
					
						writeString(this.Div4Airport, dos, oos);
					
						writeString(this.Div4AirportID, dos, oos);
					
						writeString(this.Div4AirportSeqID, dos, oos);
					
						writeString(this.Div4WheelsOn, dos, oos);
					
						writeString(this.Div4TotalGTime, dos, oos);
					
						writeString(this.Div4LongestGTime, dos, oos);
					
						writeString(this.Div4WheelsOff, dos, oos);
					
						writeString(this.Div4TailNum, dos, oos);
					
						writeString(this.Div5Airport, dos, oos);
					
						writeString(this.Div5AirportID, dos, oos);
					
						writeString(this.Div5AirportSeqID, dos, oos);
					
						writeString(this.Div5WheelsOn, dos, oos);
					
						writeString(this.Div5TotalGTime, dos, oos);
					
						writeString(this.Div5LongestGTime, dos, oos);
					
						writeString(this.Div5WheelsOff, dos, oos);
					
						writeString(this.Div5TailNum, dos, oos);
					
						if(this.Duplicate == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.Year, dos, objectOut);
					
					writeInteger(this.Quarter, dos, objectOut);
					
					writeInteger(this.DayofMonth, dos, objectOut);
					
					writeInteger(this.DayOfWeek, dos, objectOut);
					
						writeString(this.FlightDate, dos, objectOut);
					
						writeString(this.Marketing_Airline_Network, dos, objectOut);
					
						writeString(this.Operated_or_Branded_Code_Share_Partners, dos, objectOut);
					
					writeInteger(this.DOT_ID_Marketing_Airline, dos, objectOut);
					
						writeString(this.IATA_Code_Marketing_Airline, dos, objectOut);
					
					writeInteger(this.Flight_Number_Marketing_Airline, dos, objectOut);
					
						writeString(this.Originally_Scheduled_Code_Share_Airline, dos, objectOut);
					
						writeString(this.DOT_ID_Originally_Scheduled_Code_Share_Airline, dos, objectOut);
					
						writeString(this.IATA_Code_Originally_Scheduled_Code_Share_Airline, dos, objectOut);
					
						writeString(this.Flight_Num_Originally_Scheduled_Code_Share_Airline, dos, objectOut);
					
						writeString(this.Operating_Airline, dos, objectOut);
					
					writeInteger(this.DOT_ID_Operating_Airline, dos, objectOut);
					
						writeString(this.IATA_Code_Operating_Airline, dos, objectOut);
					
						writeString(this.Tail_Number, dos, objectOut);
					
					writeInteger(this.Flight_Number_Operating_Airline, dos, objectOut);
					
					writeInteger(this.OriginAirportID, dos, objectOut);
					
					writeInteger(this.OriginAirportSeqID, dos, objectOut);
					
					writeInteger(this.OriginCityMarketID, dos, objectOut);
					
						writeString(this.Origin, dos, objectOut);
					
						writeString(this.OriginCityName, dos, objectOut);
					
						writeString(this.OriginState, dos, objectOut);
					
						writeString(this.OriginStateFips, dos, objectOut);
					
						writeString(this.OriginStateName, dos, objectOut);
					
					writeInteger(this.OriginWac, dos, objectOut);
					
					writeInteger(this.DestAirportID, dos, objectOut);
					
					writeInteger(this.DestAirportSeqID, dos, objectOut);
					
					writeInteger(this.DestCityMarketID, dos, objectOut);
					
						writeString(this.Dest, dos, objectOut);
					
						writeString(this.DestCityName, dos, objectOut);
					
						writeString(this.DestState, dos, objectOut);
					
						writeString(this.DestStateFips, dos, objectOut);
					
						writeString(this.DestStateName, dos, objectOut);
					
					writeInteger(this.DestWac, dos, objectOut);
					
						writeString(this.CRSDepTime, dos, objectOut);
					
						writeString(this.DepTime, dos, objectOut);
					
						writeString(this.DepDelay, dos, objectOut);
					
						writeString(this.DepDelayMinutes, dos, objectOut);
					
						writeString(this.DepDel15, dos, objectOut);
					
						writeString(this.DepartureDelayGroups, dos, objectOut);
					
						writeString(this.DepTimeBlk, dos, objectOut);
					
						writeString(this.TaxiOut, dos, objectOut);
					
						writeString(this.WheelsOff, dos, objectOut);
					
						writeString(this.WheelsOn, dos, objectOut);
					
						writeString(this.TaxiIn, dos, objectOut);
					
						writeString(this.CRSArrTime, dos, objectOut);
					
						writeString(this.ArrTime, dos, objectOut);
					
						writeString(this.ArrDelay, dos, objectOut);
					
						writeString(this.ArrDelayMinutes, dos, objectOut);
					
						writeString(this.ArrDel15, dos, objectOut);
					
						writeString(this.ArrivalDelayGroups, dos, objectOut);
					
						writeString(this.ArrTimeBlk, dos, objectOut);
					
						if(this.Cancelled == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Cancelled);
		            	}
					
						writeString(this.CancellationCode, dos, objectOut);
					
						if(this.Diverted == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Diverted);
		            	}
					
						if(this.CRSElapsedTime == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.CRSElapsedTime);
		            	}
					
						writeString(this.ActualElapsedTime, dos, objectOut);
					
						writeString(this.AirTime, dos, objectOut);
					
						if(this.Flights == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Flights);
		            	}
					
						if(this.Distance == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Distance);
		            	}
					
					writeInteger(this.DistanceGroup, dos, objectOut);
					
						writeString(this.CarrierDelay, dos, objectOut);
					
						writeString(this.WeatherDelay, dos, objectOut);
					
						writeString(this.NASDelay, dos, objectOut);
					
						writeString(this.SecurityDelay, dos, objectOut);
					
						writeString(this.LateAircraftDelay, dos, objectOut);
					
						writeString(this.FirstDepTime, dos, objectOut);
					
						writeString(this.TotalAddGTime, dos, objectOut);
					
						writeString(this.LongestAddGTime, dos, objectOut);
					
					writeInteger(this.DivAirportLandings, dos, objectOut);
					
						writeString(this.DivReachedDest, dos, objectOut);
					
						writeString(this.DivActualElapsedTime, dos, objectOut);
					
						writeString(this.DivArrDelay, dos, objectOut);
					
						writeString(this.DivDistance, dos, objectOut);
					
						writeString(this.Div1Airport, dos, objectOut);
					
						writeString(this.Div1AirportID, dos, objectOut);
					
						writeString(this.Div1AirportSeqID, dos, objectOut);
					
						writeString(this.Div1WheelsOn, dos, objectOut);
					
						writeString(this.Div1TotalGTime, dos, objectOut);
					
						writeString(this.Div1LongestGTime, dos, objectOut);
					
						writeString(this.Div1WheelsOff, dos, objectOut);
					
						writeString(this.Div1TailNum, dos, objectOut);
					
						writeString(this.Div2Airport, dos, objectOut);
					
						writeString(this.Div2AirportID, dos, objectOut);
					
						writeString(this.Div2AirportSeqID, dos, objectOut);
					
						writeString(this.Div2WheelsOn, dos, objectOut);
					
						writeString(this.Div2TotalGTime, dos, objectOut);
					
						writeString(this.Div2LongestGTime, dos, objectOut);
					
						writeString(this.Div2WheelsOff, dos, objectOut);
					
						writeString(this.Div2TailNum, dos, objectOut);
					
						writeString(this.Div3Airport, dos, objectOut);
					
						writeString(this.Div3AirportID, dos, objectOut);
					
						writeString(this.Div3AirportSeqID, dos, objectOut);
					
						writeString(this.Div3WheelsOn, dos, objectOut);
					
						writeString(this.Div3TotalGTime, dos, objectOut);
					
						writeString(this.Div3LongestGTime, dos, objectOut);
					
						writeString(this.Div3WheelsOff, dos, objectOut);
					
						writeString(this.Div3TailNum, dos, objectOut);
					
						writeString(this.Div4Airport, dos, objectOut);
					
						writeString(this.Div4AirportID, dos, objectOut);
					
						writeString(this.Div4AirportSeqID, dos, objectOut);
					
						writeString(this.Div4WheelsOn, dos, objectOut);
					
						writeString(this.Div4TotalGTime, dos, objectOut);
					
						writeString(this.Div4LongestGTime, dos, objectOut);
					
						writeString(this.Div4WheelsOff, dos, objectOut);
					
						writeString(this.Div4TailNum, dos, objectOut);
					
						writeString(this.Div5Airport, dos, objectOut);
					
						writeString(this.Div5AirportID, dos, objectOut);
					
						writeString(this.Div5AirportSeqID, dos, objectOut);
					
						writeString(this.Div5WheelsOn, dos, objectOut);
					
						writeString(this.Div5TotalGTime, dos, objectOut);
					
						writeString(this.Div5LongestGTime, dos, objectOut);
					
						writeString(this.Div5WheelsOff, dos, objectOut);
					
						writeString(this.Div5TailNum, dos, objectOut);
					
						if(this.Duplicate == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeChar(this.Duplicate);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Year="+String.valueOf(Year));
		sb.append(",Quarter="+String.valueOf(Quarter));
		sb.append(",Month="+String.valueOf(Month));
		sb.append(",DayofMonth="+String.valueOf(DayofMonth));
		sb.append(",DayOfWeek="+String.valueOf(DayOfWeek));
		sb.append(",FlightDate="+FlightDate);
		sb.append(",Marketing_Airline_Network="+Marketing_Airline_Network);
		sb.append(",Operated_or_Branded_Code_Share_Partners="+Operated_or_Branded_Code_Share_Partners);
		sb.append(",DOT_ID_Marketing_Airline="+String.valueOf(DOT_ID_Marketing_Airline));
		sb.append(",IATA_Code_Marketing_Airline="+IATA_Code_Marketing_Airline);
		sb.append(",Flight_Number_Marketing_Airline="+String.valueOf(Flight_Number_Marketing_Airline));
		sb.append(",Originally_Scheduled_Code_Share_Airline="+Originally_Scheduled_Code_Share_Airline);
		sb.append(",DOT_ID_Originally_Scheduled_Code_Share_Airline="+DOT_ID_Originally_Scheduled_Code_Share_Airline);
		sb.append(",IATA_Code_Originally_Scheduled_Code_Share_Airline="+IATA_Code_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Flight_Num_Originally_Scheduled_Code_Share_Airline="+Flight_Num_Originally_Scheduled_Code_Share_Airline);
		sb.append(",Operating_Airline="+Operating_Airline);
		sb.append(",DOT_ID_Operating_Airline="+String.valueOf(DOT_ID_Operating_Airline));
		sb.append(",IATA_Code_Operating_Airline="+IATA_Code_Operating_Airline);
		sb.append(",Tail_Number="+Tail_Number);
		sb.append(",Flight_Number_Operating_Airline="+String.valueOf(Flight_Number_Operating_Airline));
		sb.append(",OriginAirportID="+String.valueOf(OriginAirportID));
		sb.append(",OriginAirportSeqID="+String.valueOf(OriginAirportSeqID));
		sb.append(",OriginCityMarketID="+String.valueOf(OriginCityMarketID));
		sb.append(",Origin="+Origin);
		sb.append(",OriginCityName="+OriginCityName);
		sb.append(",OriginState="+OriginState);
		sb.append(",OriginStateFips="+OriginStateFips);
		sb.append(",OriginStateName="+OriginStateName);
		sb.append(",OriginWac="+String.valueOf(OriginWac));
		sb.append(",DestAirportID="+String.valueOf(DestAirportID));
		sb.append(",DestAirportSeqID="+String.valueOf(DestAirportSeqID));
		sb.append(",DestCityMarketID="+String.valueOf(DestCityMarketID));
		sb.append(",Dest="+Dest);
		sb.append(",DestCityName="+DestCityName);
		sb.append(",DestState="+DestState);
		sb.append(",DestStateFips="+DestStateFips);
		sb.append(",DestStateName="+DestStateName);
		sb.append(",DestWac="+String.valueOf(DestWac));
		sb.append(",CRSDepTime="+CRSDepTime);
		sb.append(",DepTime="+DepTime);
		sb.append(",DepDelay="+DepDelay);
		sb.append(",DepDelayMinutes="+DepDelayMinutes);
		sb.append(",DepDel15="+DepDel15);
		sb.append(",DepartureDelayGroups="+DepartureDelayGroups);
		sb.append(",DepTimeBlk="+DepTimeBlk);
		sb.append(",TaxiOut="+TaxiOut);
		sb.append(",WheelsOff="+WheelsOff);
		sb.append(",WheelsOn="+WheelsOn);
		sb.append(",TaxiIn="+TaxiIn);
		sb.append(",CRSArrTime="+CRSArrTime);
		sb.append(",ArrTime="+ArrTime);
		sb.append(",ArrDelay="+ArrDelay);
		sb.append(",ArrDelayMinutes="+ArrDelayMinutes);
		sb.append(",ArrDel15="+ArrDel15);
		sb.append(",ArrivalDelayGroups="+ArrivalDelayGroups);
		sb.append(",ArrTimeBlk="+ArrTimeBlk);
		sb.append(",Cancelled="+String.valueOf(Cancelled));
		sb.append(",CancellationCode="+CancellationCode);
		sb.append(",Diverted="+String.valueOf(Diverted));
		sb.append(",CRSElapsedTime="+String.valueOf(CRSElapsedTime));
		sb.append(",ActualElapsedTime="+ActualElapsedTime);
		sb.append(",AirTime="+AirTime);
		sb.append(",Flights="+String.valueOf(Flights));
		sb.append(",Distance="+String.valueOf(Distance));
		sb.append(",DistanceGroup="+String.valueOf(DistanceGroup));
		sb.append(",CarrierDelay="+CarrierDelay);
		sb.append(",WeatherDelay="+WeatherDelay);
		sb.append(",NASDelay="+NASDelay);
		sb.append(",SecurityDelay="+SecurityDelay);
		sb.append(",LateAircraftDelay="+LateAircraftDelay);
		sb.append(",FirstDepTime="+FirstDepTime);
		sb.append(",TotalAddGTime="+TotalAddGTime);
		sb.append(",LongestAddGTime="+LongestAddGTime);
		sb.append(",DivAirportLandings="+String.valueOf(DivAirportLandings));
		sb.append(",DivReachedDest="+DivReachedDest);
		sb.append(",DivActualElapsedTime="+DivActualElapsedTime);
		sb.append(",DivArrDelay="+DivArrDelay);
		sb.append(",DivDistance="+DivDistance);
		sb.append(",Div1Airport="+Div1Airport);
		sb.append(",Div1AirportID="+Div1AirportID);
		sb.append(",Div1AirportSeqID="+Div1AirportSeqID);
		sb.append(",Div1WheelsOn="+Div1WheelsOn);
		sb.append(",Div1TotalGTime="+Div1TotalGTime);
		sb.append(",Div1LongestGTime="+Div1LongestGTime);
		sb.append(",Div1WheelsOff="+Div1WheelsOff);
		sb.append(",Div1TailNum="+Div1TailNum);
		sb.append(",Div2Airport="+Div2Airport);
		sb.append(",Div2AirportID="+Div2AirportID);
		sb.append(",Div2AirportSeqID="+Div2AirportSeqID);
		sb.append(",Div2WheelsOn="+Div2WheelsOn);
		sb.append(",Div2TotalGTime="+Div2TotalGTime);
		sb.append(",Div2LongestGTime="+Div2LongestGTime);
		sb.append(",Div2WheelsOff="+Div2WheelsOff);
		sb.append(",Div2TailNum="+Div2TailNum);
		sb.append(",Div3Airport="+Div3Airport);
		sb.append(",Div3AirportID="+Div3AirportID);
		sb.append(",Div3AirportSeqID="+Div3AirportSeqID);
		sb.append(",Div3WheelsOn="+Div3WheelsOn);
		sb.append(",Div3TotalGTime="+Div3TotalGTime);
		sb.append(",Div3LongestGTime="+Div3LongestGTime);
		sb.append(",Div3WheelsOff="+Div3WheelsOff);
		sb.append(",Div3TailNum="+Div3TailNum);
		sb.append(",Div4Airport="+Div4Airport);
		sb.append(",Div4AirportID="+Div4AirportID);
		sb.append(",Div4AirportSeqID="+Div4AirportSeqID);
		sb.append(",Div4WheelsOn="+Div4WheelsOn);
		sb.append(",Div4TotalGTime="+Div4TotalGTime);
		sb.append(",Div4LongestGTime="+Div4LongestGTime);
		sb.append(",Div4WheelsOff="+Div4WheelsOff);
		sb.append(",Div4TailNum="+Div4TailNum);
		sb.append(",Div5Airport="+Div5Airport);
		sb.append(",Div5AirportID="+Div5AirportID);
		sb.append(",Div5AirportSeqID="+Div5AirportSeqID);
		sb.append(",Div5WheelsOn="+Div5WheelsOn);
		sb.append(",Div5TotalGTime="+Div5TotalGTime);
		sb.append(",Div5LongestGTime="+Div5LongestGTime);
		sb.append(",Div5WheelsOff="+Div5WheelsOff);
		sb.append(",Div5TailNum="+Div5TailNum);
		sb.append(",Duplicate="+String.valueOf(Duplicate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Month, other.Month);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(delta)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_2{
				
					public void valueToConn_0(String[] rowtFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.Year = null;
					
							row2.Quarter = null;
					
							row2.Month = null;
					
							row2.DayofMonth = null;
					
							row2.DayOfWeek = null;
					
							row2.FlightDate = null;
					
							row2.Marketing_Airline_Network = null;
					
							row2.Operated_or_Branded_Code_Share_Partners = null;
					
							row2.DOT_ID_Marketing_Airline = null;
					
							row2.IATA_Code_Marketing_Airline = null;
					
							row2.Flight_Number_Marketing_Airline = null;
					
							row2.Originally_Scheduled_Code_Share_Airline = null;
					
							row2.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
					
							row2.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
					
							row2.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
					
							row2.Operating_Airline = null;
					
							row2.DOT_ID_Operating_Airline = null;
					
							row2.IATA_Code_Operating_Airline = null;
					
							row2.Tail_Number = null;
					
							row2.Flight_Number_Operating_Airline = null;
					
							row2.OriginAirportID = null;
					
							row2.OriginAirportSeqID = null;
					
							row2.OriginCityMarketID = null;
					
							row2.Origin = null;
					
							row2.OriginCityName = null;
					
							row2.OriginState = null;
					
							row2.OriginStateFips = null;
					
							row2.OriginStateName = null;
					
							row2.OriginWac = null;
					
							row2.DestAirportID = null;
					
							row2.DestAirportSeqID = null;
					
							row2.DestCityMarketID = null;
					
							row2.Dest = null;
					
							row2.DestCityName = null;
					
							row2.DestState = null;
					
							row2.DestStateFips = null;
					
							row2.DestStateName = null;
					
							row2.DestWac = null;
					
							row2.CRSDepTime = null;
					
							row2.DepTime = null;
					
							row2.DepDelay = null;
					
							row2.DepDelayMinutes = null;
					
							row2.DepDel15 = null;
					
							row2.DepartureDelayGroups = null;
					
							row2.DepTimeBlk = null;
					
							row2.TaxiOut = null;
					
							row2.WheelsOff = null;
					
							row2.WheelsOn = null;
					
							row2.TaxiIn = null;
					
							row2.CRSArrTime = null;
					
							row2.ArrTime = null;
					
							row2.ArrDelay = null;
					
							row2.ArrDelayMinutes = null;
					
							row2.ArrDel15 = null;
					
							row2.ArrivalDelayGroups = null;
					
							row2.ArrTimeBlk = null;
					
							row2.Cancelled = null;
					
							row2.CancellationCode = null;
					
							row2.Diverted = null;
					
							row2.CRSElapsedTime = null;
					
							row2.ActualElapsedTime = null;
					
							row2.AirTime = null;
					
							row2.Flights = null;
					
							row2.Distance = null;
					
							row2.DistanceGroup = null;
					
							row2.CarrierDelay = null;
					
							row2.WeatherDelay = null;
					
							row2.NASDelay = null;
					
							row2.SecurityDelay = null;
					
							row2.LateAircraftDelay = null;
					
							row2.FirstDepTime = null;
					
							row2.TotalAddGTime = null;
					
							row2.LongestAddGTime = null;
					
							row2.DivAirportLandings = null;
					
							row2.DivReachedDest = null;
					
							row2.DivActualElapsedTime = null;
					
							row2.DivArrDelay = null;
					
							row2.DivDistance = null;
					
							row2.Div1Airport = null;
					
							row2.Div1AirportID = null;
					
							row2.Div1AirportSeqID = null;
					
							row2.Div1WheelsOn = null;
					
							row2.Div1TotalGTime = null;
					
							row2.Div1LongestGTime = null;
					
							row2.Div1WheelsOff = null;
					
							row2.Div1TailNum = null;
					
							row2.Div2Airport = null;
					
							row2.Div2AirportID = null;
					
							row2.Div2AirportSeqID = null;
					
							row2.Div2WheelsOn = null;
					
							row2.Div2TotalGTime = null;
					
							row2.Div2LongestGTime = null;
					
							row2.Div2WheelsOff = null;
					
							row2.Div2TailNum = null;
					
							row2.Div3Airport = null;
					
							row2.Div3AirportID = null;
					
							row2.Div3AirportSeqID = null;
					
							row2.Div3WheelsOn = null;
					
							row2.Div3TotalGTime = null;
					
							row2.Div3LongestGTime = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Year = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Year", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Year = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Year = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Quarter = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Quarter", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Quarter = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Quarter = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Month = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Month", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Month = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Month = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DayofMonth = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayofMonth", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DayofMonth = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DayofMonth = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DayOfWeek = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DayOfWeek", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DayOfWeek = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DayOfWeek = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.FlightDate = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.FlightDate = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Marketing_Airline_Network = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Marketing_Airline_Network = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Operated_or_Branded_Code_Share_Partners = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Operated_or_Branded_Code_Share_Partners = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DOT_ID_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Marketing_Airline", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DOT_ID_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DOT_ID_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.IATA_Code_Marketing_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.IATA_Code_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Flight_Number_Marketing_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Marketing_Airline", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Flight_Number_Marketing_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Flight_Number_Marketing_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DOT_ID_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DOT_ID_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.IATA_Code_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.IATA_Code_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Flight_Num_Originally_Scheduled_Code_Share_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Flight_Num_Originally_Scheduled_Code_Share_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Operating_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DOT_ID_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DOT_ID_Operating_Airline", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DOT_ID_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DOT_ID_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.IATA_Code_Operating_Airline = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.IATA_Code_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Tail_Number = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Tail_Number = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Flight_Number_Operating_Airline = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flight_Number_Operating_Airline", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Flight_Number_Operating_Airline = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Flight_Number_Operating_Airline = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.OriginAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.OriginAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.OriginAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.OriginAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginAirportSeqID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.OriginAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.OriginAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.OriginCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginCityMarketID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.OriginCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.OriginCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Origin = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Origin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.OriginCityName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.OriginCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.OriginState = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.OriginState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.OriginStateFips = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.OriginStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.OriginStateName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.OriginStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.OriginWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"OriginWac", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.OriginWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.OriginWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DestAirportID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DestAirportID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DestAirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DestAirportSeqID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestAirportSeqID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DestAirportSeqID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DestAirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DestCityMarketID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestCityMarketID", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DestCityMarketID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DestCityMarketID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Dest = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Dest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DestCityName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DestCityName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DestState = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DestState = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DestStateFips = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DestStateFips = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DestStateName = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DestStateName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DestWac = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DestWac", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DestWac = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DestWac = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CRSDepTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CRSDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepDelayMinutes = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepDel15 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepartureDelayGroups = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepartureDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DepTimeBlk = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DepTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.TaxiOut = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.TaxiOut = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.TaxiIn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.TaxiIn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CRSArrTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CRSArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrDelayMinutes = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrDelayMinutes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrDel15 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrDel15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrivalDelayGroups = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrivalDelayGroups = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ArrTimeBlk = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ArrTimeBlk = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Cancelled = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Cancelled", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Cancelled = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Cancelled = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CancellationCode = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CancellationCode = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Diverted = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Diverted", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Diverted = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Diverted = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.CRSElapsedTime = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CRSElapsedTime", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.CRSElapsedTime = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.CRSElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.ActualElapsedTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.ActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.AirTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.AirTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Flights = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Flights", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Flights = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Flights = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Distance = ParserUtils.parseTo_Float(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Distance", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Distance = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Distance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DistanceGroup = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DistanceGroup", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DistanceGroup = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DistanceGroup = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.CarrierDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.CarrierDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.WeatherDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.WeatherDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.NASDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.NASDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.SecurityDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.SecurityDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 69;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.LateAircraftDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.LateAircraftDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 70;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.FirstDepTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.FirstDepTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 71;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.TotalAddGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.TotalAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 72;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.LongestAddGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.LongestAddGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 73;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.DivAirportLandings = ParserUtils.parseTo_Integer(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DivAirportLandings", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.DivAirportLandings = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.DivAirportLandings = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 74;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DivReachedDest = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DivReachedDest = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 75;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DivActualElapsedTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DivActualElapsedTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 76;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DivArrDelay = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DivArrDelay = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 77;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.DivDistance = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.DivDistance = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 78;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1Airport = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 79;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1AirportID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 80;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1AirportSeqID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 81;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 82;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1TotalGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 83;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1LongestGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 84;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 85;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div1TailNum = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div1TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 86;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2Airport = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 87;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2AirportID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 88;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2AirportSeqID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 89;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 90;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2TotalGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 91;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2LongestGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 92;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 93;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div2TailNum = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div2TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 94;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3Airport = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 95;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3AirportID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 96;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3AirportSeqID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 97;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 98;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3TotalGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 99;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3LongestGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3LongestGTime = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn_1(String[] rowtFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
						
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.Div3WheelsOff = null;
					
							row2.Div3TailNum = null;
					
							row2.Div4Airport = null;
					
							row2.Div4AirportID = null;
					
							row2.Div4AirportSeqID = null;
					
							row2.Div4WheelsOn = null;
					
							row2.Div4TotalGTime = null;
					
							row2.Div4LongestGTime = null;
					
							row2.Div4WheelsOff = null;
					
							row2.Div4TailNum = null;
					
							row2.Div5Airport = null;
					
							row2.Div5AirportID = null;
					
							row2.Div5AirportSeqID = null;
					
							row2.Div5WheelsOn = null;
					
							row2.Div5TotalGTime = null;
					
							row2.Div5LongestGTime = null;
					
							row2.Div5WheelsOff = null;
					
							row2.Div5TailNum = null;
					
							row2.Duplicate = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 100;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 101;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div3TailNum = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div3TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 102;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4Airport = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 103;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4AirportID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 104;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4AirportSeqID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 105;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 106;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4TotalGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 107;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4LongestGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 108;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 109;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div4TailNum = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div4TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 110;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5Airport = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5Airport = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 111;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5AirportID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5AirportID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 112;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5AirportSeqID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5AirportSeqID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 113;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5WheelsOn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5WheelsOn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 114;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5TotalGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5TotalGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 115;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5LongestGTime = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5LongestGTime = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 116;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5WheelsOff = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5WheelsOff = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 117;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.Div5TailNum = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row2.Div5TailNum = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 118;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
								
									if(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {
									
										row2.Duplicate = ParserUtils.parseTo_Character(rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Duplicate", "row2", rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2], ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
										}
    								}else{
    									
											
												row2.Duplicate = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row2.Duplicate = null;
							
						
						}
						
						
					
				}
				
					}
					
					public void valueToConn(String[] rowtFileInputDelimited_2,row2Struct row2 ) throws java.lang.Exception{
				
						valueToConn_0(rowtFileInputDelimited_2,row2 );
					
						valueToConn_1(rowtFileInputDelimited_2,row2 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_2 rowHelper_tFileInputDelimited_2  = new RowHelper_tFileInputDelimited_2();
			
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */"C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/flights_stage"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_2),fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        		}else{
							csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_2),fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('\"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
		        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
			rowHelper_tFileInputDelimited_2.valueToConn(rowtFileInputDelimited_2, row2 );
		
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
            							globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.Year = row2.Year;
				
				row2_HashRow.Quarter = row2.Quarter;
				
				row2_HashRow.Month = row2.Month;
				
				row2_HashRow.DayofMonth = row2.DayofMonth;
				
				row2_HashRow.DayOfWeek = row2.DayOfWeek;
				
				row2_HashRow.FlightDate = row2.FlightDate;
				
				row2_HashRow.Marketing_Airline_Network = row2.Marketing_Airline_Network;
				
				row2_HashRow.Operated_or_Branded_Code_Share_Partners = row2.Operated_or_Branded_Code_Share_Partners;
				
				row2_HashRow.DOT_ID_Marketing_Airline = row2.DOT_ID_Marketing_Airline;
				
				row2_HashRow.IATA_Code_Marketing_Airline = row2.IATA_Code_Marketing_Airline;
				
				row2_HashRow.Flight_Number_Marketing_Airline = row2.Flight_Number_Marketing_Airline;
				
				row2_HashRow.Originally_Scheduled_Code_Share_Airline = row2.Originally_Scheduled_Code_Share_Airline;
				
				row2_HashRow.DOT_ID_Originally_Scheduled_Code_Share_Airline = row2.DOT_ID_Originally_Scheduled_Code_Share_Airline;
				
				row2_HashRow.IATA_Code_Originally_Scheduled_Code_Share_Airline = row2.IATA_Code_Originally_Scheduled_Code_Share_Airline;
				
				row2_HashRow.Flight_Num_Originally_Scheduled_Code_Share_Airline = row2.Flight_Num_Originally_Scheduled_Code_Share_Airline;
				
				row2_HashRow.Operating_Airline = row2.Operating_Airline;
				
				row2_HashRow.DOT_ID_Operating_Airline = row2.DOT_ID_Operating_Airline;
				
				row2_HashRow.IATA_Code_Operating_Airline = row2.IATA_Code_Operating_Airline;
				
				row2_HashRow.Tail_Number = row2.Tail_Number;
				
				row2_HashRow.Flight_Number_Operating_Airline = row2.Flight_Number_Operating_Airline;
				
				row2_HashRow.OriginAirportID = row2.OriginAirportID;
				
				row2_HashRow.OriginAirportSeqID = row2.OriginAirportSeqID;
				
				row2_HashRow.OriginCityMarketID = row2.OriginCityMarketID;
				
				row2_HashRow.Origin = row2.Origin;
				
				row2_HashRow.OriginCityName = row2.OriginCityName;
				
				row2_HashRow.OriginState = row2.OriginState;
				
				row2_HashRow.OriginStateFips = row2.OriginStateFips;
				
				row2_HashRow.OriginStateName = row2.OriginStateName;
				
				row2_HashRow.OriginWac = row2.OriginWac;
				
				row2_HashRow.DestAirportID = row2.DestAirportID;
				
				row2_HashRow.DestAirportSeqID = row2.DestAirportSeqID;
				
				row2_HashRow.DestCityMarketID = row2.DestCityMarketID;
				
				row2_HashRow.Dest = row2.Dest;
				
				row2_HashRow.DestCityName = row2.DestCityName;
				
				row2_HashRow.DestState = row2.DestState;
				
				row2_HashRow.DestStateFips = row2.DestStateFips;
				
				row2_HashRow.DestStateName = row2.DestStateName;
				
				row2_HashRow.DestWac = row2.DestWac;
				
				row2_HashRow.CRSDepTime = row2.CRSDepTime;
				
				row2_HashRow.DepTime = row2.DepTime;
				
				row2_HashRow.DepDelay = row2.DepDelay;
				
				row2_HashRow.DepDelayMinutes = row2.DepDelayMinutes;
				
				row2_HashRow.DepDel15 = row2.DepDel15;
				
				row2_HashRow.DepartureDelayGroups = row2.DepartureDelayGroups;
				
				row2_HashRow.DepTimeBlk = row2.DepTimeBlk;
				
				row2_HashRow.TaxiOut = row2.TaxiOut;
				
				row2_HashRow.WheelsOff = row2.WheelsOff;
				
				row2_HashRow.WheelsOn = row2.WheelsOn;
				
				row2_HashRow.TaxiIn = row2.TaxiIn;
				
				row2_HashRow.CRSArrTime = row2.CRSArrTime;
				
				row2_HashRow.ArrTime = row2.ArrTime;
				
				row2_HashRow.ArrDelay = row2.ArrDelay;
				
				row2_HashRow.ArrDelayMinutes = row2.ArrDelayMinutes;
				
				row2_HashRow.ArrDel15 = row2.ArrDel15;
				
				row2_HashRow.ArrivalDelayGroups = row2.ArrivalDelayGroups;
				
				row2_HashRow.ArrTimeBlk = row2.ArrTimeBlk;
				
				row2_HashRow.Cancelled = row2.Cancelled;
				
				row2_HashRow.CancellationCode = row2.CancellationCode;
				
				row2_HashRow.Diverted = row2.Diverted;
				
				row2_HashRow.CRSElapsedTime = row2.CRSElapsedTime;
				
				row2_HashRow.ActualElapsedTime = row2.ActualElapsedTime;
				
				row2_HashRow.AirTime = row2.AirTime;
				
				row2_HashRow.Flights = row2.Flights;
				
				row2_HashRow.Distance = row2.Distance;
				
				row2_HashRow.DistanceGroup = row2.DistanceGroup;
				
				row2_HashRow.CarrierDelay = row2.CarrierDelay;
				
				row2_HashRow.WeatherDelay = row2.WeatherDelay;
				
				row2_HashRow.NASDelay = row2.NASDelay;
				
				row2_HashRow.SecurityDelay = row2.SecurityDelay;
				
				row2_HashRow.LateAircraftDelay = row2.LateAircraftDelay;
				
				row2_HashRow.FirstDepTime = row2.FirstDepTime;
				
				row2_HashRow.TotalAddGTime = row2.TotalAddGTime;
				
				row2_HashRow.LongestAddGTime = row2.LongestAddGTime;
				
				row2_HashRow.DivAirportLandings = row2.DivAirportLandings;
				
				row2_HashRow.DivReachedDest = row2.DivReachedDest;
				
				row2_HashRow.DivActualElapsedTime = row2.DivActualElapsedTime;
				
				row2_HashRow.DivArrDelay = row2.DivArrDelay;
				
				row2_HashRow.DivDistance = row2.DivDistance;
				
				row2_HashRow.Div1Airport = row2.Div1Airport;
				
				row2_HashRow.Div1AirportID = row2.Div1AirportID;
				
				row2_HashRow.Div1AirportSeqID = row2.Div1AirportSeqID;
				
				row2_HashRow.Div1WheelsOn = row2.Div1WheelsOn;
				
				row2_HashRow.Div1TotalGTime = row2.Div1TotalGTime;
				
				row2_HashRow.Div1LongestGTime = row2.Div1LongestGTime;
				
				row2_HashRow.Div1WheelsOff = row2.Div1WheelsOff;
				
				row2_HashRow.Div1TailNum = row2.Div1TailNum;
				
				row2_HashRow.Div2Airport = row2.Div2Airport;
				
				row2_HashRow.Div2AirportID = row2.Div2AirportID;
				
				row2_HashRow.Div2AirportSeqID = row2.Div2AirportSeqID;
				
				row2_HashRow.Div2WheelsOn = row2.Div2WheelsOn;
				
				row2_HashRow.Div2TotalGTime = row2.Div2TotalGTime;
				
				row2_HashRow.Div2LongestGTime = row2.Div2LongestGTime;
				
				row2_HashRow.Div2WheelsOff = row2.Div2WheelsOff;
				
				row2_HashRow.Div2TailNum = row2.Div2TailNum;
				
				row2_HashRow.Div3Airport = row2.Div3Airport;
				
				row2_HashRow.Div3AirportID = row2.Div3AirportID;
				
				row2_HashRow.Div3AirportSeqID = row2.Div3AirportSeqID;
				
				row2_HashRow.Div3WheelsOn = row2.Div3WheelsOn;
				
				row2_HashRow.Div3TotalGTime = row2.Div3TotalGTime;
				
				row2_HashRow.Div3LongestGTime = row2.Div3LongestGTime;
				
				row2_HashRow.Div3WheelsOff = row2.Div3WheelsOff;
				
				row2_HashRow.Div3TailNum = row2.Div3TailNum;
				
				row2_HashRow.Div4Airport = row2.Div4Airport;
				
				row2_HashRow.Div4AirportID = row2.Div4AirportID;
				
				row2_HashRow.Div4AirportSeqID = row2.Div4AirportSeqID;
				
				row2_HashRow.Div4WheelsOn = row2.Div4WheelsOn;
				
				row2_HashRow.Div4TotalGTime = row2.Div4TotalGTime;
				
				row2_HashRow.Div4LongestGTime = row2.Div4LongestGTime;
				
				row2_HashRow.Div4WheelsOff = row2.Div4WheelsOff;
				
				row2_HashRow.Div4TailNum = row2.Div4TailNum;
				
				row2_HashRow.Div5Airport = row2.Div5Airport;
				
				row2_HashRow.Div5AirportID = row2.Div5AirportID;
				
				row2_HashRow.Div5AirportSeqID = row2.Div5AirportSeqID;
				
				row2_HashRow.Div5WheelsOn = row2.Div5WheelsOn;
				
				row2_HashRow.Div5TotalGTime = row2.Div5TotalGTime;
				
				row2_HashRow.Div5LongestGTime = row2.Div5LongestGTime;
				
				row2_HashRow.Div5WheelsOff = row2.Div5WheelsOff;
				
				row2_HashRow.Div5TailNum = row2.Div5TailNum;
				
				row2_HashRow.Duplicate = row2.Duplicate;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final process_flights process_flightsClass = new process_flights();

        int exitCode = process_flightsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = process_flights.class.getClassLoader().getResourceAsStream("paravolar/process_flights_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = process_flights.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("month", "id_String");
                        if(context.getStringValue("month") == null) {
                            context.month = null;
                        } else {
                            context.month=(String) context.getProperty("month");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("month")) {
                context.month = (String) parentContextMap.get("month");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tS3Connection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tS3Connection_1) {
globalMap.put("tS3Connection_1_SUBPROCESS_STATE", -1);

e_tS3Connection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : process_flights");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeS3Connections();


    }







    private void closeS3Connections() {
        try {
    	com.amazonaws.services.s3.AmazonS3Client conn_tS3Connection_1 = (com.amazonaws.services.s3.AmazonS3Client)globalMap.get("conn_tS3Connection_1");
	    if(conn_tS3Connection_1 !=null){
			conn_tS3Connection_1.shutdown();
		}
        } catch (java.lang.Exception e) {
        }
    }







    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


            connections.put("conn_tS3Connection_1", globalMap.get("conn_tS3Connection_1"));




        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     904423 characters generated by Talend Open Studio for Data Integration 
 *     on the November 8, 2022 at 11:11:45 PM CST
 ************************************************************************************************/